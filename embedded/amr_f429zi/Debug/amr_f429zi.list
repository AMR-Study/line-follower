
amr_f429zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006318  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006588  08006588  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006588  08006588  00016588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006590  08006590  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006590  08006590  00016590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006594  08006594  00016594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004f28  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004f9c  20004f9c  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000226c6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040df  00000000  00000000  0004276a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001830  00000000  00000000  00046850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016a8  00000000  00000000  00048080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027cb2  00000000  00000000  00049728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c17b  00000000  00000000  000713da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef3fa  00000000  00000000  0008d555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017c94f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068f4  00000000  00000000  0017c9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080064b0 	.word	0x080064b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080064b0 	.word	0x080064b0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80004ec:	4b1c      	ldr	r3, [pc, #112]	; (8000560 <MX_ETH_Init+0x78>)
 80004ee:	4a1d      	ldr	r2, [pc, #116]	; (8000564 <MX_ETH_Init+0x7c>)
 80004f0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <MX_ETH_Init+0x78>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80004f8:	4b19      	ldr	r3, [pc, #100]	; (8000560 <MX_ETH_Init+0x78>)
 80004fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004fe:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_ETH_Init+0x78>)
 8000502:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000506:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_ETH_Init+0x78>)
 800050a:	2200      	movs	r2, #0
 800050c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_ETH_Init+0x80>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <MX_ETH_Init+0x80>)
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800051a:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_ETH_Init+0x80>)
 800051c:	22e1      	movs	r2, #225	; 0xe1
 800051e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_ETH_Init+0x80>)
 8000522:	2200      	movs	r2, #0
 8000524:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <MX_ETH_Init+0x80>)
 8000528:	2200      	movs	r2, #0
 800052a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_ETH_Init+0x80>)
 800052e:	2200      	movs	r2, #0
 8000530:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_ETH_Init+0x78>)
 8000534:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <MX_ETH_Init+0x80>)
 8000536:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_ETH_Init+0x78>)
 800053a:	2200      	movs	r2, #0
 800053c:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_ETH_Init+0x78>)
 8000540:	2200      	movs	r2, #0
 8000542:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_ETH_Init+0x78>)
 8000546:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800054a:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_ETH_Init+0x78>)
 800054e:	f000 fd57 	bl	8001000 <HAL_ETH_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000558:	f000 fa28 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20004a6c 	.word	0x20004a6c
 8000564:	40028000 	.word	0x40028000
 8000568:	20000090 	.word	0x20000090

0800056c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08e      	sub	sp, #56	; 0x38
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
 8000582:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a55      	ldr	r2, [pc, #340]	; (80006e0 <HAL_ETH_MspInit+0x174>)
 800058a:	4293      	cmp	r3, r2
 800058c:	f040 80a4 	bne.w	80006d8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	623b      	str	r3, [r7, #32]
 8000594:	4b53      	ldr	r3, [pc, #332]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000598:	4a52      	ldr	r2, [pc, #328]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 800059a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800059e:	6313      	str	r3, [r2, #48]	; 0x30
 80005a0:	4b50      	ldr	r3, [pc, #320]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005a8:	623b      	str	r3, [r7, #32]
 80005aa:	6a3b      	ldr	r3, [r7, #32]
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]
 80005b0:	4b4c      	ldr	r3, [pc, #304]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4a4b      	ldr	r2, [pc, #300]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 80005b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30
 80005bc:	4b49      	ldr	r3, [pc, #292]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005c4:	61fb      	str	r3, [r7, #28]
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 80005ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d0:	4a44      	ldr	r2, [pc, #272]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 80005d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005d6:	6313      	str	r3, [r2, #48]	; 0x30
 80005d8:	4b42      	ldr	r3, [pc, #264]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005e0:	61bb      	str	r3, [r7, #24]
 80005e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
 80005e8:	4b3e      	ldr	r3, [pc, #248]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	4a3d      	ldr	r2, [pc, #244]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6313      	str	r3, [r2, #48]	; 0x30
 80005f4:	4b3b      	ldr	r3, [pc, #236]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	2300      	movs	r3, #0
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	4b37      	ldr	r3, [pc, #220]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	4a36      	ldr	r2, [pc, #216]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6313      	str	r3, [r2, #48]	; 0x30
 8000610:	4b34      	ldr	r3, [pc, #208]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	f003 0301 	and.w	r3, r3, #1
 8000618:	613b      	str	r3, [r7, #16]
 800061a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000624:	4a2f      	ldr	r2, [pc, #188]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 8000626:	f043 0302 	orr.w	r3, r3, #2
 800062a:	6313      	str	r3, [r2, #48]	; 0x30
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 800062e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000630:	f003 0302 	and.w	r3, r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a28      	ldr	r2, [pc, #160]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 8000642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <HAL_ETH_MspInit+0x178>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000654:	2332      	movs	r3, #50	; 0x32
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000658:	2302      	movs	r3, #2
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000660:	2303      	movs	r3, #3
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000664:	230b      	movs	r3, #11
 8000666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800066c:	4619      	mov	r1, r3
 800066e:	481e      	ldr	r0, [pc, #120]	; (80006e8 <HAL_ETH_MspInit+0x17c>)
 8000670:	f001 f932 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000674:	2386      	movs	r3, #134	; 0x86
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000680:	2303      	movs	r3, #3
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000684:	230b      	movs	r3, #11
 8000686:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4817      	ldr	r0, [pc, #92]	; (80006ec <HAL_ETH_MspInit+0x180>)
 8000690:	f001 f922 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	2302      	movs	r3, #2
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006a6:	230b      	movs	r3, #11
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ae:	4619      	mov	r1, r3
 80006b0:	480f      	ldr	r0, [pc, #60]	; (80006f0 <HAL_ETH_MspInit+0x184>)
 80006b2:	f001 f911 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c8:	230b      	movs	r3, #11
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d0:	4619      	mov	r1, r3
 80006d2:	4808      	ldr	r0, [pc, #32]	; (80006f4 <HAL_ETH_MspInit+0x188>)
 80006d4:	f001 f900 	bl	80018d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80006d8:	bf00      	nop
 80006da:	3738      	adds	r7, #56	; 0x38
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40028000 	.word	0x40028000
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020800 	.word	0x40020800
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40021800 	.word	0x40021800

080006f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <MX_FREERTOS_Init+0x18>)
 80006fe:	2100      	movs	r1, #0
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_FREERTOS_Init+0x1c>)
 8000702:	f003 f8a3 	bl	800384c <osThreadNew>
 8000706:	4603      	mov	r3, r0
 8000708:	4a03      	ldr	r2, [pc, #12]	; (8000718 <MX_FREERTOS_Init+0x20>)
 800070a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	080064ec 	.word	0x080064ec
 8000714:	0800071d 	.word	0x0800071d
 8000718:	20004ab4 	.word	0x20004ab4

0800071c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f003 f923 	bl	8003970 <osDelay>
 800072a:	e7fb      	b.n	8000724 <StartDefaultTask+0x8>

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
 8000746:	4b4c      	ldr	r3, [pc, #304]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a4b      	ldr	r2, [pc, #300]	; (8000878 <MX_GPIO_Init+0x14c>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b49      	ldr	r3, [pc, #292]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	61bb      	str	r3, [r7, #24]
 800075c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	4b45      	ldr	r3, [pc, #276]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a44      	ldr	r2, [pc, #272]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b42      	ldr	r3, [pc, #264]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b3e      	ldr	r3, [pc, #248]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a3d      	ldr	r2, [pc, #244]	; (8000878 <MX_GPIO_Init+0x14c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b3b      	ldr	r3, [pc, #236]	; (8000878 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b37      	ldr	r3, [pc, #220]	; (8000878 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a36      	ldr	r2, [pc, #216]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b34      	ldr	r3, [pc, #208]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	4b30      	ldr	r3, [pc, #192]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a2f      	ldr	r2, [pc, #188]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b29      	ldr	r3, [pc, #164]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a28      	ldr	r2, [pc, #160]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b26      	ldr	r3, [pc, #152]	; (8000878 <MX_GPIO_Init+0x14c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f0:	4822      	ldr	r0, [pc, #136]	; (800087c <MX_GPIO_Init+0x150>)
 80007f2:	f001 fa1d 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2140      	movs	r1, #64	; 0x40
 80007fa:	4821      	ldr	r0, [pc, #132]	; (8000880 <MX_GPIO_Init+0x154>)
 80007fc:	f001 fa18 	bl	8001c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000800:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000806:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	481b      	ldr	r0, [pc, #108]	; (8000884 <MX_GPIO_Init+0x158>)
 8000818:	f001 f85e 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800081c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <MX_GPIO_Init+0x150>)
 8000836:	f001 f84f 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <MX_GPIO_Init+0x154>)
 8000852:	f001 f841 	bl	80018d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_GPIO_Init+0x154>)
 800086a:	f001 f835 	bl	80018d8 <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3730      	adds	r7, #48	; 0x30
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020400 	.word	0x40020400
 8000880:	40021800 	.word	0x40021800
 8000884:	40020800 	.word	0x40020800

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088c:	f000 fa70 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000890:	f000 f810 	bl	80008b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000894:	f7ff ff4a 	bl	800072c <MX_GPIO_Init>
  MX_ETH_Init();
 8000898:	f7ff fe26 	bl	80004e8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800089c:	f000 f944 	bl	8000b28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008a0:	f000 f9b4 	bl	8000c0c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80008a4:	f002 ff88 	bl	80037b8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80008a8:	f7ff ff26 	bl	80006f8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80008ac:	f002 ffa8 	bl	8003800 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <main+0x28>
	...

080008b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b094      	sub	sp, #80	; 0x50
 80008b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	2230      	movs	r2, #48	; 0x30
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f005 fd26 	bl	8006314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <SystemClock_Config+0xcc>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a27      	ldr	r2, [pc, #156]	; (8000980 <SystemClock_Config+0xcc>)
 80008e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b25      	ldr	r3, [pc, #148]	; (8000980 <SystemClock_Config+0xcc>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <SystemClock_Config+0xd0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a21      	ldr	r2, [pc, #132]	; (8000984 <SystemClock_Config+0xd0>)
 80008fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000902:	6013      	str	r3, [r2, #0]
 8000904:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <SystemClock_Config+0xd0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000914:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000922:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000924:	2304      	movs	r3, #4
 8000926:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000928:	23a8      	movs	r3, #168	; 0xa8
 800092a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092c:	2302      	movs	r3, #2
 800092e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000930:	2307      	movs	r3, #7
 8000932:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000934:	f107 0320 	add.w	r3, r7, #32
 8000938:	4618      	mov	r0, r3
 800093a:	f001 faaf 	bl	8001e9c <HAL_RCC_OscConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000944:	f000 f832 	bl	80009ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000948:	230f      	movs	r3, #15
 800094a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094c:	2302      	movs	r3, #2
 800094e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000954:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000960:	f107 030c 	add.w	r3, r7, #12
 8000964:	2105      	movs	r1, #5
 8000966:	4618      	mov	r0, r3
 8000968:	f001 fd10 	bl	800238c <HAL_RCC_ClockConfig>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000972:	f000 f81b 	bl	80009ac <Error_Handler>
  }
}
 8000976:	bf00      	nop
 8000978:	3750      	adds	r7, #80	; 0x50
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40007000 	.word	0x40007000

08000988 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800099a:	f000 fa0b 	bl	8000db4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40010000 	.word	0x40010000

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <Error_Handler+0x8>
	...

080009b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x54>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <HAL_MspInit+0x54>)
 80009c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009cc:	6453      	str	r3, [r2, #68]	; 0x44
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x54>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_MspInit+0x54>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_MspInit+0x54>)
 80009e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_MspInit+0x54>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	603b      	str	r3, [r7, #0]
 80009f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	210f      	movs	r1, #15
 80009fa:	f06f 0001 	mvn.w	r0, #1
 80009fe:	f000 fad5 	bl	8000fac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	2019      	movs	r0, #25
 8000a26:	f000 fac1 	bl	8000fac <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a2a:	2019      	movs	r0, #25
 8000a2c:	f000 fada 	bl	8000fe4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_InitTick+0xa4>)
 8000a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a38:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <HAL_InitTick+0xa4>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a40:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_InitTick+0xa4>)
 8000a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a4c:	f107 0210 	add.w	r2, r7, #16
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fe94 	bl	8002784 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a5c:	f001 fe7e 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8000a60:	4603      	mov	r3, r0
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_InitTick+0xa8>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	0c9b      	lsrs	r3, r3, #18
 8000a70:	3b01      	subs	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_InitTick+0xac>)
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <HAL_InitTick+0xb0>)
 8000a78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <HAL_InitTick+0xac>)
 8000a7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a82:	4a0e      	ldr	r2, [pc, #56]	; (8000abc <HAL_InitTick+0xac>)
 8000a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_InitTick+0xac>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_InitTick+0xac>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <HAL_InitTick+0xac>)
 8000a96:	f001 fea7 	bl	80027e8 <HAL_TIM_Base_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d104      	bne.n	8000aaa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <HAL_InitTick+0xac>)
 8000aa2:	f001 fefb 	bl	800289c <HAL_TIM_Base_Start_IT>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	431bde83 	.word	0x431bde83
 8000abc:	20004ab8 	.word	0x20004ab8
 8000ac0:	40010000 	.word	0x40010000

08000ac4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <NMI_Handler+0x4>

08000aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <HardFault_Handler+0x4>

08000ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <MemManage_Handler+0x4>

08000ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <BusFault_Handler+0x4>

08000adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <UsageFault_Handler+0x4>

08000ae2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000af6:	f001 ff41 	bl	800297c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20004ab8 	.word	0x20004ab8

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART3_UART_Init+0x4c>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <MX_USART3_UART_Init+0x50>)
 8000b30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <MX_USART3_UART_Init+0x4c>)
 8000b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART3_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART3_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART3_UART_Init+0x4c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART3_UART_Init+0x4c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART3_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART3_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART3_UART_Init+0x4c>)
 8000b60:	f002 f8f0 	bl	8002d44 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b6a:	f7ff ff1f 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20004b00 	.word	0x20004b00
 8000b78:	40004800 	.word	0x40004800

08000b7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_UART_MspInit+0x84>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d12c      	bne.n	8000bf8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	4a17      	ldr	r2, [pc, #92]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6413      	str	r3, [r2, #64]	; 0x40
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <HAL_UART_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be4:	2303      	movs	r3, #3
 8000be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000be8:	2307      	movs	r3, #7
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4805      	ldr	r0, [pc, #20]	; (8000c08 <HAL_UART_MspInit+0x8c>)
 8000bf4:	f000 fe70 	bl	80018d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000bf8:	bf00      	nop
 8000bfa:	3728      	adds	r7, #40	; 0x28
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40004800 	.word	0x40004800
 8000c04:	40023800 	.word	0x40023800
 8000c08:	40020c00 	.word	0x40020c00

08000c0c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	; (8000c64 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c50:	f001 f807 	bl	8001c62 <HAL_PCD_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c5a:	f7ff fea7 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20004b44 	.word	0x20004b44

08000c68 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c88:	d13f      	bne.n	8000d0a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <HAL_PCD_MspInit+0xac>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <HAL_PCD_MspInit+0xac>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <HAL_PCD_MspInit+0xac>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ca6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000cb8:	230a      	movs	r3, #10
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4815      	ldr	r0, [pc, #84]	; (8000d18 <HAL_PCD_MspInit+0xb0>)
 8000cc4:	f000 fe08 	bl	80018d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480e      	ldr	r0, [pc, #56]	; (8000d18 <HAL_PCD_MspInit+0xb0>)
 8000cde:	f000 fdfb 	bl	80018d8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_PCD_MspInit+0xac>)
 8000ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce6:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <HAL_PCD_MspInit+0xac>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	6353      	str	r3, [r2, #52]	; 0x34
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_PCD_MspInit+0xac>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a07      	ldr	r2, [pc, #28]	; (8000d14 <HAL_PCD_MspInit+0xac>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_PCD_MspInit+0xac>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000d0a:	bf00      	nop
 8000d0c:	3728      	adds	r7, #40	; 0x28
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d54 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d22:	490e      	ldr	r1, [pc, #56]	; (8000d5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d38:	4c0b      	ldr	r4, [pc, #44]	; (8000d68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d46:	f7ff fedd 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f005 faaf 	bl	80062ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fd9b 	bl	8000888 <main>
  bx  lr    
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d60:	08006598 	.word	0x08006598
  ldr r2, =_sbss
 8000d64:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d68:	20004f9c 	.word	0x20004f9c

08000d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <HAL_Init+0x40>)
 8000d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d80:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_Init+0x40>)
 8000d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_Init+0x40>)
 8000d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f8fc 	bl	8000f96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f7ff fe36 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff fe08 	bl	80009b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023c00 	.word	0x40023c00

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20004f4c 	.word	0x20004f4c

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20004f4c 	.word	0x20004f4c

08000df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e0c:	d005      	beq.n	8000e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_Delay+0x44>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4413      	add	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e1a:	bf00      	nop
 8000e1c:	f7ff ffde 	bl	8000ddc <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d8f7      	bhi.n	8000e1c <HAL_Delay+0x28>
  {
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000008 	.word	0x20000008

08000e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e6e:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <__NVIC_SetPriorityGrouping+0x44>)
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	60d3      	str	r3, [r2, #12]
}
 8000e74:	bf00      	nop
 8000e76:	3714      	adds	r7, #20
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e88:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <__NVIC_GetPriorityGrouping+0x18>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	f003 0307 	and.w	r3, r3, #7
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	db0b      	blt.n	8000eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	4907      	ldr	r1, [pc, #28]	; (8000ed8 <__NVIC_EnableIRQ+0x38>)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	e000e100 	.word	0xe000e100

08000edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	6039      	str	r1, [r7, #0]
 8000ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	db0a      	blt.n	8000f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	490c      	ldr	r1, [pc, #48]	; (8000f28 <__NVIC_SetPriority+0x4c>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	b2d2      	uxtb	r2, r2
 8000efe:	440b      	add	r3, r1
 8000f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f04:	e00a      	b.n	8000f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4908      	ldr	r1, [pc, #32]	; (8000f2c <__NVIC_SetPriority+0x50>)
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	3b04      	subs	r3, #4
 8000f14:	0112      	lsls	r2, r2, #4
 8000f16:	b2d2      	uxtb	r2, r2
 8000f18:	440b      	add	r3, r1
 8000f1a:	761a      	strb	r2, [r3, #24]
}
 8000f1c:	bf00      	nop
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000e100 	.word	0xe000e100
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b089      	sub	sp, #36	; 0x24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	f1c3 0307 	rsb	r3, r3, #7
 8000f4a:	2b04      	cmp	r3, #4
 8000f4c:	bf28      	it	cs
 8000f4e:	2304      	movcs	r3, #4
 8000f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3304      	adds	r3, #4
 8000f56:	2b06      	cmp	r3, #6
 8000f58:	d902      	bls.n	8000f60 <NVIC_EncodePriority+0x30>
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	e000      	b.n	8000f62 <NVIC_EncodePriority+0x32>
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	f04f 32ff 	mov.w	r2, #4294967295
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	401a      	ands	r2, r3
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	43d9      	mvns	r1, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	4313      	orrs	r3, r2
         );
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3724      	adds	r7, #36	; 0x24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff4c 	bl	8000e3c <__NVIC_SetPriorityGrouping>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbe:	f7ff ff61 	bl	8000e84 <__NVIC_GetPriorityGrouping>
 8000fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	68b9      	ldr	r1, [r7, #8]
 8000fc8:	6978      	ldr	r0, [r7, #20]
 8000fca:	f7ff ffb1 	bl	8000f30 <NVIC_EncodePriority>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff80 	bl	8000edc <__NVIC_SetPriority>
}
 8000fdc:	bf00      	nop
 8000fde:	3718      	adds	r7, #24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff54 	bl	8000ea0 <__NVIC_EnableIRQ>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001010:	4baa      	ldr	r3, [pc, #680]	; (80012bc <HAL_ETH_Init+0x2bc>)
 8001012:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e183      	b.n	800132e <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d106      	bne.n	8001040 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff fa96 	bl	800056c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	4b9e      	ldr	r3, [pc, #632]	; (80012c0 <HAL_ETH_Init+0x2c0>)
 8001046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001048:	4a9d      	ldr	r2, [pc, #628]	; (80012c0 <HAL_ETH_Init+0x2c0>)
 800104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104e:	6453      	str	r3, [r2, #68]	; 0x44
 8001050:	4b9b      	ldr	r3, [pc, #620]	; (80012c0 <HAL_ETH_Init+0x2c0>)
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800105c:	4b99      	ldr	r3, [pc, #612]	; (80012c4 <HAL_ETH_Init+0x2c4>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4a98      	ldr	r2, [pc, #608]	; (80012c4 <HAL_ETH_Init+0x2c4>)
 8001062:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001066:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001068:	4b96      	ldr	r3, [pc, #600]	; (80012c4 <HAL_ETH_Init+0x2c4>)
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4994      	ldr	r1, [pc, #592]	; (80012c4 <HAL_ETH_Init+0x2c4>)
 8001072:	4313      	orrs	r3, r2
 8001074:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0201 	orr.w	r2, r2, #1
 8001088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800108c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800108e:	f7ff fea5 	bl	8000ddc <HAL_GetTick>
 8001092:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001094:	e011      	b.n	80010ba <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001096:	f7ff fea1 	bl	8000ddc <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010a4:	d909      	bls.n	80010ba <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2203      	movs	r2, #3
 80010aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e139      	b.n	800132e <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1e4      	bne.n	8001096 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f023 031c 	bic.w	r3, r3, #28
 80010da:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80010dc:	f001 fb1e 	bl	800271c <HAL_RCC_GetHCLKFreq>
 80010e0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4a78      	ldr	r2, [pc, #480]	; (80012c8 <HAL_ETH_Init+0x2c8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d908      	bls.n	80010fc <HAL_ETH_Init+0xfc>
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4a77      	ldr	r2, [pc, #476]	; (80012cc <HAL_ETH_Init+0x2cc>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d804      	bhi.n	80010fc <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	61fb      	str	r3, [r7, #28]
 80010fa:	e027      	b.n	800114c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	4a73      	ldr	r2, [pc, #460]	; (80012cc <HAL_ETH_Init+0x2cc>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d908      	bls.n	8001116 <HAL_ETH_Init+0x116>
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	4a6d      	ldr	r2, [pc, #436]	; (80012bc <HAL_ETH_Init+0x2bc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d204      	bcs.n	8001116 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f043 030c 	orr.w	r3, r3, #12
 8001112:	61fb      	str	r3, [r7, #28]
 8001114:	e01a      	b.n	800114c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4a68      	ldr	r2, [pc, #416]	; (80012bc <HAL_ETH_Init+0x2bc>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d303      	bcc.n	8001126 <HAL_ETH_Init+0x126>
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4a6b      	ldr	r2, [pc, #428]	; (80012d0 <HAL_ETH_Init+0x2d0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d911      	bls.n	800114a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	4a69      	ldr	r2, [pc, #420]	; (80012d0 <HAL_ETH_Init+0x2d0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d908      	bls.n	8001140 <HAL_ETH_Init+0x140>
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	4a68      	ldr	r2, [pc, #416]	; (80012d4 <HAL_ETH_Init+0x2d4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d804      	bhi.n	8001140 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e005      	b.n	800114c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	e000      	b.n	800114c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800114a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	69fa      	ldr	r2, [r7, #28]
 8001152:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001154:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001158:	2100      	movs	r1, #0
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 f954 	bl	8001408 <HAL_ETH_WritePHYRegister>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00b      	beq.n	800117e <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800116a:	6939      	ldr	r1, [r7, #16]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f9b1 	bl	80014d4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e0d7      	b.n	800132e <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800117e:	20ff      	movs	r0, #255	; 0xff
 8001180:	f7ff fe38 	bl	8000df4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 80a5 	beq.w	80012d8 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800118e:	f7ff fe25 	bl	8000ddc <HAL_GetTick>
 8001192:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	461a      	mov	r2, r3
 800119a:	2101      	movs	r1, #1
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f8cb 	bl	8001338 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80011a2:	f7ff fe1b 	bl	8000ddc <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d90f      	bls.n	80011d4 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f98a 	bl	80014d4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2201      	movs	r2, #1
 80011c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011d0:	2303      	movs	r3, #3
 80011d2:	e0ac      	b.n	800132e <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0da      	beq.n	8001194 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e2:	2100      	movs	r1, #0
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 f90f 	bl	8001408 <HAL_ETH_WritePHYRegister>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00b      	beq.n	8001208 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011f4:	6939      	ldr	r1, [r7, #16]
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f000 f96c 	bl	80014d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001204:	2301      	movs	r3, #1
 8001206:	e092      	b.n	800132e <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001208:	f7ff fde8 	bl	8000ddc <HAL_GetTick>
 800120c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	461a      	mov	r2, r3
 8001214:	2101      	movs	r1, #1
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f88e 	bl	8001338 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800121c:	f7ff fdde 	bl	8000ddc <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f241 3288 	movw	r2, #5000	; 0x1388
 800122a:	4293      	cmp	r3, r2
 800122c:	d90f      	bls.n	800124e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001232:	6939      	ldr	r1, [r7, #16]
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f94d 	bl	80014d4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e06f      	b.n	800132e <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f003 0320 	and.w	r3, r3, #32
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0da      	beq.n	800120e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	461a      	mov	r2, r3
 800125e:	2110      	movs	r1, #16
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 f869 	bl	8001338 <HAL_ETH_ReadPHYRegister>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00b      	beq.n	8001284 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001270:	6939      	ldr	r1, [r7, #16]
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f92e 	bl	80014d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001280:	2301      	movs	r3, #1
 8001282:	e054      	b.n	800132e <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	e002      	b.n	800129e <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	e035      	b.n	800131c <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	e030      	b.n	800131c <HAL_ETH_Init+0x31c>
 80012ba:	bf00      	nop
 80012bc:	03938700 	.word	0x03938700
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800
 80012c8:	01312cff 	.word	0x01312cff
 80012cc:	02160ebf 	.word	0x02160ebf
 80012d0:	05f5e0ff 	.word	0x05f5e0ff
 80012d4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	08db      	lsrs	r3, r3, #3
 80012de:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	085b      	lsrs	r3, r3, #1
 80012e6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80012e8:	4313      	orrs	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	2100      	movs	r1, #0
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f000 f889 	bl	8001408 <HAL_ETH_WritePHYRegister>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00b      	beq.n	8001314 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001300:	6939      	ldr	r1, [r7, #16]
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f8e6 	bl	80014d4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2201      	movs	r2, #1
 800130c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e00c      	b.n	800132e <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001314:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001318:	f7ff fd6c 	bl	8000df4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f8d8 	bl	80014d4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop

08001338 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	460b      	mov	r3, r1
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b82      	cmp	r3, #130	; 0x82
 8001358:	d101      	bne.n	800135e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800135a:	2302      	movs	r3, #2
 800135c:	e050      	b.n	8001400 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2282      	movs	r2, #130	; 0x82
 8001362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	f003 031c 	and.w	r3, r3, #28
 8001374:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8a1b      	ldrh	r3, [r3, #16]
 800137a:	02db      	lsls	r3, r3, #11
 800137c:	b29b      	uxth	r3, r3
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4313      	orrs	r3, r2
 8001382:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001384:	897b      	ldrh	r3, [r7, #10]
 8001386:	019b      	lsls	r3, r3, #6
 8001388:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	4313      	orrs	r3, r2
 8001390:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f023 0302 	bic.w	r3, r3, #2
 8001398:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013aa:	f7ff fd17 	bl	8000ddc <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013b0:	e015      	b.n	80013de <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80013b2:	f7ff fd13 	bl	8000ddc <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d309      	bcc.n	80013d6 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e014      	b.n	8001400 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e4      	bne.n	80013b2 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	461a      	mov	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	460b      	mov	r3, r1
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b42      	cmp	r3, #66	; 0x42
 8001428:	d101      	bne.n	800142e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800142a:	2302      	movs	r3, #2
 800142c:	e04e      	b.n	80014cc <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2242      	movs	r2, #66	; 0x42
 8001432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	f003 031c 	and.w	r3, r3, #28
 8001444:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8a1b      	ldrh	r3, [r3, #16]
 800144a:	02db      	lsls	r3, r3, #11
 800144c:	b29b      	uxth	r3, r3
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	4313      	orrs	r3, r2
 8001452:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001454:	897b      	ldrh	r3, [r7, #10]
 8001456:	019b      	lsls	r3, r3, #6
 8001458:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	4313      	orrs	r3, r2
 8001460:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	b29a      	uxth	r2, r3
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001484:	f7ff fcaa 	bl	8000ddc <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800148a:	e015      	b.n	80014b8 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800148c:	f7ff fca6 	bl	8000ddc <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800149a:	d309      	bcc.n	80014b0 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e00d      	b.n	80014cc <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e4      	bne.n	800148c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b0b0      	sub	sp, #192	; 0xc0
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014f0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80014fe:	2300      	movs	r3, #0
 8001500:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001502:	2300      	movs	r3, #0
 8001504:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d103      	bne.n	8001522 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800151a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151e:	663b      	str	r3, [r7, #96]	; 0x60
 8001520:	e001      	b.n	8001526 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800152a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001530:	2300      	movs	r3, #0
 8001532:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001592:	2300      	movs	r3, #0
 8001594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ac:	4bac      	ldr	r3, [pc, #688]	; (8001860 <ETH_MACDMAConfig+0x38c>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80015b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80015b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80015b8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80015ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80015bc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80015be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80015c0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80015c6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80015c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80015ca:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80015cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80015ce:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80015d4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80015d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80015d8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80015da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80015dc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80015de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80015e0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80015e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80015e4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80015e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80015e8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80015ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015ee:	4313      	orrs	r3, r2
 80015f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015fc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fbf3 	bl	8000df4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001616:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001618:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800161a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800161c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800161e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001620:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001626:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001628:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800162c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800162e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001632:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001634:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001638:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800163c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001644:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001646:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001652:	2001      	movs	r0, #1
 8001654:	f7ff fbce 	bl	8000df4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001660:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800166a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001674:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	699b      	ldr	r3, [r3, #24]
 800167c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001680:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001684:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001688:	4013      	ands	r3, r2
 800168a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800168e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001692:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001694:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001698:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800169a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800169e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80016a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80016a4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80016a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80016aa:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80016ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80016b0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80016b2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016b6:	4313      	orrs	r3, r2
 80016b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016c4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80016d0:	2001      	movs	r0, #1
 80016d2:	f7ff fb8f 	bl	8000df4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016de:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80016e0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80016e4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff fb7a 	bl	8000df4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001708:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800170e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001712:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001718:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800171c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800172e:	2304      	movs	r3, #4
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800173c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800173e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001742:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800174e:	2300      	movs	r3, #0
 8001750:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001752:	2300      	movs	r3, #0
 8001754:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800175e:	3318      	adds	r3, #24
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001766:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800176a:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <ETH_MACDMAConfig+0x390>)
 800176c:	4013      	ands	r3, r2
 800176e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001772:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001774:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001776:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001778:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800177a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800177c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800177e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001780:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001782:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001784:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001786:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001788:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800178a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800178e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001790:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001792:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001794:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001798:	4313      	orrs	r3, r2
 800179a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a6:	3318      	adds	r3, #24
 80017a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017ac:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b6:	3318      	adds	r3, #24
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff fb18 	bl	8000df4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017cc:	3318      	adds	r3, #24
 80017ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017d2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80017d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80017d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80017d8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80017da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80017dc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80017de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80017e0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80017e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80017e4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80017e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017e8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80017ea:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80017ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80017ee:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800180c:	2001      	movs	r0, #1
 800180e:	f7ff faf1 	bl	8000df4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800181a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800181e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d10f      	bne.n	8001848 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001830:	331c      	adds	r3, #28
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800183c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001844:	331c      	adds	r3, #28
 8001846:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	461a      	mov	r2, r3
 800184e:	2100      	movs	r1, #0
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f809 	bl	8001868 <ETH_MACAddressConfig>
}
 8001856:	bf00      	nop
 8001858:	37c0      	adds	r7, #192	; 0xc0
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	ff20810f 	.word	0xff20810f
 8001864:	f8de3f23 	.word	0xf8de3f23

08001868 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001868:	b480      	push	{r7}
 800186a:	b087      	sub	sp, #28
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3305      	adds	r3, #5
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	3204      	adds	r2, #4
 8001880:	7812      	ldrb	r2, [r2, #0]
 8001882:	4313      	orrs	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <ETH_MACAddressConfig+0x68>)
 800188a:	4413      	add	r3, r2
 800188c:	461a      	mov	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3303      	adds	r3, #3
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	061a      	lsls	r2, r3, #24
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3302      	adds	r3, #2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	041b      	lsls	r3, r3, #16
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	021b      	lsls	r3, r3, #8
 80018ac:	4313      	orrs	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <ETH_MACAddressConfig+0x6c>)
 80018ba:	4413      	add	r3, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	6013      	str	r3, [r2, #0]
}
 80018c2:	bf00      	nop
 80018c4:	371c      	adds	r7, #28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40028040 	.word	0x40028040
 80018d4:	40028044 	.word	0x40028044

080018d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
 80018f2:	e177      	b.n	8001be4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	429a      	cmp	r2, r3
 800190e:	f040 8166 	bne.w	8001bde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	2b01      	cmp	r3, #1
 800191c:	d005      	beq.n	800192a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001926:	2b02      	cmp	r3, #2
 8001928:	d130      	bne.n	800198c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001960:	2201      	movs	r2, #1
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 0201 	and.w	r2, r3, #1
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b03      	cmp	r3, #3
 8001996:	d017      	beq.n	80019c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 0303 	and.w	r3, r3, #3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d123      	bne.n	8001a1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4013      	ands	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	69b9      	ldr	r1, [r7, #24]
 8001a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80c0 	beq.w	8001bde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_GPIO_Init+0x324>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7a:	4a61      	ldr	r2, [pc, #388]	; (8001c00 <HAL_GPIO_Init+0x328>)
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	220f      	movs	r2, #15
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a58      	ldr	r2, [pc, #352]	; (8001c04 <HAL_GPIO_Init+0x32c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d037      	beq.n	8001b16 <HAL_GPIO_Init+0x23e>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a57      	ldr	r2, [pc, #348]	; (8001c08 <HAL_GPIO_Init+0x330>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d031      	beq.n	8001b12 <HAL_GPIO_Init+0x23a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a56      	ldr	r2, [pc, #344]	; (8001c0c <HAL_GPIO_Init+0x334>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d02b      	beq.n	8001b0e <HAL_GPIO_Init+0x236>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a55      	ldr	r2, [pc, #340]	; (8001c10 <HAL_GPIO_Init+0x338>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d025      	beq.n	8001b0a <HAL_GPIO_Init+0x232>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a54      	ldr	r2, [pc, #336]	; (8001c14 <HAL_GPIO_Init+0x33c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d01f      	beq.n	8001b06 <HAL_GPIO_Init+0x22e>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a53      	ldr	r2, [pc, #332]	; (8001c18 <HAL_GPIO_Init+0x340>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d019      	beq.n	8001b02 <HAL_GPIO_Init+0x22a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a52      	ldr	r2, [pc, #328]	; (8001c1c <HAL_GPIO_Init+0x344>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d013      	beq.n	8001afe <HAL_GPIO_Init+0x226>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a51      	ldr	r2, [pc, #324]	; (8001c20 <HAL_GPIO_Init+0x348>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d00d      	beq.n	8001afa <HAL_GPIO_Init+0x222>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a50      	ldr	r2, [pc, #320]	; (8001c24 <HAL_GPIO_Init+0x34c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d007      	beq.n	8001af6 <HAL_GPIO_Init+0x21e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a4f      	ldr	r2, [pc, #316]	; (8001c28 <HAL_GPIO_Init+0x350>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_GPIO_Init+0x21a>
 8001aee:	2309      	movs	r3, #9
 8001af0:	e012      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af2:	230a      	movs	r3, #10
 8001af4:	e010      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001af6:	2308      	movs	r3, #8
 8001af8:	e00e      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afa:	2307      	movs	r3, #7
 8001afc:	e00c      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001afe:	2306      	movs	r3, #6
 8001b00:	e00a      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b02:	2305      	movs	r3, #5
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x240>
 8001b16:	2300      	movs	r3, #0
 8001b18:	69fa      	ldr	r2, [r7, #28]
 8001b1a:	f002 0203 	and.w	r2, r2, #3
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b28:	4935      	ldr	r1, [pc, #212]	; (8001c00 <HAL_GPIO_Init+0x328>)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b5a:	4a34      	ldr	r2, [pc, #208]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b60:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b84:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b8a:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bae:	4a1f      	ldr	r2, [pc, #124]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bb4:	4b1d      	ldr	r3, [pc, #116]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <HAL_GPIO_Init+0x354>)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3301      	adds	r3, #1
 8001be2:	61fb      	str	r3, [r7, #28]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b0f      	cmp	r3, #15
 8001be8:	f67f ae84 	bls.w	80018f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	3724      	adds	r7, #36	; 0x24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40020000 	.word	0x40020000
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020800 	.word	0x40020800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	40021c00 	.word	0x40021c00
 8001c24:	40022000 	.word	0x40022000
 8001c28:	40022400 	.word	0x40022400
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	807b      	strh	r3, [r7, #2]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c40:	787b      	ldrb	r3, [r7, #1]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c46:	887a      	ldrh	r2, [r7, #2]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c4c:	e003      	b.n	8001c56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c4e:	887b      	ldrh	r3, [r7, #2]
 8001c50:	041a      	lsls	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c64:	b08f      	sub	sp, #60	; 0x3c
 8001c66:	af0a      	add	r7, sp, #40	; 0x28
 8001c68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e10f      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7fe ffea 	bl	8000c68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2203      	movs	r2, #3
 8001c98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 fabd 	bl	8003232 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	687e      	ldr	r6, [r7, #4]
 8001cc0:	466d      	mov	r5, sp
 8001cc2:	f106 0410 	add.w	r4, r6, #16
 8001cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cd6:	1d33      	adds	r3, r6, #4
 8001cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cda:	6838      	ldr	r0, [r7, #0]
 8001cdc:	f001 fa48 	bl	8003170 <USB_CoreInit>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e0d0      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f001 faab 	bl	8003254 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e04a      	b.n	8001d9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	333d      	adds	r3, #61	; 0x3d
 8001d14:	2201      	movs	r2, #1
 8001d16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	440b      	add	r3, r1
 8001d26:	333c      	adds	r3, #60	; 0x3c
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	7bfb      	ldrb	r3, [r7, #15]
 8001d30:	b298      	uxth	r0, r3
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3342      	adds	r3, #66	; 0x42
 8001d40:	4602      	mov	r2, r0
 8001d42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	1a9b      	subs	r3, r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	333f      	adds	r3, #63	; 0x3f
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d58:	7bfa      	ldrb	r2, [r7, #15]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	3344      	adds	r3, #68	; 0x44
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	1a9b      	subs	r3, r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	3348      	adds	r3, #72	; 0x48
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	6879      	ldr	r1, [r7, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3350      	adds	r3, #80	; 0x50
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	3301      	adds	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3af      	bcc.n	8001d04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e044      	b.n	8001e34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	1a9b      	subs	r3, r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	440b      	add	r3, r1
 8001db8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	1a9b      	subs	r3, r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001dd6:	7bfa      	ldrb	r2, [r7, #15]
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	1a9b      	subs	r3, r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	440b      	add	r3, r1
 8001de4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	1a9b      	subs	r3, r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	3301      	adds	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d3b5      	bcc.n	8001daa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	687e      	ldr	r6, [r7, #4]
 8001e46:	466d      	mov	r5, sp
 8001e48:	f106 0410 	add.w	r4, r6, #16
 8001e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e5c:	1d33      	adds	r3, r6, #4
 8001e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e60:	6838      	ldr	r0, [r7, #0]
 8001e62:	f001 fa43 	bl	80032ec <USB_DevInit>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e00d      	b.n	8001e94 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 fbee 	bl	800366e <USB_DevDisconnect>

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e264      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d075      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	4ba3      	ldr	r3, [pc, #652]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d00c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4ba0      	ldr	r3, [pc, #640]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d112      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b9d      	ldr	r3, [pc, #628]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ede:	d10b      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4b99      	ldr	r3, [pc, #612]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d05b      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x108>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d157      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e23f      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0x74>
 8001f02:	4b91      	ldr	r3, [pc, #580]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a90      	ldr	r2, [pc, #576]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a8a      	ldr	r2, [pc, #552]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b88      	ldr	r3, [pc, #544]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a87      	ldr	r2, [pc, #540]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f34:	4b84      	ldr	r3, [pc, #528]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a83      	ldr	r2, [pc, #524]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b81      	ldr	r3, [pc, #516]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a80      	ldr	r2, [pc, #512]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7fe ff42 	bl	8000ddc <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7fe ff3e 	bl	8000ddc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e204      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b76      	ldr	r3, [pc, #472]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff2e 	bl	8000ddc <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f84:	f7fe ff2a 	bl	8000ddc <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1f0      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b6c      	ldr	r3, [pc, #432]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0xe8>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	4b65      	ldr	r3, [pc, #404]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b62      	ldr	r3, [pc, #392]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b5f      	ldr	r3, [pc, #380]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1c4      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b56      	ldr	r3, [pc, #344]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4952      	ldr	r1, [pc, #328]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b4f      	ldr	r3, [pc, #316]	; (800214c <HAL_RCC_OscConfig+0x2b0>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7fe fee3 	bl	8000ddc <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201a:	f7fe fedf 	bl	8000ddc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1a5      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b46      	ldr	r3, [pc, #280]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b43      	ldr	r3, [pc, #268]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4940      	ldr	r1, [pc, #256]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_OscConfig+0x2b0>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7fe fec2 	bl	8000ddc <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7fe febe 	bl	8000ddc <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e184      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b36      	ldr	r3, [pc, #216]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d030      	beq.n	80020e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b30      	ldr	r3, [pc, #192]	; (8002150 <HAL_RCC_OscConfig+0x2b4>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe fea2 	bl	8000ddc <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7fe fe9e 	bl	8000ddc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e164      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 80020b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x200>
 80020ba:	e015      	b.n	80020e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020bc:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_OscConfig+0x2b4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7fe fe8b 	bl	8000ddc <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ca:	f7fe fe87 	bl	8000ddc <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e14d      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 80020de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a0 	beq.w	8002236 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10f      	bne.n	8002126 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	4b0f      	ldr	r3, [pc, #60]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <HAL_RCC_OscConfig+0x2ac>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002122:	2301      	movs	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <HAL_RCC_OscConfig+0x2b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d121      	bne.n	8002176 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCC_OscConfig+0x2b8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a07      	ldr	r2, [pc, #28]	; (8002154 <HAL_RCC_OscConfig+0x2b8>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213e:	f7fe fe4d 	bl	8000ddc <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	e011      	b.n	800216a <HAL_RCC_OscConfig+0x2ce>
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800
 800214c:	42470000 	.word	0x42470000
 8002150:	42470e80 	.word	0x42470e80
 8002154:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002158:	f7fe fe40 	bl	8000ddc <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e106      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216a:	4b85      	ldr	r3, [pc, #532]	; (8002380 <HAL_RCC_OscConfig+0x4e4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x2f0>
 800217e:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002182:	4a80      	ldr	r2, [pc, #512]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	; 0x70
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x32a>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x312>
 8002194:	4b7b      	ldr	r3, [pc, #492]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 8002196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002198:	4a7a      	ldr	r2, [pc, #488]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6713      	str	r3, [r2, #112]	; 0x70
 80021a0:	4b78      	ldr	r3, [pc, #480]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	4a77      	ldr	r2, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6713      	str	r3, [r2, #112]	; 0x70
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x32a>
 80021ae:	4b75      	ldr	r3, [pc, #468]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 80021b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b2:	4a74      	ldr	r2, [pc, #464]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6713      	str	r3, [r2, #112]	; 0x70
 80021ba:	4b72      	ldr	r3, [pc, #456]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 80021bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021be:	4a71      	ldr	r2, [pc, #452]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7fe fe05 	bl	8000ddc <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7fe fe01 	bl	8000ddc <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0c5      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	4b65      	ldr	r3, [pc, #404]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 80021ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x33a>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe fdef 	bl	8000ddc <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe fdeb 	bl	8000ddc <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0af      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	4b5a      	ldr	r3, [pc, #360]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ee      	bne.n	8002202 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b56      	ldr	r3, [pc, #344]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a55      	ldr	r2, [pc, #340]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 809b 	beq.w	8002376 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002240:	4b50      	ldr	r3, [pc, #320]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d05c      	beq.n	8002306 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d141      	bne.n	80022d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCC_OscConfig+0x4ec>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe fdbf 	bl	8000ddc <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002262:	f7fe fdbb 	bl	8000ddc <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e081      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69da      	ldr	r2, [r3, #28]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	019b      	lsls	r3, r3, #6
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	085b      	lsrs	r3, r3, #1
 8002298:	3b01      	subs	r3, #1
 800229a:	041b      	lsls	r3, r3, #16
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	061b      	lsls	r3, r3, #24
 80022a4:	4937      	ldr	r1, [pc, #220]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_OscConfig+0x4ec>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b0:	f7fe fd94 	bl	8000ddc <HAL_GetTick>
 80022b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	e008      	b.n	80022ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b8:	f7fe fd90 	bl	8000ddc <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d901      	bls.n	80022ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e056      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ca:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0f0      	beq.n	80022b8 <HAL_RCC_OscConfig+0x41c>
 80022d6:	e04e      	b.n	8002376 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d8:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_RCC_OscConfig+0x4ec>)
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7fe fd7d 	bl	8000ddc <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe fd79 	bl	8000ddc <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e03f      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1f0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x44a>
 8002304:	e037      	b.n	8002376 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e032      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002312:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_RCC_OscConfig+0x4e8>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d028      	beq.n	8002372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d121      	bne.n	8002372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d11a      	bne.n	8002372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002348:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800234a:	4293      	cmp	r3, r2
 800234c:	d111      	bne.n	8002372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	3b01      	subs	r3, #1
 800235c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d107      	bne.n	8002372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800236e:	429a      	cmp	r2, r3
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40007000 	.word	0x40007000
 8002384:	40023800 	.word	0x40023800
 8002388:	42470060 	.word	0x42470060

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0cc      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 030f 	and.w	r3, r3, #15
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d90c      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b8      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	494d      	ldr	r1, [pc, #308]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d044      	beq.n	80024ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d119      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d003      	beq.n	800244a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	2b03      	cmp	r3, #3
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e067      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4934      	ldr	r1, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247c:	f7fe fcae 	bl	8000ddc <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe fcaa 	bl	8000ddc <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e04f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d20c      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e032      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002512:	f000 f821 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490a      	ldr	r1, [pc, #40]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fa6c 	bl	8000a10 <HAL_InitTick>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00
 8002548:	40023800 	.word	0x40023800
 800254c:	08006510 	.word	0x08006510
 8002550:	20000000 	.word	0x20000000
 8002554:	20000004 	.word	0x20000004

08002558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	2300      	movs	r3, #0
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	2300      	movs	r3, #0
 800256a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002570:	4b67      	ldr	r3, [pc, #412]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d00d      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x40>
 800257c:	2b08      	cmp	r3, #8
 800257e:	f200 80bd 	bhi.w	80026fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x34>
 8002586:	2b04      	cmp	r3, #4
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x3a>
 800258a:	e0b7      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b61      	ldr	r3, [pc, #388]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800258e:	60bb      	str	r3, [r7, #8]
       break;
 8002590:	e0b7      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b61      	ldr	r3, [pc, #388]	; (8002718 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002594:	60bb      	str	r3, [r7, #8]
      break;
 8002596:	e0b4      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002598:	4b5d      	ldr	r3, [pc, #372]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a2:	4b5b      	ldr	r3, [pc, #364]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d04d      	beq.n	800264a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ae:	4b58      	ldr	r3, [pc, #352]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	461a      	mov	r2, r3
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	ea02 0800 	and.w	r8, r2, r0
 80025c6:	ea03 0901 	and.w	r9, r3, r1
 80025ca:	4640      	mov	r0, r8
 80025cc:	4649      	mov	r1, r9
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	014b      	lsls	r3, r1, #5
 80025d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025dc:	0142      	lsls	r2, r0, #5
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	ebb0 0008 	subs.w	r0, r0, r8
 80025e6:	eb61 0109 	sbc.w	r1, r1, r9
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	018b      	lsls	r3, r1, #6
 80025f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025f8:	0182      	lsls	r2, r0, #6
 80025fa:	1a12      	subs	r2, r2, r0
 80025fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002600:	f04f 0000 	mov.w	r0, #0
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	00d9      	lsls	r1, r3, #3
 800260a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800260e:	00d0      	lsls	r0, r2, #3
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	eb12 0208 	adds.w	r2, r2, r8
 8002618:	eb43 0309 	adc.w	r3, r3, r9
 800261c:	f04f 0000 	mov.w	r0, #0
 8002620:	f04f 0100 	mov.w	r1, #0
 8002624:	0259      	lsls	r1, r3, #9
 8002626:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800262a:	0250      	lsls	r0, r2, #9
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	461a      	mov	r2, r3
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	f7fd fdd8 	bl	80001f0 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4613      	mov	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	e04a      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264a:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	099b      	lsrs	r3, r3, #6
 8002650:	461a      	mov	r2, r3
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	f240 10ff 	movw	r0, #511	; 0x1ff
 800265a:	f04f 0100 	mov.w	r1, #0
 800265e:	ea02 0400 	and.w	r4, r2, r0
 8002662:	ea03 0501 	and.w	r5, r3, r1
 8002666:	4620      	mov	r0, r4
 8002668:	4629      	mov	r1, r5
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	014b      	lsls	r3, r1, #5
 8002674:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002678:	0142      	lsls	r2, r0, #5
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	1b00      	subs	r0, r0, r4
 8002680:	eb61 0105 	sbc.w	r1, r1, r5
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	018b      	lsls	r3, r1, #6
 800268e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002692:	0182      	lsls	r2, r0, #6
 8002694:	1a12      	subs	r2, r2, r0
 8002696:	eb63 0301 	sbc.w	r3, r3, r1
 800269a:	f04f 0000 	mov.w	r0, #0
 800269e:	f04f 0100 	mov.w	r1, #0
 80026a2:	00d9      	lsls	r1, r3, #3
 80026a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80026a8:	00d0      	lsls	r0, r2, #3
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	1912      	adds	r2, r2, r4
 80026b0:	eb45 0303 	adc.w	r3, r5, r3
 80026b4:	f04f 0000 	mov.w	r0, #0
 80026b8:	f04f 0100 	mov.w	r1, #0
 80026bc:	0299      	lsls	r1, r3, #10
 80026be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026c2:	0290      	lsls	r0, r2, #10
 80026c4:	4602      	mov	r2, r0
 80026c6:	460b      	mov	r3, r1
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	461a      	mov	r2, r3
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	f7fd fd8c 	bl	80001f0 <__aeabi_uldivmod>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4613      	mov	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	3301      	adds	r3, #1
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	60bb      	str	r3, [r7, #8]
      break;
 80026fa:	e002      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026fe:	60bb      	str	r3, [r7, #8]
      break;
 8002700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002702:	68bb      	ldr	r3, [r7, #8]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3710      	adds	r7, #16
 8002708:	46bd      	mov	sp, r7
 800270a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	00f42400 	.word	0x00f42400
 8002718:	007a1200 	.word	0x007a1200

0800271c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002720:	4b03      	ldr	r3, [pc, #12]	; (8002730 <HAL_RCC_GetHCLKFreq+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000000 	.word	0x20000000

08002734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002738:	f7ff fff0 	bl	800271c <HAL_RCC_GetHCLKFreq>
 800273c:	4602      	mov	r2, r0
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	0a9b      	lsrs	r3, r3, #10
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	4903      	ldr	r1, [pc, #12]	; (8002758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800274a:	5ccb      	ldrb	r3, [r1, r3]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	08006520 	.word	0x08006520

0800275c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002760:	f7ff ffdc 	bl	800271c <HAL_RCC_GetHCLKFreq>
 8002764:	4602      	mov	r2, r0
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	0b5b      	lsrs	r3, r3, #13
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	4903      	ldr	r1, [pc, #12]	; (8002780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800
 8002780:	08006520 	.word	0x08006520

08002784 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	220f      	movs	r2, #15
 8002792:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002794:	4b12      	ldr	r3, [pc, #72]	; (80027e0 <HAL_RCC_GetClockConfig+0x5c>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <HAL_RCC_GetClockConfig+0x5c>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <HAL_RCC_GetClockConfig+0x5c>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_RCC_GetClockConfig+0x5c>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	08db      	lsrs	r3, r3, #3
 80027be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_RCC_GetClockConfig+0x60>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 020f 	and.w	r2, r3, #15
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	601a      	str	r2, [r3, #0]
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40023c00 	.word	0x40023c00

080027e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e041      	b.n	800287e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f839 	bl	8002886 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 f9d8 	bl	8002bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d001      	beq.n	80028b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e04e      	b.n	8002952 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a23      	ldr	r2, [pc, #140]	; (8002960 <HAL_TIM_Base_Start_IT+0xc4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d022      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d01d      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a1f      	ldr	r2, [pc, #124]	; (8002964 <HAL_TIM_Base_Start_IT+0xc8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d018      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <HAL_TIM_Base_Start_IT+0xcc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a1c      	ldr	r2, [pc, #112]	; (800296c <HAL_TIM_Base_Start_IT+0xd0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00e      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a1b      	ldr	r2, [pc, #108]	; (8002970 <HAL_TIM_Base_Start_IT+0xd4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d009      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a19      	ldr	r2, [pc, #100]	; (8002974 <HAL_TIM_Base_Start_IT+0xd8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d004      	beq.n	800291c <HAL_TIM_Base_Start_IT+0x80>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_TIM_Base_Start_IT+0xdc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d111      	bne.n	8002940 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b06      	cmp	r3, #6
 800292c:	d010      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800293e:	e007      	b.n	8002950 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40010000 	.word	0x40010000
 8002964:	40000400 	.word	0x40000400
 8002968:	40000800 	.word	0x40000800
 800296c:	40000c00 	.word	0x40000c00
 8002970:	40010400 	.word	0x40010400
 8002974:	40014000 	.word	0x40014000
 8002978:	40001800 	.word	0x40001800

0800297c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d122      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b02      	cmp	r3, #2
 800299e:	d11b      	bne.n	80029d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0202 	mvn.w	r2, #2
 80029a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f8ee 	bl	8002ba0 <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f8e0 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8f1 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d122      	bne.n	8002a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d11b      	bne.n	8002a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f06f 0204 	mvn.w	r2, #4
 80029fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2202      	movs	r2, #2
 8002a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8c4 	bl	8002ba0 <HAL_TIM_IC_CaptureCallback>
 8002a18:	e005      	b.n	8002a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f8b6 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 f8c7 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d122      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d11b      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0208 	mvn.w	r2, #8
 8002a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2204      	movs	r2, #4
 8002a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f89a 	bl	8002ba0 <HAL_TIM_IC_CaptureCallback>
 8002a6c:	e005      	b.n	8002a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f88c 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f89d 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d122      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0210 	mvn.w	r2, #16
 8002aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f870 	bl	8002ba0 <HAL_TIM_IC_CaptureCallback>
 8002ac0:	e005      	b.n	8002ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f862 	bl	8002b8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f873 	bl	8002bb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d10e      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0201 	mvn.w	r2, #1
 8002af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7fd ff44 	bl	8000988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b0a:	2b80      	cmp	r3, #128	; 0x80
 8002b0c:	d10e      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b18:	2b80      	cmp	r3, #128	; 0x80
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f902 	bl	8002d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b36:	2b40      	cmp	r3, #64	; 0x40
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b44:	2b40      	cmp	r3, #64	; 0x40
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f838 	bl	8002bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d10e      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0320 	and.w	r3, r3, #32
 8002b70:	2b20      	cmp	r3, #32
 8002b72:	d107      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0220 	mvn.w	r2, #32
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f8cc 	bl	8002d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b84:	bf00      	nop
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a40      	ldr	r2, [pc, #256]	; (8002cf0 <TIM_Base_SetConfig+0x114>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d013      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bfa:	d00f      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a3d      	ldr	r2, [pc, #244]	; (8002cf4 <TIM_Base_SetConfig+0x118>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00b      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a3c      	ldr	r2, [pc, #240]	; (8002cf8 <TIM_Base_SetConfig+0x11c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a3b      	ldr	r2, [pc, #236]	; (8002cfc <TIM_Base_SetConfig+0x120>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a3a      	ldr	r2, [pc, #232]	; (8002d00 <TIM_Base_SetConfig+0x124>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d108      	bne.n	8002c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a2f      	ldr	r2, [pc, #188]	; (8002cf0 <TIM_Base_SetConfig+0x114>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d02b      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d027      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a2c      	ldr	r2, [pc, #176]	; (8002cf4 <TIM_Base_SetConfig+0x118>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d023      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a2b      	ldr	r2, [pc, #172]	; (8002cf8 <TIM_Base_SetConfig+0x11c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d01f      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <TIM_Base_SetConfig+0x120>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d01b      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <TIM_Base_SetConfig+0x124>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d017      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a28      	ldr	r2, [pc, #160]	; (8002d04 <TIM_Base_SetConfig+0x128>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a27      	ldr	r2, [pc, #156]	; (8002d08 <TIM_Base_SetConfig+0x12c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00f      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a26      	ldr	r2, [pc, #152]	; (8002d0c <TIM_Base_SetConfig+0x130>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00b      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a25      	ldr	r2, [pc, #148]	; (8002d10 <TIM_Base_SetConfig+0x134>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <TIM_Base_SetConfig+0x138>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d003      	beq.n	8002c8e <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a23      	ldr	r2, [pc, #140]	; (8002d18 <TIM_Base_SetConfig+0x13c>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d108      	bne.n	8002ca0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a0a      	ldr	r2, [pc, #40]	; (8002cf0 <TIM_Base_SetConfig+0x114>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d003      	beq.n	8002cd4 <TIM_Base_SetConfig+0xf8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <TIM_Base_SetConfig+0x124>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d103      	bne.n	8002cdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	615a      	str	r2, [r3, #20]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40000c00 	.word	0x40000c00
 8002d00:	40010400 	.word	0x40010400
 8002d04:	40014000 	.word	0x40014000
 8002d08:	40014400 	.word	0x40014400
 8002d0c:	40014800 	.word	0x40014800
 8002d10:	40001800 	.word	0x40001800
 8002d14:	40001c00 	.word	0x40001c00
 8002d18:	40002000 	.word	0x40002000

08002d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d101      	bne.n	8002d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e03f      	b.n	8002dd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d106      	bne.n	8002d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd ff06 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2224      	movs	r2, #36	; 0x24
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f829 	bl	8002de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695a      	ldr	r2, [r3, #20]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de4:	b09f      	sub	sp, #124	; 0x7c
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	68d9      	ldr	r1, [r3, #12]
 8002df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	ea40 0301 	orr.w	r3, r0, r1
 8002e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e24:	f021 010c 	bic.w	r1, r1, #12
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3e:	6999      	ldr	r1, [r3, #24]
 8002e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	ea40 0301 	orr.w	r3, r0, r1
 8002e48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	4bc5      	ldr	r3, [pc, #788]	; (8003164 <UART_SetConfig+0x384>)
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d004      	beq.n	8002e5e <UART_SetConfig+0x7e>
 8002e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4bc3      	ldr	r3, [pc, #780]	; (8003168 <UART_SetConfig+0x388>)
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d103      	bne.n	8002e66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e5e:	f7ff fc7d 	bl	800275c <HAL_RCC_GetPCLK2Freq>
 8002e62:	6778      	str	r0, [r7, #116]	; 0x74
 8002e64:	e002      	b.n	8002e6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e66:	f7ff fc65 	bl	8002734 <HAL_RCC_GetPCLK1Freq>
 8002e6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e74:	f040 80b6 	bne.w	8002fe4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	f04f 0500 	mov.w	r5, #0
 8002e80:	4622      	mov	r2, r4
 8002e82:	462b      	mov	r3, r5
 8002e84:	1891      	adds	r1, r2, r2
 8002e86:	6439      	str	r1, [r7, #64]	; 0x40
 8002e88:	415b      	adcs	r3, r3
 8002e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e90:	1912      	adds	r2, r2, r4
 8002e92:	eb45 0303 	adc.w	r3, r5, r3
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	00d9      	lsls	r1, r3, #3
 8002ea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ea4:	00d0      	lsls	r0, r2, #3
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	1911      	adds	r1, r2, r4
 8002eac:	6639      	str	r1, [r7, #96]	; 0x60
 8002eae:	416b      	adcs	r3, r5
 8002eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8002eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	1891      	adds	r1, r2, r2
 8002ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ec0:	415b      	adcs	r3, r3
 8002ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ec8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002ecc:	f7fd f990 	bl	80001f0 <__aeabi_uldivmod>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4ba5      	ldr	r3, [pc, #660]	; (800316c <UART_SetConfig+0x38c>)
 8002ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	011e      	lsls	r6, r3, #4
 8002ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee0:	461c      	mov	r4, r3
 8002ee2:	f04f 0500 	mov.w	r5, #0
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	462b      	mov	r3, r5
 8002eea:	1891      	adds	r1, r2, r2
 8002eec:	6339      	str	r1, [r7, #48]	; 0x30
 8002eee:	415b      	adcs	r3, r3
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ef6:	1912      	adds	r2, r2, r4
 8002ef8:	eb45 0303 	adc.w	r3, r5, r3
 8002efc:	f04f 0000 	mov.w	r0, #0
 8002f00:	f04f 0100 	mov.w	r1, #0
 8002f04:	00d9      	lsls	r1, r3, #3
 8002f06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f0a:	00d0      	lsls	r0, r2, #3
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	1911      	adds	r1, r2, r4
 8002f12:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f14:	416b      	adcs	r3, r5
 8002f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	1891      	adds	r1, r2, r2
 8002f24:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f26:	415b      	adcs	r3, r3
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f32:	f7fd f95d 	bl	80001f0 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4b8c      	ldr	r3, [pc, #560]	; (800316c <UART_SetConfig+0x38c>)
 8002f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	2164      	movs	r1, #100	; 0x64
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	3332      	adds	r3, #50	; 0x32
 8002f4e:	4a87      	ldr	r2, [pc, #540]	; (800316c <UART_SetConfig+0x38c>)
 8002f50:	fba2 2303 	umull	r2, r3, r2, r3
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f5c:	441e      	add	r6, r3
 8002f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f60:	4618      	mov	r0, r3
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	1894      	adds	r4, r2, r2
 8002f6c:	623c      	str	r4, [r7, #32]
 8002f6e:	415b      	adcs	r3, r3
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
 8002f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f76:	1812      	adds	r2, r2, r0
 8002f78:	eb41 0303 	adc.w	r3, r1, r3
 8002f7c:	f04f 0400 	mov.w	r4, #0
 8002f80:	f04f 0500 	mov.w	r5, #0
 8002f84:	00dd      	lsls	r5, r3, #3
 8002f86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f8a:	00d4      	lsls	r4, r2, #3
 8002f8c:	4622      	mov	r2, r4
 8002f8e:	462b      	mov	r3, r5
 8002f90:	1814      	adds	r4, r2, r0
 8002f92:	653c      	str	r4, [r7, #80]	; 0x50
 8002f94:	414b      	adcs	r3, r1
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
 8002f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	1891      	adds	r1, r2, r2
 8002fa4:	61b9      	str	r1, [r7, #24]
 8002fa6:	415b      	adcs	r3, r3
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002fb2:	f7fd f91d 	bl	80001f0 <__aeabi_uldivmod>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4b6c      	ldr	r3, [pc, #432]	; (800316c <UART_SetConfig+0x38c>)
 8002fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	2164      	movs	r1, #100	; 0x64
 8002fc4:	fb01 f303 	mul.w	r3, r1, r3
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	3332      	adds	r3, #50	; 0x32
 8002fce:	4a67      	ldr	r2, [pc, #412]	; (800316c <UART_SetConfig+0x38c>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	095b      	lsrs	r3, r3, #5
 8002fd6:	f003 0207 	and.w	r2, r3, #7
 8002fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4432      	add	r2, r6
 8002fe0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fe2:	e0b9      	b.n	8003158 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	f04f 0500 	mov.w	r5, #0
 8002fec:	4622      	mov	r2, r4
 8002fee:	462b      	mov	r3, r5
 8002ff0:	1891      	adds	r1, r2, r2
 8002ff2:	6139      	str	r1, [r7, #16]
 8002ff4:	415b      	adcs	r3, r3
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ffc:	1912      	adds	r2, r2, r4
 8002ffe:	eb45 0303 	adc.w	r3, r5, r3
 8003002:	f04f 0000 	mov.w	r0, #0
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	00d9      	lsls	r1, r3, #3
 800300c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003010:	00d0      	lsls	r0, r2, #3
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	eb12 0804 	adds.w	r8, r2, r4
 800301a:	eb43 0905 	adc.w	r9, r3, r5
 800301e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	4618      	mov	r0, r3
 8003024:	f04f 0100 	mov.w	r1, #0
 8003028:	f04f 0200 	mov.w	r2, #0
 800302c:	f04f 0300 	mov.w	r3, #0
 8003030:	008b      	lsls	r3, r1, #2
 8003032:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003036:	0082      	lsls	r2, r0, #2
 8003038:	4640      	mov	r0, r8
 800303a:	4649      	mov	r1, r9
 800303c:	f7fd f8d8 	bl	80001f0 <__aeabi_uldivmod>
 8003040:	4602      	mov	r2, r0
 8003042:	460b      	mov	r3, r1
 8003044:	4b49      	ldr	r3, [pc, #292]	; (800316c <UART_SetConfig+0x38c>)
 8003046:	fba3 2302 	umull	r2, r3, r3, r2
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	011e      	lsls	r6, r3, #4
 800304e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003050:	4618      	mov	r0, r3
 8003052:	f04f 0100 	mov.w	r1, #0
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	1894      	adds	r4, r2, r2
 800305c:	60bc      	str	r4, [r7, #8]
 800305e:	415b      	adcs	r3, r3
 8003060:	60fb      	str	r3, [r7, #12]
 8003062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003066:	1812      	adds	r2, r2, r0
 8003068:	eb41 0303 	adc.w	r3, r1, r3
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	f04f 0500 	mov.w	r5, #0
 8003074:	00dd      	lsls	r5, r3, #3
 8003076:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800307a:	00d4      	lsls	r4, r2, #3
 800307c:	4622      	mov	r2, r4
 800307e:	462b      	mov	r3, r5
 8003080:	1814      	adds	r4, r2, r0
 8003082:	64bc      	str	r4, [r7, #72]	; 0x48
 8003084:	414b      	adcs	r3, r1
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4618      	mov	r0, r3
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	008b      	lsls	r3, r1, #2
 800309c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030a0:	0082      	lsls	r2, r0, #2
 80030a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80030a6:	f7fd f8a3 	bl	80001f0 <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4b2f      	ldr	r3, [pc, #188]	; (800316c <UART_SetConfig+0x38c>)
 80030b0:	fba3 1302 	umull	r1, r3, r3, r2
 80030b4:	095b      	lsrs	r3, r3, #5
 80030b6:	2164      	movs	r1, #100	; 0x64
 80030b8:	fb01 f303 	mul.w	r3, r1, r3
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	011b      	lsls	r3, r3, #4
 80030c0:	3332      	adds	r3, #50	; 0x32
 80030c2:	4a2a      	ldr	r2, [pc, #168]	; (800316c <UART_SetConfig+0x38c>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ce:	441e      	add	r6, r3
 80030d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d2:	4618      	mov	r0, r3
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	1894      	adds	r4, r2, r2
 80030de:	603c      	str	r4, [r7, #0]
 80030e0:	415b      	adcs	r3, r3
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030e8:	1812      	adds	r2, r2, r0
 80030ea:	eb41 0303 	adc.w	r3, r1, r3
 80030ee:	f04f 0400 	mov.w	r4, #0
 80030f2:	f04f 0500 	mov.w	r5, #0
 80030f6:	00dd      	lsls	r5, r3, #3
 80030f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030fc:	00d4      	lsls	r4, r2, #3
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	eb12 0a00 	adds.w	sl, r2, r0
 8003106:	eb43 0b01 	adc.w	fp, r3, r1
 800310a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4618      	mov	r0, r3
 8003110:	f04f 0100 	mov.w	r1, #0
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	008b      	lsls	r3, r1, #2
 800311e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003122:	0082      	lsls	r2, r0, #2
 8003124:	4650      	mov	r0, sl
 8003126:	4659      	mov	r1, fp
 8003128:	f7fd f862 	bl	80001f0 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4b0e      	ldr	r3, [pc, #56]	; (800316c <UART_SetConfig+0x38c>)
 8003132:	fba3 1302 	umull	r1, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2164      	movs	r1, #100	; 0x64
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	3332      	adds	r3, #50	; 0x32
 8003144:	4a09      	ldr	r2, [pc, #36]	; (800316c <UART_SetConfig+0x38c>)
 8003146:	fba2 2303 	umull	r2, r3, r2, r3
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	f003 020f 	and.w	r2, r3, #15
 8003150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4432      	add	r2, r6
 8003156:	609a      	str	r2, [r3, #8]
}
 8003158:	bf00      	nop
 800315a:	377c      	adds	r7, #124	; 0x7c
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003162:	bf00      	nop
 8003164:	40011000 	.word	0x40011000
 8003168:	40011400 	.word	0x40011400
 800316c:	51eb851f 	.word	0x51eb851f

08003170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003170:	b084      	sub	sp, #16
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	f107 001c 	add.w	r0, r7, #28
 800317e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	2b01      	cmp	r3, #1
 8003186:	d122      	bne.n	80031ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800319c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80031b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d105      	bne.n	80031c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fa82 	bl	80036cc <USB_CoreReset>
 80031c8:	4603      	mov	r3, r0
 80031ca:	73fb      	strb	r3, [r7, #15]
 80031cc:	e01a      	b.n	8003204 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa76 	bl	80036cc <USB_CoreReset>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80031e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
 80031f6:	e005      	b.n	8003204 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003206:	2b01      	cmp	r3, #1
 8003208:	d10b      	bne.n	8003222 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f043 0206 	orr.w	r2, r3, #6
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003222:	7bfb      	ldrb	r3, [r7, #15]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800322e:	b004      	add	sp, #16
 8003230:	4770      	bx	lr

08003232 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f023 0201 	bic.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d115      	bne.n	80032a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003282:	2001      	movs	r0, #1
 8003284:	f7fd fdb6 	bl	8000df4 <HAL_Delay>
      ms++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3301      	adds	r3, #1
 800328c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fa0e 	bl	80036b0 <USB_GetMode>
 8003294:	4603      	mov	r3, r0
 8003296:	2b01      	cmp	r3, #1
 8003298:	d01e      	beq.n	80032d8 <USB_SetCurrentMode+0x84>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b31      	cmp	r3, #49	; 0x31
 800329e:	d9f0      	bls.n	8003282 <USB_SetCurrentMode+0x2e>
 80032a0:	e01a      	b.n	80032d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d115      	bne.n	80032d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80032b4:	2001      	movs	r0, #1
 80032b6:	f7fd fd9d 	bl	8000df4 <HAL_Delay>
      ms++;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3301      	adds	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f9f5 	bl	80036b0 <USB_GetMode>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <USB_SetCurrentMode+0x84>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b31      	cmp	r3, #49	; 0x31
 80032d0:	d9f0      	bls.n	80032b4 <USB_SetCurrentMode+0x60>
 80032d2:	e001      	b.n	80032d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e005      	b.n	80032e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b32      	cmp	r3, #50	; 0x32
 80032dc:	d101      	bne.n	80032e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032ec:	b084      	sub	sp, #16
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80032fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	e009      	b.n	8003320 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	3340      	adds	r3, #64	; 0x40
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	2200      	movs	r2, #0
 8003318:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3301      	adds	r3, #1
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b0e      	cmp	r3, #14
 8003324:	d9f2      	bls.n	800330c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d11c      	bne.n	8003366 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333a:	f043 0302 	orr.w	r3, r3, #2
 800333e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
 8003364:	e00b      	b.n	800337e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003384:	461a      	mov	r2, r3
 8003386:	2300      	movs	r3, #0
 8003388:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003390:	4619      	mov	r1, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003398:	461a      	mov	r2, r3
 800339a:	680b      	ldr	r3, [r1, #0]
 800339c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d10c      	bne.n	80033be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80033a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d104      	bne.n	80033b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80033aa:	2100      	movs	r1, #0
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f945 	bl	800363c <USB_SetDevSpeed>
 80033b2:	e008      	b.n	80033c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80033b4:	2101      	movs	r1, #1
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f940 	bl	800363c <USB_SetDevSpeed>
 80033bc:	e003      	b.n	80033c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80033be:	2103      	movs	r1, #3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f93b 	bl	800363c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80033c6:	2110      	movs	r1, #16
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 f8f3 	bl	80035b4 <USB_FlushTxFifo>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f90f 	bl	80035fc <USB_FlushRxFifo>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	461a      	mov	r2, r3
 80033f0:	2300      	movs	r3, #0
 80033f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033fa:	461a      	mov	r2, r3
 80033fc:	2300      	movs	r3, #0
 80033fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003406:	461a      	mov	r2, r3
 8003408:	2300      	movs	r3, #0
 800340a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	e043      	b.n	800349a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	015a      	lsls	r2, r3, #5
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4413      	add	r3, r2
 800341a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003428:	d118      	bne.n	800345c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800343c:	461a      	mov	r2, r3
 800343e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e013      	b.n	800346e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003452:	461a      	mov	r2, r3
 8003454:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	e008      	b.n	800346e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003468:	461a      	mov	r2, r3
 800346a:	2300      	movs	r3, #0
 800346c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	015a      	lsls	r2, r3, #5
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800347a:	461a      	mov	r2, r3
 800347c:	2300      	movs	r3, #0
 800347e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800348c:	461a      	mov	r2, r3
 800348e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003492:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	3301      	adds	r3, #1
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d3b7      	bcc.n	8003412 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	e043      	b.n	8003530 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034be:	d118      	bne.n	80034f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10a      	bne.n	80034dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	461a      	mov	r2, r3
 80034d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	e013      	b.n	8003504 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e8:	461a      	mov	r2, r3
 80034ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e008      	b.n	8003504 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	015a      	lsls	r2, r3, #5
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4413      	add	r3, r2
 80034fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034fe:	461a      	mov	r2, r3
 8003500:	2300      	movs	r3, #0
 8003502:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4413      	add	r3, r2
 800350c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003510:	461a      	mov	r2, r3
 8003512:	2300      	movs	r3, #0
 8003514:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003522:	461a      	mov	r2, r3
 8003524:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003528:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	3301      	adds	r3, #1
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d3b7      	bcc.n	80034a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800354a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003558:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f043 0210 	orr.w	r2, r3, #16
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	699a      	ldr	r2, [r3, #24]
 8003570:	4b0f      	ldr	r3, [pc, #60]	; (80035b0 <USB_DevInit+0x2c4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f043 0208 	orr.w	r2, r3, #8
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800358a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d107      	bne.n	80035a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003598:	f043 0304 	orr.w	r3, r3, #4
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035ac:	b004      	add	sp, #16
 80035ae:	4770      	bx	lr
 80035b0:	803c3800 	.word	0x803c3800

080035b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3301      	adds	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	4a08      	ldr	r2, [pc, #32]	; (80035f8 <USB_FlushTxFifo+0x44>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e006      	b.n	80035ec <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d0f1      	beq.n	80035ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr
 80035f8:	00030d40 	.word	0x00030d40

080035fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2210      	movs	r2, #16
 800360c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3301      	adds	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	4a08      	ldr	r2, [pc, #32]	; (8003638 <USB_FlushRxFifo+0x3c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e006      	b.n	800362c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b10      	cmp	r3, #16
 8003628:	d0f1      	beq.n	800360e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	00030d40 	.word	0x00030d40

0800363c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	68f9      	ldr	r1, [r7, #12]
 8003658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800365c:	4313      	orrs	r3, r2
 800365e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800366e:	b480      	push	{r7}
 8003670:	b085      	sub	sp, #20
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003688:	f023 0303 	bic.w	r3, r3, #3
 800368c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f003 0301 	and.w	r3, r3, #1
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	4a13      	ldr	r2, [pc, #76]	; (800372c <USB_CoreReset+0x60>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e01a      	b.n	800371e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	daf3      	bge.n	80036d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f043 0201 	orr.w	r2, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	4a09      	ldr	r2, [pc, #36]	; (800372c <USB_CoreReset+0x60>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e006      	b.n	800371e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d0f1      	beq.n	8003700 <USB_CoreReset+0x34>

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	00030d40 	.word	0x00030d40

08003730 <__NVIC_SetPriority>:
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	2b00      	cmp	r3, #0
 8003742:	db0a      	blt.n	800375a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	490c      	ldr	r1, [pc, #48]	; (800377c <__NVIC_SetPriority+0x4c>)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	440b      	add	r3, r1
 8003754:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003758:	e00a      	b.n	8003770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4908      	ldr	r1, [pc, #32]	; (8003780 <__NVIC_SetPriority+0x50>)
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3b04      	subs	r3, #4
 8003768:	0112      	lsls	r2, r2, #4
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	440b      	add	r3, r1
 800376e:	761a      	strb	r2, [r3, #24]
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000e100 	.word	0xe000e100
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <SysTick_Handler+0x1c>)
 800378a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800378c:	f001 fd28 	bl	80051e0 <xTaskGetSchedulerState>
 8003790:	4603      	mov	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d001      	beq.n	800379a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003796:	f002 fb0f 	bl	8005db8 <xPortSysTickHandler>
  }
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	e000e010 	.word	0xe000e010

080037a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80037a8:	2100      	movs	r1, #0
 80037aa:	f06f 0004 	mvn.w	r0, #4
 80037ae:	f7ff ffbf 	bl	8003730 <__NVIC_SetPriority>
#endif
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037be:	f3ef 8305 	mrs	r3, IPSR
 80037c2:	603b      	str	r3, [r7, #0]
  return(result);
 80037c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037ca:	f06f 0305 	mvn.w	r3, #5
 80037ce:	607b      	str	r3, [r7, #4]
 80037d0:	e00c      	b.n	80037ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037d2:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <osKernelInitialize+0x44>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d105      	bne.n	80037e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037da:	4b08      	ldr	r3, [pc, #32]	; (80037fc <osKernelInitialize+0x44>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	e002      	b.n	80037ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037e6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037ec:	687b      	ldr	r3, [r7, #4]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000098 	.word	0x20000098

08003800 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003806:	f3ef 8305 	mrs	r3, IPSR
 800380a:	603b      	str	r3, [r7, #0]
  return(result);
 800380c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003812:	f06f 0305 	mvn.w	r3, #5
 8003816:	607b      	str	r3, [r7, #4]
 8003818:	e010      	b.n	800383c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800381a:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <osKernelStart+0x48>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d109      	bne.n	8003836 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003822:	f7ff ffbf 	bl	80037a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003826:	4b08      	ldr	r3, [pc, #32]	; (8003848 <osKernelStart+0x48>)
 8003828:	2202      	movs	r2, #2
 800382a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800382c:	f001 f87c 	bl	8004928 <vTaskStartScheduler>
      stat = osOK;
 8003830:	2300      	movs	r3, #0
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	e002      	b.n	800383c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295
 800383a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800383c:	687b      	ldr	r3, [r7, #4]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000098 	.word	0x20000098

0800384c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b08e      	sub	sp, #56	; 0x38
 8003850:	af04      	add	r7, sp, #16
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800385c:	f3ef 8305 	mrs	r3, IPSR
 8003860:	617b      	str	r3, [r7, #20]
  return(result);
 8003862:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003864:	2b00      	cmp	r3, #0
 8003866:	d17e      	bne.n	8003966 <osThreadNew+0x11a>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d07b      	beq.n	8003966 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003872:	2318      	movs	r3, #24
 8003874:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800387a:	f04f 33ff 	mov.w	r3, #4294967295
 800387e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d045      	beq.n	8003912 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <osThreadNew+0x48>
        name = attr->name;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <osThreadNew+0x6e>
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b38      	cmp	r3, #56	; 0x38
 80038ac:	d805      	bhi.n	80038ba <osThreadNew+0x6e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <osThreadNew+0x72>
        return (NULL);
 80038ba:	2300      	movs	r3, #0
 80038bc:	e054      	b.n	8003968 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00e      	beq.n	80038f4 <osThreadNew+0xa8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2bbb      	cmp	r3, #187	; 0xbb
 80038dc:	d90a      	bls.n	80038f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <osThreadNew+0xa8>
        mem = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	e010      	b.n	8003916 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10c      	bne.n	8003916 <osThreadNew+0xca>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d108      	bne.n	8003916 <osThreadNew+0xca>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <osThreadNew+0xca>
          mem = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	e001      	b.n	8003916 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d110      	bne.n	800393e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003924:	9202      	str	r2, [sp, #8]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	6a3a      	ldr	r2, [r7, #32]
 8003930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fe0c 	bl	8004550 <xTaskCreateStatic>
 8003938:	4603      	mov	r3, r0
 800393a:	613b      	str	r3, [r7, #16]
 800393c:	e013      	b.n	8003966 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d110      	bne.n	8003966 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	b29a      	uxth	r2, r3
 8003948:	f107 0310 	add.w	r3, r7, #16
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	9300      	str	r3, [sp, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fe57 	bl	800460a <xTaskCreate>
 800395c:	4603      	mov	r3, r0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d001      	beq.n	8003966 <osThreadNew+0x11a>
            hTask = NULL;
 8003962:	2300      	movs	r3, #0
 8003964:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003966:	693b      	ldr	r3, [r7, #16]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3728      	adds	r7, #40	; 0x28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003978:	f3ef 8305 	mrs	r3, IPSR
 800397c:	60bb      	str	r3, [r7, #8]
  return(result);
 800397e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <osDelay+0x1c>
    stat = osErrorISR;
 8003984:	f06f 0305 	mvn.w	r3, #5
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	e007      	b.n	800399c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 ff92 	bl	80048c0 <vTaskDelay>
    }
  }

  return (stat);
 800399c:	68fb      	ldr	r3, [r7, #12]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80039b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4a06      	ldr	r2, [pc, #24]	; (80039d8 <vApplicationGetIdleTaskMemory+0x30>)
 80039be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	bf00      	nop
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	2000009c 	.word	0x2000009c
 80039d8:	20000158 	.word	0x20000158

080039dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4a07      	ldr	r2, [pc, #28]	; (8003a08 <vApplicationGetTimerTaskMemory+0x2c>)
 80039ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <vApplicationGetTimerTaskMemory+0x30>)
 80039f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039fa:	601a      	str	r2, [r3, #0]
}
 80039fc:	bf00      	nop
 80039fe:	3714      	adds	r7, #20
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	20000358 	.word	0x20000358
 8003a0c:	20000414 	.word	0x20000414

08003a10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f103 0208 	add.w	r2, r3, #8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295
 8003a28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f103 0208 	add.w	r2, r3, #8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f103 0208 	add.w	r2, r3, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b085      	sub	sp, #20
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	601a      	str	r2, [r3, #0]
}
 8003aa6:	bf00      	nop
 8003aa8:	3714      	adds	r7, #20
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	b085      	sub	sp, #20
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d103      	bne.n	8003ad2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e00c      	b.n	8003aec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e002      	b.n	8003ae0 <vListInsert+0x2e>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d2f6      	bcs.n	8003ada <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	601a      	str	r2, [r3, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	6892      	ldr	r2, [r2, #8]
 8003b3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6852      	ldr	r2, [r2, #4]
 8003b44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d103      	bne.n	8003b58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	1e5a      	subs	r2, r3, #1
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ba2:	f002 f877 	bl	8005c94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	441a      	add	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	68f9      	ldr	r1, [r7, #12]
 8003bd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bd8:	fb01 f303 	mul.w	r3, r1, r3
 8003bdc:	441a      	add	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	22ff      	movs	r2, #255	; 0xff
 8003be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	22ff      	movs	r2, #255	; 0xff
 8003bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d114      	bne.n	8003c22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01a      	beq.n	8003c36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3310      	adds	r3, #16
 8003c04:	4618      	mov	r0, r3
 8003c06:	f001 f929 	bl	8004e5c <xTaskRemoveFromEventList>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d012      	beq.n	8003c36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <xQueueGenericReset+0xcc>)
 8003c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	e009      	b.n	8003c36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3310      	adds	r3, #16
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7ff fef2 	bl	8003a10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	3324      	adds	r3, #36	; 0x24
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff feed 	bl	8003a10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c36:	f002 f85d 	bl	8005cf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c3a:	2301      	movs	r3, #1
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08e      	sub	sp, #56	; 0x38
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c60:	f383 8811 	msr	BASEPRI, r3
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c6e:	bf00      	nop
 8003c70:	e7fe      	b.n	8003c70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <xQueueGenericCreateStatic+0x52>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <xQueueGenericCreateStatic+0x56>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <xQueueGenericCreateStatic+0x58>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	623b      	str	r3, [r7, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d102      	bne.n	8003cc6 <xQueueGenericCreateStatic+0x7e>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <xQueueGenericCreateStatic+0x82>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <xQueueGenericCreateStatic+0x84>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10a      	bne.n	8003ce6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	f383 8811 	msr	BASEPRI, r3
 8003cd8:	f3bf 8f6f 	isb	sy
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	61fb      	str	r3, [r7, #28]
}
 8003ce2:	bf00      	nop
 8003ce4:	e7fe      	b.n	8003ce4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ce6:	2350      	movs	r3, #80	; 0x50
 8003ce8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b50      	cmp	r3, #80	; 0x50
 8003cee:	d00a      	beq.n	8003d06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	61bb      	str	r3, [r7, #24]
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00d      	beq.n	8003d2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	4613      	mov	r3, r2
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68b9      	ldr	r1, [r7, #8]
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f805 	bl	8003d38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3730      	adds	r7, #48	; 0x30
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d103      	bne.n	8003d54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	e002      	b.n	8003d5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d66:	2101      	movs	r1, #1
 8003d68:	69b8      	ldr	r0, [r7, #24]
 8003d6a:	f7ff ff05 	bl	8003b78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	78fa      	ldrb	r2, [r7, #3]
 8003d72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08e      	sub	sp, #56	; 0x38
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xQueueGenericSend+0x32>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d103      	bne.n	8003dc0 <xQueueGenericSend+0x40>
 8003db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <xQueueGenericSend+0x44>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <xQueueGenericSend+0x46>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10a      	bne.n	8003de0 <xQueueGenericSend+0x60>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ddc:	bf00      	nop
 8003dde:	e7fe      	b.n	8003dde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d103      	bne.n	8003dee <xQueueGenericSend+0x6e>
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d101      	bne.n	8003df2 <xQueueGenericSend+0x72>
 8003dee:	2301      	movs	r3, #1
 8003df0:	e000      	b.n	8003df4 <xQueueGenericSend+0x74>
 8003df2:	2300      	movs	r3, #0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10a      	bne.n	8003e0e <xQueueGenericSend+0x8e>
	__asm volatile
 8003df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfc:	f383 8811 	msr	BASEPRI, r3
 8003e00:	f3bf 8f6f 	isb	sy
 8003e04:	f3bf 8f4f 	dsb	sy
 8003e08:	623b      	str	r3, [r7, #32]
}
 8003e0a:	bf00      	nop
 8003e0c:	e7fe      	b.n	8003e0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e0e:	f001 f9e7 	bl	80051e0 <xTaskGetSchedulerState>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d102      	bne.n	8003e1e <xQueueGenericSend+0x9e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <xQueueGenericSend+0xa2>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <xQueueGenericSend+0xa4>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10a      	bne.n	8003e3e <xQueueGenericSend+0xbe>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61fb      	str	r3, [r7, #28]
}
 8003e3a:	bf00      	nop
 8003e3c:	e7fe      	b.n	8003e3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e3e:	f001 ff29 	bl	8005c94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d302      	bcc.n	8003e54 <xQueueGenericSend+0xd4>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d129      	bne.n	8003ea8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	68b9      	ldr	r1, [r7, #8]
 8003e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e5a:	f000 fa0b 	bl	8004274 <prvCopyDataToQueue>
 8003e5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d010      	beq.n	8003e8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	3324      	adds	r3, #36	; 0x24
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fff5 	bl	8004e5c <xTaskRemoveFromEventList>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e78:	4b3f      	ldr	r3, [pc, #252]	; (8003f78 <xQueueGenericSend+0x1f8>)
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	e00a      	b.n	8003ea0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e90:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <xQueueGenericSend+0x1f8>)
 8003e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e96:	601a      	str	r2, [r3, #0]
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ea0:	f001 ff28 	bl	8005cf4 <vPortExitCritical>
				return pdPASS;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e063      	b.n	8003f70 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eae:	f001 ff21 	bl	8005cf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e05c      	b.n	8003f70 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ebc:	f107 0314 	add.w	r3, r7, #20
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 f82f 	bl	8004f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eca:	f001 ff13 	bl	8005cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ece:	f000 fd9b 	bl	8004a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ed2:	f001 fedf 	bl	8005c94 <vPortEnterCritical>
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003edc:	b25b      	sxtb	r3, r3
 8003ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee2:	d103      	bne.n	8003eec <xQueueGenericSend+0x16c>
 8003ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ef2:	b25b      	sxtb	r3, r3
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d103      	bne.n	8003f02 <xQueueGenericSend+0x182>
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f02:	f001 fef7 	bl	8005cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f06:	1d3a      	adds	r2, r7, #4
 8003f08:	f107 0314 	add.w	r3, r7, #20
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 f81e 	bl	8004f50 <xTaskCheckForTimeOut>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d124      	bne.n	8003f64 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f1c:	f000 faa2 	bl	8004464 <prvIsQueueFull>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d018      	beq.n	8003f58 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	3310      	adds	r3, #16
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	4611      	mov	r1, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 ff44 	bl	8004dbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f36:	f000 fa2d 	bl	8004394 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f3a:	f000 fd73 	bl	8004a24 <xTaskResumeAll>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f47f af7c 	bne.w	8003e3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <xQueueGenericSend+0x1f8>)
 8003f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	e772      	b.n	8003e3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f5a:	f000 fa1b 	bl	8004394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f5e:	f000 fd61 	bl	8004a24 <xTaskResumeAll>
 8003f62:	e76c      	b.n	8003e3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f66:	f000 fa15 	bl	8004394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f6a:	f000 fd5b 	bl	8004a24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3738      	adds	r7, #56	; 0x38
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	e000ed04 	.word	0xe000ed04

08003f7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b090      	sub	sp, #64	; 0x40
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10a      	bne.n	8003faa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003fa6:	bf00      	nop
 8003fa8:	e7fe      	b.n	8003fa8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <xQueueGenericSendFromISR+0x3c>
 8003fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <xQueueGenericSendFromISR+0x40>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <xQueueGenericSendFromISR+0x42>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10a      	bne.n	8003fd8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc6:	f383 8811 	msr	BASEPRI, r3
 8003fca:	f3bf 8f6f 	isb	sy
 8003fce:	f3bf 8f4f 	dsb	sy
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fd4:	bf00      	nop
 8003fd6:	e7fe      	b.n	8003fd6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d103      	bne.n	8003fe6 <xQueueGenericSendFromISR+0x6a>
 8003fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <xQueueGenericSendFromISR+0x6e>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e000      	b.n	8003fec <xQueueGenericSendFromISR+0x70>
 8003fea:	2300      	movs	r3, #0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	623b      	str	r3, [r7, #32]
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004006:	f001 ff27 	bl	8005e58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800400a:	f3ef 8211 	mrs	r2, BASEPRI
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	61fa      	str	r2, [r7, #28]
 8004020:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004022:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004024:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402e:	429a      	cmp	r2, r3
 8004030:	d302      	bcc.n	8004038 <xQueueGenericSendFromISR+0xbc>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d12f      	bne.n	8004098 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800403a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800403e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004046:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800404e:	f000 f911 	bl	8004274 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004052:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800405a:	d112      	bne.n	8004082 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	d016      	beq.n	8004092 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	3324      	adds	r3, #36	; 0x24
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fef7 	bl	8004e5c <xTaskRemoveFromEventList>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00e      	beq.n	8004092 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	e007      	b.n	8004092 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004082:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004086:	3301      	adds	r3, #1
 8004088:	b2db      	uxtb	r3, r3
 800408a:	b25a      	sxtb	r2, r3
 800408c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800408e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004092:	2301      	movs	r3, #1
 8004094:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004096:	e001      	b.n	800409c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004098:	2300      	movs	r3, #0
 800409a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3740      	adds	r7, #64	; 0x40
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b08c      	sub	sp, #48	; 0x30
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040c0:	2300      	movs	r3, #0
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <xQueueReceive+0x30>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	623b      	str	r3, [r7, #32]
}
 80040e0:	bf00      	nop
 80040e2:	e7fe      	b.n	80040e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <xQueueReceive+0x3e>
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <xQueueReceive+0x42>
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <xQueueReceive+0x44>
 80040f6:	2300      	movs	r3, #0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10a      	bne.n	8004112 <xQueueReceive+0x5e>
	__asm volatile
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	61fb      	str	r3, [r7, #28]
}
 800410e:	bf00      	nop
 8004110:	e7fe      	b.n	8004110 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004112:	f001 f865 	bl	80051e0 <xTaskGetSchedulerState>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <xQueueReceive+0x6e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <xQueueReceive+0x72>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <xQueueReceive+0x74>
 8004126:	2300      	movs	r3, #0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <xQueueReceive+0x8e>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	61bb      	str	r3, [r7, #24]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004142:	f001 fda7 	bl	8005c94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01f      	beq.n	8004192 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004156:	f000 f8f7 	bl	8004348 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	1e5a      	subs	r2, r3, #1
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00f      	beq.n	800418a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	3310      	adds	r3, #16
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fe74 	bl	8004e5c <xTaskRemoveFromEventList>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800417a:	4b3d      	ldr	r3, [pc, #244]	; (8004270 <xQueueReceive+0x1bc>)
 800417c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	f3bf 8f4f 	dsb	sy
 8004186:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800418a:	f001 fdb3 	bl	8005cf4 <vPortExitCritical>
				return pdPASS;
 800418e:	2301      	movs	r3, #1
 8004190:	e069      	b.n	8004266 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004198:	f001 fdac 	bl	8005cf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800419c:	2300      	movs	r3, #0
 800419e:	e062      	b.n	8004266 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041a6:	f107 0310 	add.w	r3, r7, #16
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 feba 	bl	8004f24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041b0:	2301      	movs	r3, #1
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041b4:	f001 fd9e 	bl	8005cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041b8:	f000 fc26 	bl	8004a08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041bc:	f001 fd6a 	bl	8005c94 <vPortEnterCritical>
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c6:	b25b      	sxtb	r3, r3
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d103      	bne.n	80041d6 <xQueueReceive+0x122>
 80041ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041dc:	b25b      	sxtb	r3, r3
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e2:	d103      	bne.n	80041ec <xQueueReceive+0x138>
 80041e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041ec:	f001 fd82 	bl	8005cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041f0:	1d3a      	adds	r2, r7, #4
 80041f2:	f107 0310 	add.w	r3, r7, #16
 80041f6:	4611      	mov	r1, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fea9 	bl	8004f50 <xTaskCheckForTimeOut>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d123      	bne.n	800424c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004206:	f000 f917 	bl	8004438 <prvIsQueueEmpty>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d017      	beq.n	8004240 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	3324      	adds	r3, #36	; 0x24
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fdcf 	bl	8004dbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800421e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004220:	f000 f8b8 	bl	8004394 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004224:	f000 fbfe 	bl	8004a24 <xTaskResumeAll>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d189      	bne.n	8004142 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <xQueueReceive+0x1bc>)
 8004230:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	e780      	b.n	8004142 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004242:	f000 f8a7 	bl	8004394 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004246:	f000 fbed 	bl	8004a24 <xTaskResumeAll>
 800424a:	e77a      	b.n	8004142 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800424c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800424e:	f000 f8a1 	bl	8004394 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004252:	f000 fbe7 	bl	8004a24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004256:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004258:	f000 f8ee 	bl	8004438 <prvIsQueueEmpty>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	f43f af6f 	beq.w	8004142 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004264:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004266:	4618      	mov	r0, r3
 8004268:	3730      	adds	r7, #48	; 0x30
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10d      	bne.n	80042ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d14d      	bne.n	8004336 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 ffbc 	bl	800521c <xTaskPriorityDisinherit>
 80042a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	e043      	b.n	8004336 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d119      	bne.n	80042e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6858      	ldr	r0, [r3, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	461a      	mov	r2, r3
 80042be:	68b9      	ldr	r1, [r7, #8]
 80042c0:	f002 f81a 	bl	80062f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042cc:	441a      	add	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d32b      	bcc.n	8004336 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	e026      	b.n	8004336 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	68d8      	ldr	r0, [r3, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	461a      	mov	r2, r3
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	f002 f800 	bl	80062f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	425b      	negs	r3, r3
 8004302:	441a      	add	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d207      	bcs.n	8004324 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	425b      	negs	r3, r3
 800431e:	441a      	add	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d105      	bne.n	8004336 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d002      	beq.n	8004336 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3b01      	subs	r3, #1
 8004334:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800433e:	697b      	ldr	r3, [r7, #20]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d018      	beq.n	800438c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	441a      	add	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	429a      	cmp	r2, r3
 8004372:	d303      	bcc.n	800437c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68d9      	ldr	r1, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	461a      	mov	r2, r3
 8004386:	6838      	ldr	r0, [r7, #0]
 8004388:	f001 ffb6 	bl	80062f8 <memcpy>
	}
}
 800438c:	bf00      	nop
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800439c:	f001 fc7a 	bl	8005c94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043a8:	e011      	b.n	80043ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d012      	beq.n	80043d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	3324      	adds	r3, #36	; 0x24
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fd50 	bl	8004e5c <xTaskRemoveFromEventList>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043c2:	f000 fe27 	bl	8005014 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	dce9      	bgt.n	80043aa <prvUnlockQueue+0x16>
 80043d6:	e000      	b.n	80043da <prvUnlockQueue+0x46>
					break;
 80043d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	22ff      	movs	r2, #255	; 0xff
 80043de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80043e2:	f001 fc87 	bl	8005cf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043e6:	f001 fc55 	bl	8005c94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043f2:	e011      	b.n	8004418 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d012      	beq.n	8004422 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3310      	adds	r3, #16
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fd2b 	bl	8004e5c <xTaskRemoveFromEventList>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800440c:	f000 fe02 	bl	8005014 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004410:	7bbb      	ldrb	r3, [r7, #14]
 8004412:	3b01      	subs	r3, #1
 8004414:	b2db      	uxtb	r3, r3
 8004416:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004418:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800441c:	2b00      	cmp	r3, #0
 800441e:	dce9      	bgt.n	80043f4 <prvUnlockQueue+0x60>
 8004420:	e000      	b.n	8004424 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004422:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	22ff      	movs	r2, #255	; 0xff
 8004428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800442c:	f001 fc62 	bl	8005cf4 <vPortExitCritical>
}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004440:	f001 fc28 	bl	8005c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d102      	bne.n	8004452 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800444c:	2301      	movs	r3, #1
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	e001      	b.n	8004456 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004456:	f001 fc4d 	bl	8005cf4 <vPortExitCritical>

	return xReturn;
 800445a:	68fb      	ldr	r3, [r7, #12]
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800446c:	f001 fc12 	bl	8005c94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004478:	429a      	cmp	r2, r3
 800447a:	d102      	bne.n	8004482 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800447c:	2301      	movs	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	e001      	b.n	8004486 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004486:	f001 fc35 	bl	8005cf4 <vPortExitCritical>

	return xReturn;
 800448a:	68fb      	ldr	r3, [r7, #12]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e014      	b.n	80044ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044a4:	4a0f      	ldr	r2, [pc, #60]	; (80044e4 <vQueueAddToRegistry+0x50>)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044b0:	490c      	ldr	r1, [pc, #48]	; (80044e4 <vQueueAddToRegistry+0x50>)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <vQueueAddToRegistry+0x50>)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4413      	add	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80044c6:	e006      	b.n	80044d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3301      	adds	r3, #1
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b07      	cmp	r3, #7
 80044d2:	d9e7      	bls.n	80044a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20004f50 	.word	0x20004f50

080044e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044f8:	f001 fbcc 	bl	8005c94 <vPortEnterCritical>
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004502:	b25b      	sxtb	r3, r3
 8004504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004508:	d103      	bne.n	8004512 <vQueueWaitForMessageRestricted+0x2a>
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004518:	b25b      	sxtb	r3, r3
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d103      	bne.n	8004528 <vQueueWaitForMessageRestricted+0x40>
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004528:	f001 fbe4 	bl	8005cf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	3324      	adds	r3, #36	; 0x24
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	68b9      	ldr	r1, [r7, #8]
 800453c:	4618      	mov	r0, r3
 800453e:	f000 fc61 	bl	8004e04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004542:	6978      	ldr	r0, [r7, #20]
 8004544:	f7ff ff26 	bl	8004394 <prvUnlockQueue>
	}
 8004548:	bf00      	nop
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08e      	sub	sp, #56	; 0x38
 8004554:	af04      	add	r7, sp, #16
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800455e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004560:	2b00      	cmp	r3, #0
 8004562:	d10a      	bne.n	800457a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	623b      	str	r3, [r7, #32]
}
 8004576:	bf00      	nop
 8004578:	e7fe      	b.n	8004578 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800457a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <xTaskCreateStatic+0x46>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	61fb      	str	r3, [r7, #28]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004596:	23bc      	movs	r3, #188	; 0xbc
 8004598:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2bbc      	cmp	r3, #188	; 0xbc
 800459e:	d00a      	beq.n	80045b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	61bb      	str	r3, [r7, #24]
}
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01e      	beq.n	80045fc <xTaskCreateStatic+0xac>
 80045be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d01b      	beq.n	80045fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	2202      	movs	r2, #2
 80045d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045d6:	2300      	movs	r3, #0
 80045d8:	9303      	str	r3, [sp, #12]
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	9302      	str	r3, [sp, #8]
 80045de:	f107 0314 	add.w	r3, r7, #20
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f850 	bl	8004694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045f6:	f000 f8f3 	bl	80047e0 <prvAddNewTaskToReadyList>
 80045fa:	e001      	b.n	8004600 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004600:	697b      	ldr	r3, [r7, #20]
	}
 8004602:	4618      	mov	r0, r3
 8004604:	3728      	adds	r7, #40	; 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800460a:	b580      	push	{r7, lr}
 800460c:	b08c      	sub	sp, #48	; 0x30
 800460e:	af04      	add	r7, sp, #16
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	4613      	mov	r3, r2
 8004618:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4618      	mov	r0, r3
 8004620:	f001 fc5a 	bl	8005ed8 <pvPortMalloc>
 8004624:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00e      	beq.n	800464a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800462c:	20bc      	movs	r0, #188	; 0xbc
 800462e:	f001 fc53 	bl	8005ed8 <pvPortMalloc>
 8004632:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d003      	beq.n	8004642 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
 8004640:	e005      	b.n	800464e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f001 fd14 	bl	8006070 <vPortFree>
 8004648:	e001      	b.n	800464e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d017      	beq.n	8004684 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800465c:	88fa      	ldrh	r2, [r7, #6]
 800465e:	2300      	movs	r3, #0
 8004660:	9303      	str	r3, [sp, #12]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	9302      	str	r3, [sp, #8]
 8004666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f80e 	bl	8004694 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004678:	69f8      	ldr	r0, [r7, #28]
 800467a:	f000 f8b1 	bl	80047e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800467e:	2301      	movs	r3, #1
 8004680:	61bb      	str	r3, [r7, #24]
 8004682:	e002      	b.n	800468a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004684:	f04f 33ff 	mov.w	r3, #4294967295
 8004688:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800468a:	69bb      	ldr	r3, [r7, #24]
	}
 800468c:	4618      	mov	r0, r3
 800468e:	3720      	adds	r7, #32
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	461a      	mov	r2, r3
 80046ac:	21a5      	movs	r1, #165	; 0xa5
 80046ae:	f001 fe31 	bl	8006314 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80046bc:	3b01      	subs	r3, #1
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	f023 0307 	bic.w	r3, r3, #7
 80046ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	617b      	str	r3, [r7, #20]
}
 80046e8:	bf00      	nop
 80046ea:	e7fe      	b.n	80046ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01f      	beq.n	8004732 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	e012      	b.n	800471e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	7819      	ldrb	r1, [r3, #0]
 8004700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4413      	add	r3, r2
 8004706:	3334      	adds	r3, #52	; 0x34
 8004708:	460a      	mov	r2, r1
 800470a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d006      	beq.n	8004726 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	3301      	adds	r3, #1
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	2b0f      	cmp	r3, #15
 8004722:	d9e9      	bls.n	80046f8 <prvInitialiseNewTask+0x64>
 8004724:	e000      	b.n	8004728 <prvInitialiseNewTask+0x94>
			{
				break;
 8004726:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004730:	e003      	b.n	800473a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	2b37      	cmp	r3, #55	; 0x37
 800473e:	d901      	bls.n	8004744 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004740:	2337      	movs	r3, #55	; 0x37
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004748:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800474e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	2200      	movs	r2, #0
 8004754:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	3304      	adds	r3, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff f978 	bl	8003a50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004762:	3318      	adds	r3, #24
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff f973 	bl	8003a50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800476e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004778:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800477e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	2200      	movs	r2, #0
 8004784:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	2200      	movs	r2, #0
 800478c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004792:	3354      	adds	r3, #84	; 0x54
 8004794:	2260      	movs	r2, #96	; 0x60
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f001 fdbb 	bl	8006314 <memset>
 800479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a0:	4a0c      	ldr	r2, [pc, #48]	; (80047d4 <prvInitialiseNewTask+0x140>)
 80047a2:	659a      	str	r2, [r3, #88]	; 0x58
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <prvInitialiseNewTask+0x144>)
 80047a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80047aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ac:	4a0b      	ldr	r2, [pc, #44]	; (80047dc <prvInitialiseNewTask+0x148>)
 80047ae:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	68f9      	ldr	r1, [r7, #12]
 80047b4:	69b8      	ldr	r0, [r7, #24]
 80047b6:	f001 f941 	bl	8005a3c <pxPortInitialiseStack>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047cc:	bf00      	nop
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	08006548 	.word	0x08006548
 80047d8:	08006568 	.word	0x08006568
 80047dc:	08006528 	.word	0x08006528

080047e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047e8:	f001 fa54 	bl	8005c94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047ec:	4b2d      	ldr	r3, [pc, #180]	; (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	4a2c      	ldr	r2, [pc, #176]	; (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 80047f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047f6:	4b2c      	ldr	r3, [pc, #176]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047fe:	4a2a      	ldr	r2, [pc, #168]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004804:	4b27      	ldr	r3, [pc, #156]	; (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d110      	bne.n	800482e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800480c:	f000 fc26 	bl	800505c <prvInitialiseTaskLists>
 8004810:	e00d      	b.n	800482e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004812:	4b26      	ldr	r3, [pc, #152]	; (80048ac <prvAddNewTaskToReadyList+0xcc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800481a:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	429a      	cmp	r2, r3
 8004826:	d802      	bhi.n	800482e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004828:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800482e:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <prvAddNewTaskToReadyList+0xd0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a1e      	ldr	r2, [pc, #120]	; (80048b0 <prvAddNewTaskToReadyList+0xd0>)
 8004836:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004838:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <prvAddNewTaskToReadyList+0xd0>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	4b1b      	ldr	r3, [pc, #108]	; (80048b4 <prvAddNewTaskToReadyList+0xd4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d903      	bls.n	8004854 <prvAddNewTaskToReadyList+0x74>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	4a18      	ldr	r2, [pc, #96]	; (80048b4 <prvAddNewTaskToReadyList+0xd4>)
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <prvAddNewTaskToReadyList+0xd8>)
 8004862:	441a      	add	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f7ff f8fd 	bl	8003a6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004870:	f001 fa40 	bl	8005cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <prvAddNewTaskToReadyList+0xcc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800487c:	4b0a      	ldr	r3, [pc, #40]	; (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	429a      	cmp	r2, r3
 8004888:	d207      	bcs.n	800489a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <prvAddNewTaskToReadyList+0xdc>)
 800488c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000ce8 	.word	0x20000ce8
 80048a8:	20000814 	.word	0x20000814
 80048ac:	20000cf4 	.word	0x20000cf4
 80048b0:	20000d04 	.word	0x20000d04
 80048b4:	20000cf0 	.word	0x20000cf0
 80048b8:	20000818 	.word	0x20000818
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d017      	beq.n	8004902 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048d2:	4b13      	ldr	r3, [pc, #76]	; (8004920 <vTaskDelay+0x60>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00a      	beq.n	80048f0 <vTaskDelay+0x30>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	60bb      	str	r3, [r7, #8]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048f0:	f000 f88a 	bl	8004a08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048f4:	2100      	movs	r1, #0
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fcfe 	bl	80052f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048fc:	f000 f892 	bl	8004a24 <xTaskResumeAll>
 8004900:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <vTaskDelay+0x64>)
 800490a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800490e:	601a      	str	r2, [r3, #0]
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004918:	bf00      	nop
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000d10 	.word	0x20000d10
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800492e:	2300      	movs	r3, #0
 8004930:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004936:	463a      	mov	r2, r7
 8004938:	1d39      	adds	r1, r7, #4
 800493a:	f107 0308 	add.w	r3, r7, #8
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff f832 	bl	80039a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	9202      	str	r2, [sp, #8]
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	2300      	movs	r3, #0
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	2300      	movs	r3, #0
 8004954:	460a      	mov	r2, r1
 8004956:	4924      	ldr	r1, [pc, #144]	; (80049e8 <vTaskStartScheduler+0xc0>)
 8004958:	4824      	ldr	r0, [pc, #144]	; (80049ec <vTaskStartScheduler+0xc4>)
 800495a:	f7ff fdf9 	bl	8004550 <xTaskCreateStatic>
 800495e:	4603      	mov	r3, r0
 8004960:	4a23      	ldr	r2, [pc, #140]	; (80049f0 <vTaskStartScheduler+0xc8>)
 8004962:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004964:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <vTaskStartScheduler+0xc8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800496c:	2301      	movs	r3, #1
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	e001      	b.n	8004976 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d102      	bne.n	8004982 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800497c:	f000 fd10 	bl	80053a0 <xTimerCreateTimerTask>
 8004980:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d11b      	bne.n	80049c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	613b      	str	r3, [r7, #16]
}
 800499a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800499c:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <vTaskStartScheduler+0xcc>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3354      	adds	r3, #84	; 0x54
 80049a2:	4a15      	ldr	r2, [pc, #84]	; (80049f8 <vTaskStartScheduler+0xd0>)
 80049a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049a6:	4b15      	ldr	r3, [pc, #84]	; (80049fc <vTaskStartScheduler+0xd4>)
 80049a8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049ae:	4b14      	ldr	r3, [pc, #80]	; (8004a00 <vTaskStartScheduler+0xd8>)
 80049b0:	2201      	movs	r2, #1
 80049b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049b4:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <vTaskStartScheduler+0xdc>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049ba:	f001 f8c9 	bl	8005b50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049be:	e00e      	b.n	80049de <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c6:	d10a      	bne.n	80049de <vTaskStartScheduler+0xb6>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	60fb      	str	r3, [r7, #12]
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <vTaskStartScheduler+0xb4>
}
 80049de:	bf00      	nop
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	080064d4 	.word	0x080064d4
 80049ec:	0800502d 	.word	0x0800502d
 80049f0:	20000d0c 	.word	0x20000d0c
 80049f4:	20000814 	.word	0x20000814
 80049f8:	20000010 	.word	0x20000010
 80049fc:	20000d08 	.word	0x20000d08
 8004a00:	20000cf4 	.word	0x20000cf4
 8004a04:	20000cec 	.word	0x20000cec

08004a08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a0c:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <vTaskSuspendAll+0x18>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3301      	adds	r3, #1
 8004a12:	4a03      	ldr	r2, [pc, #12]	; (8004a20 <vTaskSuspendAll+0x18>)
 8004a14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a16:	bf00      	nop
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	20000d10 	.word	0x20000d10

08004a24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a32:	4b42      	ldr	r3, [pc, #264]	; (8004b3c <xTaskResumeAll+0x118>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10a      	bne.n	8004a50 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	603b      	str	r3, [r7, #0]
}
 8004a4c:	bf00      	nop
 8004a4e:	e7fe      	b.n	8004a4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a50:	f001 f920 	bl	8005c94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a54:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <xTaskResumeAll+0x118>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	4a38      	ldr	r2, [pc, #224]	; (8004b3c <xTaskResumeAll+0x118>)
 8004a5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a5e:	4b37      	ldr	r3, [pc, #220]	; (8004b3c <xTaskResumeAll+0x118>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d162      	bne.n	8004b2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a66:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <xTaskResumeAll+0x11c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d05e      	beq.n	8004b2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a6e:	e02f      	b.n	8004ad0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a70:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <xTaskResumeAll+0x120>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3318      	adds	r3, #24
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff f851 	bl	8003b24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3304      	adds	r3, #4
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7ff f84c 	bl	8003b24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	4b2d      	ldr	r3, [pc, #180]	; (8004b48 <xTaskResumeAll+0x124>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d903      	bls.n	8004aa0 <xTaskResumeAll+0x7c>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	4a2a      	ldr	r2, [pc, #168]	; (8004b48 <xTaskResumeAll+0x124>)
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <xTaskResumeAll+0x128>)
 8004aae:	441a      	add	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f7fe ffd7 	bl	8003a6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	4b23      	ldr	r3, [pc, #140]	; (8004b50 <xTaskResumeAll+0x12c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d302      	bcc.n	8004ad0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004aca:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <xTaskResumeAll+0x130>)
 8004acc:	2201      	movs	r2, #1
 8004ace:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ad0:	4b1c      	ldr	r3, [pc, #112]	; (8004b44 <xTaskResumeAll+0x120>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1cb      	bne.n	8004a70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ade:	f000 fb5f 	bl	80051a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ae2:	4b1d      	ldr	r3, [pc, #116]	; (8004b58 <xTaskResumeAll+0x134>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d010      	beq.n	8004b10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004aee:	f000 f847 	bl	8004b80 <xTaskIncrementTick>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004af8:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <xTaskResumeAll+0x130>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f1      	bne.n	8004aee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <xTaskResumeAll+0x134>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <xTaskResumeAll+0x130>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d009      	beq.n	8004b2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	; (8004b5c <xTaskResumeAll+0x138>)
 8004b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b2c:	f001 f8e2 	bl	8005cf4 <vPortExitCritical>

	return xAlreadyYielded;
 8004b30:	68bb      	ldr	r3, [r7, #8]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000d10 	.word	0x20000d10
 8004b40:	20000ce8 	.word	0x20000ce8
 8004b44:	20000ca8 	.word	0x20000ca8
 8004b48:	20000cf0 	.word	0x20000cf0
 8004b4c:	20000818 	.word	0x20000818
 8004b50:	20000814 	.word	0x20000814
 8004b54:	20000cfc 	.word	0x20000cfc
 8004b58:	20000cf8 	.word	0x20000cf8
 8004b5c:	e000ed04 	.word	0xe000ed04

08004b60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <xTaskGetTickCount+0x1c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b6c:	687b      	ldr	r3, [r7, #4]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000cec 	.word	0x20000cec

08004b80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b8a:	4b4f      	ldr	r3, [pc, #316]	; (8004cc8 <xTaskIncrementTick+0x148>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f040 808f 	bne.w	8004cb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b94:	4b4d      	ldr	r3, [pc, #308]	; (8004ccc <xTaskIncrementTick+0x14c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b9c:	4a4b      	ldr	r2, [pc, #300]	; (8004ccc <xTaskIncrementTick+0x14c>)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d120      	bne.n	8004bea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ba8:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <xTaskIncrementTick+0x150>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00a      	beq.n	8004bc8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	f383 8811 	msr	BASEPRI, r3
 8004bba:	f3bf 8f6f 	isb	sy
 8004bbe:	f3bf 8f4f 	dsb	sy
 8004bc2:	603b      	str	r3, [r7, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	e7fe      	b.n	8004bc6 <xTaskIncrementTick+0x46>
 8004bc8:	4b41      	ldr	r3, [pc, #260]	; (8004cd0 <xTaskIncrementTick+0x150>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	4b41      	ldr	r3, [pc, #260]	; (8004cd4 <xTaskIncrementTick+0x154>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a3f      	ldr	r2, [pc, #252]	; (8004cd0 <xTaskIncrementTick+0x150>)
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	4a3f      	ldr	r2, [pc, #252]	; (8004cd4 <xTaskIncrementTick+0x154>)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <xTaskIncrementTick+0x158>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3301      	adds	r3, #1
 8004be2:	4a3d      	ldr	r2, [pc, #244]	; (8004cd8 <xTaskIncrementTick+0x158>)
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	f000 fadb 	bl	80051a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bea:	4b3c      	ldr	r3, [pc, #240]	; (8004cdc <xTaskIncrementTick+0x15c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d349      	bcc.n	8004c88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bf4:	4b36      	ldr	r3, [pc, #216]	; (8004cd0 <xTaskIncrementTick+0x150>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d104      	bne.n	8004c08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bfe:	4b37      	ldr	r3, [pc, #220]	; (8004cdc <xTaskIncrementTick+0x15c>)
 8004c00:	f04f 32ff 	mov.w	r2, #4294967295
 8004c04:	601a      	str	r2, [r3, #0]
					break;
 8004c06:	e03f      	b.n	8004c88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c08:	4b31      	ldr	r3, [pc, #196]	; (8004cd0 <xTaskIncrementTick+0x150>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d203      	bcs.n	8004c28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c20:	4a2e      	ldr	r2, [pc, #184]	; (8004cdc <xTaskIncrementTick+0x15c>)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c26:	e02f      	b.n	8004c88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fe ff79 	bl	8003b24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3318      	adds	r3, #24
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe ff70 	bl	8003b24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c48:	4b25      	ldr	r3, [pc, #148]	; (8004ce0 <xTaskIncrementTick+0x160>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d903      	bls.n	8004c58 <xTaskIncrementTick+0xd8>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <xTaskIncrementTick+0x160>)
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <xTaskIncrementTick+0x164>)
 8004c66:	441a      	add	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f7fe fefb 	bl	8003a6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c78:	4b1b      	ldr	r3, [pc, #108]	; (8004ce8 <xTaskIncrementTick+0x168>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d3b8      	bcc.n	8004bf4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c82:	2301      	movs	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c86:	e7b5      	b.n	8004bf4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c88:	4b17      	ldr	r3, [pc, #92]	; (8004ce8 <xTaskIncrementTick+0x168>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8e:	4915      	ldr	r1, [pc, #84]	; (8004ce4 <xTaskIncrementTick+0x164>)
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d901      	bls.n	8004ca4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ca4:	4b11      	ldr	r3, [pc, #68]	; (8004cec <xTaskIncrementTick+0x16c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e004      	b.n	8004cbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <xTaskIncrementTick+0x170>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	4a0d      	ldr	r2, [pc, #52]	; (8004cf0 <xTaskIncrementTick+0x170>)
 8004cba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cbc:	697b      	ldr	r3, [r7, #20]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000d10 	.word	0x20000d10
 8004ccc:	20000cec 	.word	0x20000cec
 8004cd0:	20000ca0 	.word	0x20000ca0
 8004cd4:	20000ca4 	.word	0x20000ca4
 8004cd8:	20000d00 	.word	0x20000d00
 8004cdc:	20000d08 	.word	0x20000d08
 8004ce0:	20000cf0 	.word	0x20000cf0
 8004ce4:	20000818 	.word	0x20000818
 8004ce8:	20000814 	.word	0x20000814
 8004cec:	20000cfc 	.word	0x20000cfc
 8004cf0:	20000cf8 	.word	0x20000cf8

08004cf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cfa:	4b2a      	ldr	r3, [pc, #168]	; (8004da4 <vTaskSwitchContext+0xb0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d003      	beq.n	8004d0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d02:	4b29      	ldr	r3, [pc, #164]	; (8004da8 <vTaskSwitchContext+0xb4>)
 8004d04:	2201      	movs	r2, #1
 8004d06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d08:	e046      	b.n	8004d98 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004d0a:	4b27      	ldr	r3, [pc, #156]	; (8004da8 <vTaskSwitchContext+0xb4>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d10:	4b26      	ldr	r3, [pc, #152]	; (8004dac <vTaskSwitchContext+0xb8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e010      	b.n	8004d3a <vTaskSwitchContext+0x46>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10a      	bne.n	8004d34 <vTaskSwitchContext+0x40>
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	607b      	str	r3, [r7, #4]
}
 8004d30:	bf00      	nop
 8004d32:	e7fe      	b.n	8004d32 <vTaskSwitchContext+0x3e>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	491d      	ldr	r1, [pc, #116]	; (8004db0 <vTaskSwitchContext+0xbc>)
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0e4      	beq.n	8004d18 <vTaskSwitchContext+0x24>
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4a15      	ldr	r2, [pc, #84]	; (8004db0 <vTaskSwitchContext+0xbc>)
 8004d5a:	4413      	add	r3, r2
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	3308      	adds	r3, #8
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d104      	bne.n	8004d7e <vTaskSwitchContext+0x8a>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	605a      	str	r2, [r3, #4]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4a0b      	ldr	r2, [pc, #44]	; (8004db4 <vTaskSwitchContext+0xc0>)
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	4a08      	ldr	r2, [pc, #32]	; (8004dac <vTaskSwitchContext+0xb8>)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d8e:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <vTaskSwitchContext+0xc0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3354      	adds	r3, #84	; 0x54
 8004d94:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <vTaskSwitchContext+0xc4>)
 8004d96:	6013      	str	r3, [r2, #0]
}
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	20000d10 	.word	0x20000d10
 8004da8:	20000cfc 	.word	0x20000cfc
 8004dac:	20000cf0 	.word	0x20000cf0
 8004db0:	20000818 	.word	0x20000818
 8004db4:	20000814 	.word	0x20000814
 8004db8:	20000010 	.word	0x20000010

08004dbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	60fb      	str	r3, [r7, #12]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004de2:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <vTaskPlaceOnEventList+0x44>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	3318      	adds	r3, #24
 8004de8:	4619      	mov	r1, r3
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fe fe61 	bl	8003ab2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004df0:	2101      	movs	r1, #1
 8004df2:	6838      	ldr	r0, [r7, #0]
 8004df4:	f000 fa80 	bl	80052f8 <prvAddCurrentTaskToDelayedList>
}
 8004df8:	bf00      	nop
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000814 	.word	0x20000814

08004e04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10a      	bne.n	8004e2c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	617b      	str	r3, [r7, #20]
}
 8004e28:	bf00      	nop
 8004e2a:	e7fe      	b.n	8004e2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3318      	adds	r3, #24
 8004e32:	4619      	mov	r1, r3
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7fe fe18 	bl	8003a6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295
 8004e44:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	68b8      	ldr	r0, [r7, #8]
 8004e4a:	f000 fa55 	bl	80052f8 <prvAddCurrentTaskToDelayedList>
	}
 8004e4e:	bf00      	nop
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000814 	.word	0x20000814

08004e5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10a      	bne.n	8004e88 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	60fb      	str	r3, [r7, #12]
}
 8004e84:	bf00      	nop
 8004e86:	e7fe      	b.n	8004e86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	3318      	adds	r3, #24
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe fe49 	bl	8003b24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e92:	4b1e      	ldr	r3, [pc, #120]	; (8004f0c <xTaskRemoveFromEventList+0xb0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d11d      	bne.n	8004ed6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fe fe40 	bl	8003b24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <xTaskRemoveFromEventList+0xb4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d903      	bls.n	8004eb8 <xTaskRemoveFromEventList+0x5c>
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	4a16      	ldr	r2, [pc, #88]	; (8004f10 <xTaskRemoveFromEventList+0xb4>)
 8004eb6:	6013      	str	r3, [r2, #0]
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4a13      	ldr	r2, [pc, #76]	; (8004f14 <xTaskRemoveFromEventList+0xb8>)
 8004ec6:	441a      	add	r2, r3
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f7fe fdcb 	bl	8003a6a <vListInsertEnd>
 8004ed4:	e005      	b.n	8004ee2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	3318      	adds	r3, #24
 8004eda:	4619      	mov	r1, r3
 8004edc:	480e      	ldr	r0, [pc, #56]	; (8004f18 <xTaskRemoveFromEventList+0xbc>)
 8004ede:	f7fe fdc4 	bl	8003a6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <xTaskRemoveFromEventList+0xc0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d905      	bls.n	8004efc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ef4:	4b0a      	ldr	r3, [pc, #40]	; (8004f20 <xTaskRemoveFromEventList+0xc4>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e001      	b.n	8004f00 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004efc:	2300      	movs	r3, #0
 8004efe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f00:	697b      	ldr	r3, [r7, #20]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000d10 	.word	0x20000d10
 8004f10:	20000cf0 	.word	0x20000cf0
 8004f14:	20000818 	.word	0x20000818
 8004f18:	20000ca8 	.word	0x20000ca8
 8004f1c:	20000814 	.word	0x20000814
 8004f20:	20000cfc 	.word	0x20000cfc

08004f24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <vTaskInternalSetTimeOutState+0x24>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f34:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <vTaskInternalSetTimeOutState+0x28>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	605a      	str	r2, [r3, #4]
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	20000d00 	.word	0x20000d00
 8004f4c:	20000cec 	.word	0x20000cec

08004f50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b088      	sub	sp, #32
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	613b      	str	r3, [r7, #16]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	60fb      	str	r3, [r7, #12]
}
 8004f8e:	bf00      	nop
 8004f90:	e7fe      	b.n	8004f90 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f92:	f000 fe7f 	bl	8005c94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f96:	4b1d      	ldr	r3, [pc, #116]	; (800500c <xTaskCheckForTimeOut+0xbc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fae:	d102      	bne.n	8004fb6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e023      	b.n	8004ffe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b15      	ldr	r3, [pc, #84]	; (8005010 <xTaskCheckForTimeOut+0xc0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d007      	beq.n	8004fd2 <xTaskCheckForTimeOut+0x82>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d302      	bcc.n	8004fd2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	61fb      	str	r3, [r7, #28]
 8004fd0:	e015      	b.n	8004ffe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d20b      	bcs.n	8004ff4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	1ad2      	subs	r2, r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f7ff ff9b 	bl	8004f24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	e004      	b.n	8004ffe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ffe:	f000 fe79 	bl	8005cf4 <vPortExitCritical>

	return xReturn;
 8005002:	69fb      	ldr	r3, [r7, #28]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000cec 	.word	0x20000cec
 8005010:	20000d00 	.word	0x20000d00

08005014 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005018:	4b03      	ldr	r3, [pc, #12]	; (8005028 <vTaskMissedYield+0x14>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]
}
 800501e:	bf00      	nop
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	20000cfc 	.word	0x20000cfc

0800502c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005034:	f000 f852 	bl	80050dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005038:	4b06      	ldr	r3, [pc, #24]	; (8005054 <prvIdleTask+0x28>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d9f9      	bls.n	8005034 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <prvIdleTask+0x2c>)
 8005042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005050:	e7f0      	b.n	8005034 <prvIdleTask+0x8>
 8005052:	bf00      	nop
 8005054:	20000818 	.word	0x20000818
 8005058:	e000ed04 	.word	0xe000ed04

0800505c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	e00c      	b.n	8005082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4a12      	ldr	r2, [pc, #72]	; (80050bc <prvInitialiseTaskLists+0x60>)
 8005074:	4413      	add	r3, r2
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe fcca 	bl	8003a10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3301      	adds	r3, #1
 8005080:	607b      	str	r3, [r7, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b37      	cmp	r3, #55	; 0x37
 8005086:	d9ef      	bls.n	8005068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005088:	480d      	ldr	r0, [pc, #52]	; (80050c0 <prvInitialiseTaskLists+0x64>)
 800508a:	f7fe fcc1 	bl	8003a10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800508e:	480d      	ldr	r0, [pc, #52]	; (80050c4 <prvInitialiseTaskLists+0x68>)
 8005090:	f7fe fcbe 	bl	8003a10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005094:	480c      	ldr	r0, [pc, #48]	; (80050c8 <prvInitialiseTaskLists+0x6c>)
 8005096:	f7fe fcbb 	bl	8003a10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800509a:	480c      	ldr	r0, [pc, #48]	; (80050cc <prvInitialiseTaskLists+0x70>)
 800509c:	f7fe fcb8 	bl	8003a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050a0:	480b      	ldr	r0, [pc, #44]	; (80050d0 <prvInitialiseTaskLists+0x74>)
 80050a2:	f7fe fcb5 	bl	8003a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050a6:	4b0b      	ldr	r3, [pc, #44]	; (80050d4 <prvInitialiseTaskLists+0x78>)
 80050a8:	4a05      	ldr	r2, [pc, #20]	; (80050c0 <prvInitialiseTaskLists+0x64>)
 80050aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <prvInitialiseTaskLists+0x7c>)
 80050ae:	4a05      	ldr	r2, [pc, #20]	; (80050c4 <prvInitialiseTaskLists+0x68>)
 80050b0:	601a      	str	r2, [r3, #0]
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	20000818 	.word	0x20000818
 80050c0:	20000c78 	.word	0x20000c78
 80050c4:	20000c8c 	.word	0x20000c8c
 80050c8:	20000ca8 	.word	0x20000ca8
 80050cc:	20000cbc 	.word	0x20000cbc
 80050d0:	20000cd4 	.word	0x20000cd4
 80050d4:	20000ca0 	.word	0x20000ca0
 80050d8:	20000ca4 	.word	0x20000ca4

080050dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050e2:	e019      	b.n	8005118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050e4:	f000 fdd6 	bl	8005c94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050e8:	4b10      	ldr	r3, [pc, #64]	; (800512c <prvCheckTasksWaitingTermination+0x50>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fe fd15 	bl	8003b24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050fa:	4b0d      	ldr	r3, [pc, #52]	; (8005130 <prvCheckTasksWaitingTermination+0x54>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3b01      	subs	r3, #1
 8005100:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <prvCheckTasksWaitingTermination+0x54>)
 8005102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005104:	4b0b      	ldr	r3, [pc, #44]	; (8005134 <prvCheckTasksWaitingTermination+0x58>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3b01      	subs	r3, #1
 800510a:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <prvCheckTasksWaitingTermination+0x58>)
 800510c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800510e:	f000 fdf1 	bl	8005cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f810 	bl	8005138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005118:	4b06      	ldr	r3, [pc, #24]	; (8005134 <prvCheckTasksWaitingTermination+0x58>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e1      	bne.n	80050e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000cbc 	.word	0x20000cbc
 8005130:	20000ce8 	.word	0x20000ce8
 8005134:	20000cd0 	.word	0x20000cd0

08005138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3354      	adds	r3, #84	; 0x54
 8005144:	4618      	mov	r0, r3
 8005146:	f001 f8fb 	bl	8006340 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005150:	2b00      	cmp	r3, #0
 8005152:	d108      	bne.n	8005166 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	4618      	mov	r0, r3
 800515a:	f000 ff89 	bl	8006070 <vPortFree>
				vPortFree( pxTCB );
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 ff86 	bl	8006070 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005164:	e018      	b.n	8005198 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800516c:	2b01      	cmp	r3, #1
 800516e:	d103      	bne.n	8005178 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 ff7d 	bl	8006070 <vPortFree>
	}
 8005176:	e00f      	b.n	8005198 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800517e:	2b02      	cmp	r3, #2
 8005180:	d00a      	beq.n	8005198 <prvDeleteTCB+0x60>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	60fb      	str	r3, [r7, #12]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <prvDeleteTCB+0x5e>
	}
 8005198:	bf00      	nop
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051a6:	4b0c      	ldr	r3, [pc, #48]	; (80051d8 <prvResetNextTaskUnblockTime+0x38>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d104      	bne.n	80051ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051b0:	4b0a      	ldr	r3, [pc, #40]	; (80051dc <prvResetNextTaskUnblockTime+0x3c>)
 80051b2:	f04f 32ff 	mov.w	r2, #4294967295
 80051b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051b8:	e008      	b.n	80051cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ba:	4b07      	ldr	r3, [pc, #28]	; (80051d8 <prvResetNextTaskUnblockTime+0x38>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4a04      	ldr	r2, [pc, #16]	; (80051dc <prvResetNextTaskUnblockTime+0x3c>)
 80051ca:	6013      	str	r3, [r2, #0]
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	20000ca0 	.word	0x20000ca0
 80051dc:	20000d08 	.word	0x20000d08

080051e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <xTaskGetSchedulerState+0x34>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d102      	bne.n	80051f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051ee:	2301      	movs	r3, #1
 80051f0:	607b      	str	r3, [r7, #4]
 80051f2:	e008      	b.n	8005206 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f4:	4b08      	ldr	r3, [pc, #32]	; (8005218 <xTaskGetSchedulerState+0x38>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d102      	bne.n	8005202 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051fc:	2302      	movs	r3, #2
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	e001      	b.n	8005206 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005202:	2300      	movs	r3, #0
 8005204:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005206:	687b      	ldr	r3, [r7, #4]
	}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	20000cf4 	.word	0x20000cf4
 8005218:	20000d10 	.word	0x20000d10

0800521c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d056      	beq.n	80052e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005232:	4b2e      	ldr	r3, [pc, #184]	; (80052ec <xTaskPriorityDisinherit+0xd0>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	429a      	cmp	r2, r3
 800523a:	d00a      	beq.n	8005252 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60fb      	str	r3, [r7, #12]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10a      	bne.n	8005270 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800525a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525e:	f383 8811 	msr	BASEPRI, r3
 8005262:	f3bf 8f6f 	isb	sy
 8005266:	f3bf 8f4f 	dsb	sy
 800526a:	60bb      	str	r3, [r7, #8]
}
 800526c:	bf00      	nop
 800526e:	e7fe      	b.n	800526e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005274:	1e5a      	subs	r2, r3, #1
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005282:	429a      	cmp	r2, r3
 8005284:	d02c      	beq.n	80052e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528a:	2b00      	cmp	r3, #0
 800528c:	d128      	bne.n	80052e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	3304      	adds	r3, #4
 8005292:	4618      	mov	r0, r3
 8005294:	f7fe fc46 	bl	8003b24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b0:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <xTaskPriorityDisinherit+0xd4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d903      	bls.n	80052c0 <xTaskPriorityDisinherit+0xa4>
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	4a0c      	ldr	r2, [pc, #48]	; (80052f0 <xTaskPriorityDisinherit+0xd4>)
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <xTaskPriorityDisinherit+0xd8>)
 80052ce:	441a      	add	r2, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4619      	mov	r1, r3
 80052d6:	4610      	mov	r0, r2
 80052d8:	f7fe fbc7 	bl	8003a6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052e0:	697b      	ldr	r3, [r7, #20]
	}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000814 	.word	0x20000814
 80052f0:	20000cf0 	.word	0x20000cf0
 80052f4:	20000818 	.word	0x20000818

080052f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005302:	4b21      	ldr	r3, [pc, #132]	; (8005388 <prvAddCurrentTaskToDelayedList+0x90>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005308:	4b20      	ldr	r3, [pc, #128]	; (800538c <prvAddCurrentTaskToDelayedList+0x94>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3304      	adds	r3, #4
 800530e:	4618      	mov	r0, r3
 8005310:	f7fe fc08 	bl	8003b24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531a:	d10a      	bne.n	8005332 <prvAddCurrentTaskToDelayedList+0x3a>
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005322:	4b1a      	ldr	r3, [pc, #104]	; (800538c <prvAddCurrentTaskToDelayedList+0x94>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3304      	adds	r3, #4
 8005328:	4619      	mov	r1, r3
 800532a:	4819      	ldr	r0, [pc, #100]	; (8005390 <prvAddCurrentTaskToDelayedList+0x98>)
 800532c:	f7fe fb9d 	bl	8003a6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005330:	e026      	b.n	8005380 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4413      	add	r3, r2
 8005338:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800533a:	4b14      	ldr	r3, [pc, #80]	; (800538c <prvAddCurrentTaskToDelayedList+0x94>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	429a      	cmp	r2, r3
 8005348:	d209      	bcs.n	800535e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800534a:	4b12      	ldr	r3, [pc, #72]	; (8005394 <prvAddCurrentTaskToDelayedList+0x9c>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b0f      	ldr	r3, [pc, #60]	; (800538c <prvAddCurrentTaskToDelayedList+0x94>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f7fe fbab 	bl	8003ab2 <vListInsert>
}
 800535c:	e010      	b.n	8005380 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800535e:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <prvAddCurrentTaskToDelayedList+0x94>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f7fe fba1 	bl	8003ab2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	429a      	cmp	r2, r3
 8005378:	d202      	bcs.n	8005380 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800537a:	4a08      	ldr	r2, [pc, #32]	; (800539c <prvAddCurrentTaskToDelayedList+0xa4>)
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	6013      	str	r3, [r2, #0]
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	20000cec 	.word	0x20000cec
 800538c:	20000814 	.word	0x20000814
 8005390:	20000cd4 	.word	0x20000cd4
 8005394:	20000ca4 	.word	0x20000ca4
 8005398:	20000ca0 	.word	0x20000ca0
 800539c:	20000d08 	.word	0x20000d08

080053a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b08a      	sub	sp, #40	; 0x28
 80053a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053aa:	f000 fb07 	bl	80059bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053ae:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <xTimerCreateTimerTask+0x80>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d021      	beq.n	80053fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053b6:	2300      	movs	r3, #0
 80053b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053be:	1d3a      	adds	r2, r7, #4
 80053c0:	f107 0108 	add.w	r1, r7, #8
 80053c4:	f107 030c 	add.w	r3, r7, #12
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe fb07 	bl	80039dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	9202      	str	r2, [sp, #8]
 80053d6:	9301      	str	r3, [sp, #4]
 80053d8:	2302      	movs	r3, #2
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	2300      	movs	r3, #0
 80053de:	460a      	mov	r2, r1
 80053e0:	4910      	ldr	r1, [pc, #64]	; (8005424 <xTimerCreateTimerTask+0x84>)
 80053e2:	4811      	ldr	r0, [pc, #68]	; (8005428 <xTimerCreateTimerTask+0x88>)
 80053e4:	f7ff f8b4 	bl	8004550 <xTaskCreateStatic>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4a10      	ldr	r2, [pc, #64]	; (800542c <xTimerCreateTimerTask+0x8c>)
 80053ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053ee:	4b0f      	ldr	r3, [pc, #60]	; (800542c <xTimerCreateTimerTask+0x8c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053f6:	2301      	movs	r3, #1
 80053f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005404:	f383 8811 	msr	BASEPRI, r3
 8005408:	f3bf 8f6f 	isb	sy
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	613b      	str	r3, [r7, #16]
}
 8005412:	bf00      	nop
 8005414:	e7fe      	b.n	8005414 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005416:	697b      	ldr	r3, [r7, #20]
}
 8005418:	4618      	mov	r0, r3
 800541a:	3718      	adds	r7, #24
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	20000d44 	.word	0x20000d44
 8005424:	080064dc 	.word	0x080064dc
 8005428:	08005565 	.word	0x08005565
 800542c:	20000d48 	.word	0x20000d48

08005430 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b08a      	sub	sp, #40	; 0x28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800543e:	2300      	movs	r3, #0
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	623b      	str	r3, [r7, #32]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800545e:	4b1a      	ldr	r3, [pc, #104]	; (80054c8 <xTimerGenericCommand+0x98>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d02a      	beq.n	80054bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b05      	cmp	r3, #5
 8005476:	dc18      	bgt.n	80054aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005478:	f7ff feb2 	bl	80051e0 <xTaskGetSchedulerState>
 800547c:	4603      	mov	r3, r0
 800547e:	2b02      	cmp	r3, #2
 8005480:	d109      	bne.n	8005496 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005482:	4b11      	ldr	r3, [pc, #68]	; (80054c8 <xTimerGenericCommand+0x98>)
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	f107 0110 	add.w	r1, r7, #16
 800548a:	2300      	movs	r3, #0
 800548c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548e:	f7fe fc77 	bl	8003d80 <xQueueGenericSend>
 8005492:	6278      	str	r0, [r7, #36]	; 0x24
 8005494:	e012      	b.n	80054bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005496:	4b0c      	ldr	r3, [pc, #48]	; (80054c8 <xTimerGenericCommand+0x98>)
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	f107 0110 	add.w	r1, r7, #16
 800549e:	2300      	movs	r3, #0
 80054a0:	2200      	movs	r2, #0
 80054a2:	f7fe fc6d 	bl	8003d80 <xQueueGenericSend>
 80054a6:	6278      	str	r0, [r7, #36]	; 0x24
 80054a8:	e008      	b.n	80054bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054aa:	4b07      	ldr	r3, [pc, #28]	; (80054c8 <xTimerGenericCommand+0x98>)
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	f107 0110 	add.w	r1, r7, #16
 80054b2:	2300      	movs	r3, #0
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	f7fe fd61 	bl	8003f7c <xQueueGenericSendFromISR>
 80054ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3728      	adds	r7, #40	; 0x28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000d44 	.word	0x20000d44

080054cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af02      	add	r7, sp, #8
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054d6:	4b22      	ldr	r3, [pc, #136]	; (8005560 <prvProcessExpiredTimer+0x94>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	3304      	adds	r3, #4
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe fb1d 	bl	8003b24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d022      	beq.n	800553e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	18d1      	adds	r1, r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	6978      	ldr	r0, [r7, #20]
 8005506:	f000 f8d1 	bl	80056ac <prvInsertTimerInActiveList>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01f      	beq.n	8005550 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005510:	2300      	movs	r3, #0
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	2300      	movs	r3, #0
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	2100      	movs	r1, #0
 800551a:	6978      	ldr	r0, [r7, #20]
 800551c:	f7ff ff88 	bl	8005430 <xTimerGenericCommand>
 8005520:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d113      	bne.n	8005550 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	60fb      	str	r3, [r7, #12]
}
 800553a:	bf00      	nop
 800553c:	e7fe      	b.n	800553c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	b2da      	uxtb	r2, r3
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	6978      	ldr	r0, [r7, #20]
 8005556:	4798      	blx	r3
}
 8005558:	bf00      	nop
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000d3c 	.word	0x20000d3c

08005564 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800556c:	f107 0308 	add.w	r3, r7, #8
 8005570:	4618      	mov	r0, r3
 8005572:	f000 f857 	bl	8005624 <prvGetNextExpireTime>
 8005576:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4619      	mov	r1, r3
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f803 	bl	8005588 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005582:	f000 f8d5 	bl	8005730 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005586:	e7f1      	b.n	800556c <prvTimerTask+0x8>

08005588 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005592:	f7ff fa39 	bl	8004a08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005596:	f107 0308 	add.w	r3, r7, #8
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f866 	bl	800566c <prvSampleTimeNow>
 80055a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d130      	bne.n	800560a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <prvProcessTimerOrBlockTask+0x3c>
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d806      	bhi.n	80055c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055b6:	f7ff fa35 	bl	8004a24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055ba:	68f9      	ldr	r1, [r7, #12]
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff ff85 	bl	80054cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055c2:	e024      	b.n	800560e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055ca:	4b13      	ldr	r3, [pc, #76]	; (8005618 <prvProcessTimerOrBlockTask+0x90>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <prvProcessTimerOrBlockTask+0x50>
 80055d4:	2301      	movs	r3, #1
 80055d6:	e000      	b.n	80055da <prvProcessTimerOrBlockTask+0x52>
 80055d8:	2300      	movs	r3, #0
 80055da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <prvProcessTimerOrBlockTask+0x94>)
 80055de:	6818      	ldr	r0, [r3, #0]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	4619      	mov	r1, r3
 80055ea:	f7fe ff7d 	bl	80044e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055ee:	f7ff fa19 	bl	8004a24 <xTaskResumeAll>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055f8:	4b09      	ldr	r3, [pc, #36]	; (8005620 <prvProcessTimerOrBlockTask+0x98>)
 80055fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	f3bf 8f6f 	isb	sy
}
 8005608:	e001      	b.n	800560e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800560a:	f7ff fa0b 	bl	8004a24 <xTaskResumeAll>
}
 800560e:	bf00      	nop
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	20000d40 	.word	0x20000d40
 800561c:	20000d44 	.word	0x20000d44
 8005620:	e000ed04 	.word	0xe000ed04

08005624 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800562c:	4b0e      	ldr	r3, [pc, #56]	; (8005668 <prvGetNextExpireTime+0x44>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <prvGetNextExpireTime+0x16>
 8005636:	2201      	movs	r2, #1
 8005638:	e000      	b.n	800563c <prvGetNextExpireTime+0x18>
 800563a:	2200      	movs	r2, #0
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005648:	4b07      	ldr	r3, [pc, #28]	; (8005668 <prvGetNextExpireTime+0x44>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	e001      	b.n	8005658 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005658:	68fb      	ldr	r3, [r7, #12]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	20000d3c 	.word	0x20000d3c

0800566c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005674:	f7ff fa74 	bl	8004b60 <xTaskGetTickCount>
 8005678:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <prvSampleTimeNow+0x3c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	429a      	cmp	r2, r3
 8005682:	d205      	bcs.n	8005690 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005684:	f000 f936 	bl	80058f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e002      	b.n	8005696 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005696:	4a04      	ldr	r2, [pc, #16]	; (80056a8 <prvSampleTimeNow+0x3c>)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800569c:	68fb      	ldr	r3, [r7, #12]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000d4c 	.word	0x20000d4c

080056ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d812      	bhi.n	80056f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	1ad2      	subs	r2, r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d302      	bcc.n	80056e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	e01b      	b.n	800571e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056e6:	4b10      	ldr	r3, [pc, #64]	; (8005728 <prvInsertTimerInActiveList+0x7c>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3304      	adds	r3, #4
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f7fe f9de 	bl	8003ab2 <vListInsert>
 80056f6:	e012      	b.n	800571e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d206      	bcs.n	800570e <prvInsertTimerInActiveList+0x62>
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005708:	2301      	movs	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e007      	b.n	800571e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800570e:	4b07      	ldr	r3, [pc, #28]	; (800572c <prvInsertTimerInActiveList+0x80>)
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3304      	adds	r3, #4
 8005716:	4619      	mov	r1, r3
 8005718:	4610      	mov	r0, r2
 800571a:	f7fe f9ca 	bl	8003ab2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800571e:	697b      	ldr	r3, [r7, #20]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000d40 	.word	0x20000d40
 800572c:	20000d3c 	.word	0x20000d3c

08005730 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08e      	sub	sp, #56	; 0x38
 8005734:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005736:	e0ca      	b.n	80058ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	da18      	bge.n	8005770 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800573e:	1d3b      	adds	r3, r7, #4
 8005740:	3304      	adds	r3, #4
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	61fb      	str	r3, [r7, #28]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005766:	6850      	ldr	r0, [r2, #4]
 8005768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800576a:	6892      	ldr	r2, [r2, #8]
 800576c:	4611      	mov	r1, r2
 800576e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	f2c0 80aa 	blt.w	80058cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	3304      	adds	r3, #4
 8005788:	4618      	mov	r0, r3
 800578a:	f7fe f9cb 	bl	8003b24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800578e:	463b      	mov	r3, r7
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff ff6b 	bl	800566c <prvSampleTimeNow>
 8005796:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b09      	cmp	r3, #9
 800579c:	f200 8097 	bhi.w	80058ce <prvProcessReceivedCommands+0x19e>
 80057a0:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <prvProcessReceivedCommands+0x78>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057d1 	.word	0x080057d1
 80057b0:	080057d1 	.word	0x080057d1
 80057b4:	08005845 	.word	0x08005845
 80057b8:	08005859 	.word	0x08005859
 80057bc:	080058a3 	.word	0x080058a3
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057d1 	.word	0x080057d1
 80057c8:	08005845 	.word	0x08005845
 80057cc:	08005859 	.word	0x08005859
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	18d1      	adds	r1, r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057f0:	f7ff ff5c 	bl	80056ac <prvInsertTimerInActiveList>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d069      	beq.n	80058ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005800:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b00      	cmp	r3, #0
 800580e:	d05e      	beq.n	80058ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	441a      	add	r2, r3
 8005818:	2300      	movs	r3, #0
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	2300      	movs	r3, #0
 800581e:	2100      	movs	r1, #0
 8005820:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005822:	f7ff fe05 	bl	8005430 <xTimerGenericCommand>
 8005826:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d14f      	bne.n	80058ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	61bb      	str	r3, [r7, #24]
}
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800584a:	f023 0301 	bic.w	r3, r3, #1
 800584e:	b2da      	uxtb	r2, r3
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005856:	e03a      	b.n	80058ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	b2da      	uxtb	r2, r3
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800586a:	68ba      	ldr	r2, [r7, #8]
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	617b      	str	r3, [r7, #20]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	699a      	ldr	r2, [r3, #24]
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	18d1      	adds	r1, r2, r3
 8005896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800589c:	f7ff ff06 	bl	80056ac <prvInsertTimerInActiveList>
					break;
 80058a0:	e015      	b.n	80058ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80058b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058b2:	f000 fbdd 	bl	8006070 <vPortFree>
 80058b6:	e00a      	b.n	80058ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058be:	f023 0301 	bic.w	r3, r3, #1
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058ca:	e000      	b.n	80058ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80058cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058ce:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <prvProcessReceivedCommands+0x1c0>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	1d39      	adds	r1, r7, #4
 80058d4:	2200      	movs	r2, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fe fbec 	bl	80040b4 <xQueueReceive>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f47f af2a 	bne.w	8005738 <prvProcessReceivedCommands+0x8>
	}
}
 80058e4:	bf00      	nop
 80058e6:	bf00      	nop
 80058e8:	3730      	adds	r7, #48	; 0x30
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	20000d44 	.word	0x20000d44

080058f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058fa:	e048      	b.n	800598e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058fc:	4b2d      	ldr	r3, [pc, #180]	; (80059b4 <prvSwitchTimerLists+0xc0>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005906:	4b2b      	ldr	r3, [pc, #172]	; (80059b4 <prvSwitchTimerLists+0xc0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	3304      	adds	r3, #4
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe f905 	bl	8003b24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d02e      	beq.n	800598e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	4413      	add	r3, r2
 8005938:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	429a      	cmp	r2, r3
 8005940:	d90e      	bls.n	8005960 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800594e:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <prvSwitchTimerLists+0xc0>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	3304      	adds	r3, #4
 8005956:	4619      	mov	r1, r3
 8005958:	4610      	mov	r0, r2
 800595a:	f7fe f8aa 	bl	8003ab2 <vListInsert>
 800595e:	e016      	b.n	800598e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005960:	2300      	movs	r3, #0
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	2300      	movs	r3, #0
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	2100      	movs	r1, #0
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7ff fd60 	bl	8005430 <xTimerGenericCommand>
 8005970:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	603b      	str	r3, [r7, #0]
}
 800598a:	bf00      	nop
 800598c:	e7fe      	b.n	800598c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800598e:	4b09      	ldr	r3, [pc, #36]	; (80059b4 <prvSwitchTimerLists+0xc0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1b1      	bne.n	80058fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005998:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <prvSwitchTimerLists+0xc0>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800599e:	4b06      	ldr	r3, [pc, #24]	; (80059b8 <prvSwitchTimerLists+0xc4>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a04      	ldr	r2, [pc, #16]	; (80059b4 <prvSwitchTimerLists+0xc0>)
 80059a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059a6:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <prvSwitchTimerLists+0xc4>)
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	6013      	str	r3, [r2, #0]
}
 80059ac:	bf00      	nop
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20000d3c 	.word	0x20000d3c
 80059b8:	20000d40 	.word	0x20000d40

080059bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059c2:	f000 f967 	bl	8005c94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059c6:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <prvCheckForValidListAndQueue+0x60>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d120      	bne.n	8005a10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059ce:	4814      	ldr	r0, [pc, #80]	; (8005a20 <prvCheckForValidListAndQueue+0x64>)
 80059d0:	f7fe f81e 	bl	8003a10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059d4:	4813      	ldr	r0, [pc, #76]	; (8005a24 <prvCheckForValidListAndQueue+0x68>)
 80059d6:	f7fe f81b 	bl	8003a10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059da:	4b13      	ldr	r3, [pc, #76]	; (8005a28 <prvCheckForValidListAndQueue+0x6c>)
 80059dc:	4a10      	ldr	r2, [pc, #64]	; (8005a20 <prvCheckForValidListAndQueue+0x64>)
 80059de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059e0:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <prvCheckForValidListAndQueue+0x70>)
 80059e2:	4a10      	ldr	r2, [pc, #64]	; (8005a24 <prvCheckForValidListAndQueue+0x68>)
 80059e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059e6:	2300      	movs	r3, #0
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <prvCheckForValidListAndQueue+0x74>)
 80059ec:	4a11      	ldr	r2, [pc, #68]	; (8005a34 <prvCheckForValidListAndQueue+0x78>)
 80059ee:	2110      	movs	r1, #16
 80059f0:	200a      	movs	r0, #10
 80059f2:	f7fe f929 	bl	8003c48 <xQueueGenericCreateStatic>
 80059f6:	4603      	mov	r3, r0
 80059f8:	4a08      	ldr	r2, [pc, #32]	; (8005a1c <prvCheckForValidListAndQueue+0x60>)
 80059fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059fc:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <prvCheckForValidListAndQueue+0x60>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <prvCheckForValidListAndQueue+0x60>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	490b      	ldr	r1, [pc, #44]	; (8005a38 <prvCheckForValidListAndQueue+0x7c>)
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fd42 	bl	8004494 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a10:	f000 f970 	bl	8005cf4 <vPortExitCritical>
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000d44 	.word	0x20000d44
 8005a20:	20000d14 	.word	0x20000d14
 8005a24:	20000d28 	.word	0x20000d28
 8005a28:	20000d3c 	.word	0x20000d3c
 8005a2c:	20000d40 	.word	0x20000d40
 8005a30:	20000df0 	.word	0x20000df0
 8005a34:	20000d50 	.word	0x20000d50
 8005a38:	080064e4 	.word	0x080064e4

08005a3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3b04      	subs	r3, #4
 8005a4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3b04      	subs	r3, #4
 8005a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f023 0201 	bic.w	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3b04      	subs	r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a6c:	4a0c      	ldr	r2, [pc, #48]	; (8005aa0 <pxPortInitialiseStack+0x64>)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3b14      	subs	r3, #20
 8005a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3b04      	subs	r3, #4
 8005a82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f06f 0202 	mvn.w	r2, #2
 8005a8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3b20      	subs	r3, #32
 8005a90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a92:	68fb      	ldr	r3, [r7, #12]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	08005aa5 	.word	0x08005aa5

08005aa4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005aae:	4b12      	ldr	r3, [pc, #72]	; (8005af8 <prvTaskExitError+0x54>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d00a      	beq.n	8005ace <prvTaskExitError+0x2a>
	__asm volatile
 8005ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abc:	f383 8811 	msr	BASEPRI, r3
 8005ac0:	f3bf 8f6f 	isb	sy
 8005ac4:	f3bf 8f4f 	dsb	sy
 8005ac8:	60fb      	str	r3, [r7, #12]
}
 8005aca:	bf00      	nop
 8005acc:	e7fe      	b.n	8005acc <prvTaskExitError+0x28>
	__asm volatile
 8005ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad2:	f383 8811 	msr	BASEPRI, r3
 8005ad6:	f3bf 8f6f 	isb	sy
 8005ada:	f3bf 8f4f 	dsb	sy
 8005ade:	60bb      	str	r3, [r7, #8]
}
 8005ae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ae2:	bf00      	nop
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0fc      	beq.n	8005ae4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005aea:	bf00      	nop
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	2000000c 	.word	0x2000000c
 8005afc:	00000000 	.word	0x00000000

08005b00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b00:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <pxCurrentTCBConst2>)
 8005b02:	6819      	ldr	r1, [r3, #0]
 8005b04:	6808      	ldr	r0, [r1, #0]
 8005b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0a:	f380 8809 	msr	PSP, r0
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f380 8811 	msr	BASEPRI, r0
 8005b1a:	4770      	bx	lr
 8005b1c:	f3af 8000 	nop.w

08005b20 <pxCurrentTCBConst2>:
 8005b20:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b28:	4808      	ldr	r0, [pc, #32]	; (8005b4c <prvPortStartFirstTask+0x24>)
 8005b2a:	6800      	ldr	r0, [r0, #0]
 8005b2c:	6800      	ldr	r0, [r0, #0]
 8005b2e:	f380 8808 	msr	MSP, r0
 8005b32:	f04f 0000 	mov.w	r0, #0
 8005b36:	f380 8814 	msr	CONTROL, r0
 8005b3a:	b662      	cpsie	i
 8005b3c:	b661      	cpsie	f
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
 8005b46:	df00      	svc	0
 8005b48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b4a:	bf00      	nop
 8005b4c:	e000ed08 	.word	0xe000ed08

08005b50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b56:	4b46      	ldr	r3, [pc, #280]	; (8005c70 <xPortStartScheduler+0x120>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a46      	ldr	r2, [pc, #280]	; (8005c74 <xPortStartScheduler+0x124>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10a      	bne.n	8005b76 <xPortStartScheduler+0x26>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	613b      	str	r3, [r7, #16]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b76:	4b3e      	ldr	r3, [pc, #248]	; (8005c70 <xPortStartScheduler+0x120>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a3f      	ldr	r2, [pc, #252]	; (8005c78 <xPortStartScheduler+0x128>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10a      	bne.n	8005b96 <xPortStartScheduler+0x46>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	60fb      	str	r3, [r7, #12]
}
 8005b92:	bf00      	nop
 8005b94:	e7fe      	b.n	8005b94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b96:	4b39      	ldr	r3, [pc, #228]	; (8005c7c <xPortStartScheduler+0x12c>)
 8005b98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	22ff      	movs	r2, #255	; 0xff
 8005ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <xPortStartScheduler+0x130>)
 8005bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bbe:	4b31      	ldr	r3, [pc, #196]	; (8005c84 <xPortStartScheduler+0x134>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bc4:	e009      	b.n	8005bda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005bc6:	4b2f      	ldr	r3, [pc, #188]	; (8005c84 <xPortStartScheduler+0x134>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	4a2d      	ldr	r2, [pc, #180]	; (8005c84 <xPortStartScheduler+0x134>)
 8005bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bda:	78fb      	ldrb	r3, [r7, #3]
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be2:	2b80      	cmp	r3, #128	; 0x80
 8005be4:	d0ef      	beq.n	8005bc6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005be6:	4b27      	ldr	r3, [pc, #156]	; (8005c84 <xPortStartScheduler+0x134>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f1c3 0307 	rsb	r3, r3, #7
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d00a      	beq.n	8005c08 <xPortStartScheduler+0xb8>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60bb      	str	r3, [r7, #8]
}
 8005c04:	bf00      	nop
 8005c06:	e7fe      	b.n	8005c06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c08:	4b1e      	ldr	r3, [pc, #120]	; (8005c84 <xPortStartScheduler+0x134>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	021b      	lsls	r3, r3, #8
 8005c0e:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <xPortStartScheduler+0x134>)
 8005c10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c12:	4b1c      	ldr	r3, [pc, #112]	; (8005c84 <xPortStartScheduler+0x134>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c1a:	4a1a      	ldr	r2, [pc, #104]	; (8005c84 <xPortStartScheduler+0x134>)
 8005c1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c26:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <xPortStartScheduler+0x138>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <xPortStartScheduler+0x138>)
 8005c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c32:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <xPortStartScheduler+0x138>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a14      	ldr	r2, [pc, #80]	; (8005c88 <xPortStartScheduler+0x138>)
 8005c38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c3e:	f000 f8dd 	bl	8005dfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c42:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <xPortStartScheduler+0x13c>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c48:	f000 f8fc 	bl	8005e44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c4c:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <xPortStartScheduler+0x140>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a0f      	ldr	r2, [pc, #60]	; (8005c90 <xPortStartScheduler+0x140>)
 8005c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c58:	f7ff ff66 	bl	8005b28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c5c:	f7ff f84a 	bl	8004cf4 <vTaskSwitchContext>
	prvTaskExitError();
 8005c60:	f7ff ff20 	bl	8005aa4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	e000ed00 	.word	0xe000ed00
 8005c74:	410fc271 	.word	0x410fc271
 8005c78:	410fc270 	.word	0x410fc270
 8005c7c:	e000e400 	.word	0xe000e400
 8005c80:	20000e40 	.word	0x20000e40
 8005c84:	20000e44 	.word	0x20000e44
 8005c88:	e000ed20 	.word	0xe000ed20
 8005c8c:	2000000c 	.word	0x2000000c
 8005c90:	e000ef34 	.word	0xe000ef34

08005c94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
	__asm volatile
 8005c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9e:	f383 8811 	msr	BASEPRI, r3
 8005ca2:	f3bf 8f6f 	isb	sy
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	607b      	str	r3, [r7, #4]
}
 8005cac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <vPortEnterCritical+0x58>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	4a0d      	ldr	r2, [pc, #52]	; (8005cec <vPortEnterCritical+0x58>)
 8005cb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cb8:	4b0c      	ldr	r3, [pc, #48]	; (8005cec <vPortEnterCritical+0x58>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d10f      	bne.n	8005ce0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <vPortEnterCritical+0x5c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	603b      	str	r3, [r7, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	e7fe      	b.n	8005cde <vPortEnterCritical+0x4a>
	}
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	2000000c 	.word	0x2000000c
 8005cf0:	e000ed04 	.word	0xe000ed04

08005cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cfa:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <vPortExitCritical+0x50>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10a      	bne.n	8005d18 <vPortExitCritical+0x24>
	__asm volatile
 8005d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d06:	f383 8811 	msr	BASEPRI, r3
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	f3bf 8f4f 	dsb	sy
 8005d12:	607b      	str	r3, [r7, #4]
}
 8005d14:	bf00      	nop
 8005d16:	e7fe      	b.n	8005d16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d18:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <vPortExitCritical+0x50>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <vPortExitCritical+0x50>)
 8005d20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d22:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <vPortExitCritical+0x50>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d105      	bne.n	8005d36 <vPortExitCritical+0x42>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	f383 8811 	msr	BASEPRI, r3
}
 8005d34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c
	...

08005d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d50:	f3ef 8009 	mrs	r0, PSP
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <pxCurrentTCBConst>)
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	f01e 0f10 	tst.w	lr, #16
 8005d60:	bf08      	it	eq
 8005d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6a:	6010      	str	r0, [r2, #0]
 8005d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d74:	f380 8811 	msr	BASEPRI, r0
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	f3bf 8f6f 	isb	sy
 8005d80:	f7fe ffb8 	bl	8004cf4 <vTaskSwitchContext>
 8005d84:	f04f 0000 	mov.w	r0, #0
 8005d88:	f380 8811 	msr	BASEPRI, r0
 8005d8c:	bc09      	pop	{r0, r3}
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	6808      	ldr	r0, [r1, #0]
 8005d92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d96:	f01e 0f10 	tst.w	lr, #16
 8005d9a:	bf08      	it	eq
 8005d9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005da0:	f380 8809 	msr	PSP, r0
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	f3af 8000 	nop.w

08005db0 <pxCurrentTCBConst>:
 8005db0:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop

08005db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	607b      	str	r3, [r7, #4]
}
 8005dd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005dd2:	f7fe fed5 	bl	8004b80 <xTaskIncrementTick>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ddc:	4b06      	ldr	r3, [pc, #24]	; (8005df8 <xPortSysTickHandler+0x40>)
 8005dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	2300      	movs	r3, #0
 8005de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f383 8811 	msr	BASEPRI, r3
}
 8005dee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	e000ed04 	.word	0xe000ed04

08005dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e00:	4b0b      	ldr	r3, [pc, #44]	; (8005e30 <vPortSetupTimerInterrupt+0x34>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e06:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <vPortSetupTimerInterrupt+0x38>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <vPortSetupTimerInterrupt+0x3c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <vPortSetupTimerInterrupt+0x40>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	099b      	lsrs	r3, r3, #6
 8005e18:	4a09      	ldr	r2, [pc, #36]	; (8005e40 <vPortSetupTimerInterrupt+0x44>)
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e1e:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <vPortSetupTimerInterrupt+0x34>)
 8005e20:	2207      	movs	r2, #7
 8005e22:	601a      	str	r2, [r3, #0]
}
 8005e24:	bf00      	nop
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	e000e010 	.word	0xe000e010
 8005e34:	e000e018 	.word	0xe000e018
 8005e38:	20000000 	.word	0x20000000
 8005e3c:	10624dd3 	.word	0x10624dd3
 8005e40:	e000e014 	.word	0xe000e014

08005e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e54 <vPortEnableVFP+0x10>
 8005e48:	6801      	ldr	r1, [r0, #0]
 8005e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e4e:	6001      	str	r1, [r0, #0]
 8005e50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e52:	bf00      	nop
 8005e54:	e000ed88 	.word	0xe000ed88

08005e58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e5e:	f3ef 8305 	mrs	r3, IPSR
 8005e62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	d914      	bls.n	8005e94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e6a:	4a17      	ldr	r2, [pc, #92]	; (8005ec8 <vPortValidateInterruptPriority+0x70>)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e74:	4b15      	ldr	r3, [pc, #84]	; (8005ecc <vPortValidateInterruptPriority+0x74>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	7afa      	ldrb	r2, [r7, #11]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d20a      	bcs.n	8005e94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	607b      	str	r3, [r7, #4]
}
 8005e90:	bf00      	nop
 8005e92:	e7fe      	b.n	8005e92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e94:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <vPortValidateInterruptPriority+0x78>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ed4 <vPortValidateInterruptPriority+0x7c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d90a      	bls.n	8005eba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	603b      	str	r3, [r7, #0]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <vPortValidateInterruptPriority+0x60>
	}
 8005eba:	bf00      	nop
 8005ebc:	3714      	adds	r7, #20
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	e000e3f0 	.word	0xe000e3f0
 8005ecc:	20000e40 	.word	0x20000e40
 8005ed0:	e000ed0c 	.word	0xe000ed0c
 8005ed4:	20000e44 	.word	0x20000e44

08005ed8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	; 0x28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ee4:	f7fe fd90 	bl	8004a08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ee8:	4b5b      	ldr	r3, [pc, #364]	; (8006058 <pvPortMalloc+0x180>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ef0:	f000 f920 	bl	8006134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ef4:	4b59      	ldr	r3, [pc, #356]	; (800605c <pvPortMalloc+0x184>)
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4013      	ands	r3, r2
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f040 8093 	bne.w	8006028 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01d      	beq.n	8005f44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f08:	2208      	movs	r2, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d014      	beq.n	8005f44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f023 0307 	bic.w	r3, r3, #7
 8005f20:	3308      	adds	r3, #8
 8005f22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <pvPortMalloc+0x6c>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	617b      	str	r3, [r7, #20]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d06e      	beq.n	8006028 <pvPortMalloc+0x150>
 8005f4a:	4b45      	ldr	r3, [pc, #276]	; (8006060 <pvPortMalloc+0x188>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d869      	bhi.n	8006028 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f54:	4b43      	ldr	r3, [pc, #268]	; (8006064 <pvPortMalloc+0x18c>)
 8005f56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f58:	4b42      	ldr	r3, [pc, #264]	; (8006064 <pvPortMalloc+0x18c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f5e:	e004      	b.n	8005f6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d903      	bls.n	8005f7c <pvPortMalloc+0xa4>
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1f1      	bne.n	8005f60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f7c:	4b36      	ldr	r3, [pc, #216]	; (8006058 <pvPortMalloc+0x180>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d050      	beq.n	8006028 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2208      	movs	r2, #8
 8005f8c:	4413      	add	r3, r2
 8005f8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	1ad2      	subs	r2, r2, r3
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d91f      	bls.n	8005fe8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4413      	add	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <pvPortMalloc+0xf8>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	613b      	str	r3, [r7, #16]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	1ad2      	subs	r2, r2, r3
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fe2:	69b8      	ldr	r0, [r7, #24]
 8005fe4:	f000 f908 	bl	80061f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fe8:	4b1d      	ldr	r3, [pc, #116]	; (8006060 <pvPortMalloc+0x188>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	4a1b      	ldr	r2, [pc, #108]	; (8006060 <pvPortMalloc+0x188>)
 8005ff4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ff6:	4b1a      	ldr	r3, [pc, #104]	; (8006060 <pvPortMalloc+0x188>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b1b      	ldr	r3, [pc, #108]	; (8006068 <pvPortMalloc+0x190>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d203      	bcs.n	800600a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006002:	4b17      	ldr	r3, [pc, #92]	; (8006060 <pvPortMalloc+0x188>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a18      	ldr	r2, [pc, #96]	; (8006068 <pvPortMalloc+0x190>)
 8006008:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800600a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <pvPortMalloc+0x184>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	431a      	orrs	r2, r3
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800601e:	4b13      	ldr	r3, [pc, #76]	; (800606c <pvPortMalloc+0x194>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3301      	adds	r3, #1
 8006024:	4a11      	ldr	r2, [pc, #68]	; (800606c <pvPortMalloc+0x194>)
 8006026:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006028:	f7fe fcfc 	bl	8004a24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <pvPortMalloc+0x174>
	__asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	60fb      	str	r3, [r7, #12]
}
 8006048:	bf00      	nop
 800604a:	e7fe      	b.n	800604a <pvPortMalloc+0x172>
	return pvReturn;
 800604c:	69fb      	ldr	r3, [r7, #28]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3728      	adds	r7, #40	; 0x28
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20004a50 	.word	0x20004a50
 800605c:	20004a64 	.word	0x20004a64
 8006060:	20004a54 	.word	0x20004a54
 8006064:	20004a48 	.word	0x20004a48
 8006068:	20004a58 	.word	0x20004a58
 800606c:	20004a5c 	.word	0x20004a5c

08006070 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d04d      	beq.n	800611e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006082:	2308      	movs	r3, #8
 8006084:	425b      	negs	r3, r3
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4413      	add	r3, r2
 800608a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <vPortFree+0xb8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4013      	ands	r3, r2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <vPortFree+0x44>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	60fb      	str	r3, [r7, #12]
}
 80060b0:	bf00      	nop
 80060b2:	e7fe      	b.n	80060b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00a      	beq.n	80060d2 <vPortFree+0x62>
	__asm volatile
 80060bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c0:	f383 8811 	msr	BASEPRI, r3
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	f3bf 8f4f 	dsb	sy
 80060cc:	60bb      	str	r3, [r7, #8]
}
 80060ce:	bf00      	nop
 80060d0:	e7fe      	b.n	80060d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	4b14      	ldr	r3, [pc, #80]	; (8006128 <vPortFree+0xb8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01e      	beq.n	800611e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d11a      	bne.n	800611e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <vPortFree+0xb8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	43db      	mvns	r3, r3
 80060f2:	401a      	ands	r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060f8:	f7fe fc86 	bl	8004a08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	4b0a      	ldr	r3, [pc, #40]	; (800612c <vPortFree+0xbc>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4413      	add	r3, r2
 8006106:	4a09      	ldr	r2, [pc, #36]	; (800612c <vPortFree+0xbc>)
 8006108:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800610a:	6938      	ldr	r0, [r7, #16]
 800610c:	f000 f874 	bl	80061f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006110:	4b07      	ldr	r3, [pc, #28]	; (8006130 <vPortFree+0xc0>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	4a06      	ldr	r2, [pc, #24]	; (8006130 <vPortFree+0xc0>)
 8006118:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800611a:	f7fe fc83 	bl	8004a24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800611e:	bf00      	nop
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20004a64 	.word	0x20004a64
 800612c:	20004a54 	.word	0x20004a54
 8006130:	20004a60 	.word	0x20004a60

08006134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800613a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800613e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006140:	4b27      	ldr	r3, [pc, #156]	; (80061e0 <prvHeapInit+0xac>)
 8006142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f003 0307 	and.w	r3, r3, #7
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00c      	beq.n	8006168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3307      	adds	r3, #7
 8006152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0307 	bic.w	r3, r3, #7
 800615a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	4a1f      	ldr	r2, [pc, #124]	; (80061e0 <prvHeapInit+0xac>)
 8006164:	4413      	add	r3, r2
 8006166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800616c:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <prvHeapInit+0xb0>)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006172:	4b1c      	ldr	r3, [pc, #112]	; (80061e4 <prvHeapInit+0xb0>)
 8006174:	2200      	movs	r2, #0
 8006176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	4413      	add	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006180:	2208      	movs	r2, #8
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 0307 	bic.w	r3, r3, #7
 800618e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <prvHeapInit+0xb4>)
 8006194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006196:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <prvHeapInit+0xb4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2200      	movs	r2, #0
 800619c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800619e:	4b12      	ldr	r3, [pc, #72]	; (80061e8 <prvHeapInit+0xb4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	1ad2      	subs	r2, r2, r3
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <prvHeapInit+0xb4>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	4a0a      	ldr	r2, [pc, #40]	; (80061ec <prvHeapInit+0xb8>)
 80061c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	4a09      	ldr	r2, [pc, #36]	; (80061f0 <prvHeapInit+0xbc>)
 80061ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061cc:	4b09      	ldr	r3, [pc, #36]	; (80061f4 <prvHeapInit+0xc0>)
 80061ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061d2:	601a      	str	r2, [r3, #0]
}
 80061d4:	bf00      	nop
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	20000e48 	.word	0x20000e48
 80061e4:	20004a48 	.word	0x20004a48
 80061e8:	20004a50 	.word	0x20004a50
 80061ec:	20004a58 	.word	0x20004a58
 80061f0:	20004a54 	.word	0x20004a54
 80061f4:	20004a64 	.word	0x20004a64

080061f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006200:	4b28      	ldr	r3, [pc, #160]	; (80062a4 <prvInsertBlockIntoFreeList+0xac>)
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e002      	b.n	800620c <prvInsertBlockIntoFreeList+0x14>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d8f7      	bhi.n	8006206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	4413      	add	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	429a      	cmp	r2, r3
 8006226:	d108      	bne.n	800623a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	441a      	add	r2, r3
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	441a      	add	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d118      	bne.n	8006280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d00d      	beq.n	8006276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	441a      	add	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	e008      	b.n	8006288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006276:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e003      	b.n	8006288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	429a      	cmp	r2, r3
 800628e:	d002      	beq.n	8006296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20004a48 	.word	0x20004a48
 80062a8:	20004a50 	.word	0x20004a50

080062ac <__libc_init_array>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	4d0d      	ldr	r5, [pc, #52]	; (80062e4 <__libc_init_array+0x38>)
 80062b0:	4c0d      	ldr	r4, [pc, #52]	; (80062e8 <__libc_init_array+0x3c>)
 80062b2:	1b64      	subs	r4, r4, r5
 80062b4:	10a4      	asrs	r4, r4, #2
 80062b6:	2600      	movs	r6, #0
 80062b8:	42a6      	cmp	r6, r4
 80062ba:	d109      	bne.n	80062d0 <__libc_init_array+0x24>
 80062bc:	4d0b      	ldr	r5, [pc, #44]	; (80062ec <__libc_init_array+0x40>)
 80062be:	4c0c      	ldr	r4, [pc, #48]	; (80062f0 <__libc_init_array+0x44>)
 80062c0:	f000 f8f6 	bl	80064b0 <_init>
 80062c4:	1b64      	subs	r4, r4, r5
 80062c6:	10a4      	asrs	r4, r4, #2
 80062c8:	2600      	movs	r6, #0
 80062ca:	42a6      	cmp	r6, r4
 80062cc:	d105      	bne.n	80062da <__libc_init_array+0x2e>
 80062ce:	bd70      	pop	{r4, r5, r6, pc}
 80062d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d4:	4798      	blx	r3
 80062d6:	3601      	adds	r6, #1
 80062d8:	e7ee      	b.n	80062b8 <__libc_init_array+0xc>
 80062da:	f855 3b04 	ldr.w	r3, [r5], #4
 80062de:	4798      	blx	r3
 80062e0:	3601      	adds	r6, #1
 80062e2:	e7f2      	b.n	80062ca <__libc_init_array+0x1e>
 80062e4:	08006590 	.word	0x08006590
 80062e8:	08006590 	.word	0x08006590
 80062ec:	08006590 	.word	0x08006590
 80062f0:	08006594 	.word	0x08006594

080062f4 <__retarget_lock_acquire_recursive>:
 80062f4:	4770      	bx	lr

080062f6 <__retarget_lock_release_recursive>:
 80062f6:	4770      	bx	lr

080062f8 <memcpy>:
 80062f8:	440a      	add	r2, r1
 80062fa:	4291      	cmp	r1, r2
 80062fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006300:	d100      	bne.n	8006304 <memcpy+0xc>
 8006302:	4770      	bx	lr
 8006304:	b510      	push	{r4, lr}
 8006306:	f811 4b01 	ldrb.w	r4, [r1], #1
 800630a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800630e:	4291      	cmp	r1, r2
 8006310:	d1f9      	bne.n	8006306 <memcpy+0xe>
 8006312:	bd10      	pop	{r4, pc}

08006314 <memset>:
 8006314:	4402      	add	r2, r0
 8006316:	4603      	mov	r3, r0
 8006318:	4293      	cmp	r3, r2
 800631a:	d100      	bne.n	800631e <memset+0xa>
 800631c:	4770      	bx	lr
 800631e:	f803 1b01 	strb.w	r1, [r3], #1
 8006322:	e7f9      	b.n	8006318 <memset+0x4>

08006324 <cleanup_glue>:
 8006324:	b538      	push	{r3, r4, r5, lr}
 8006326:	460c      	mov	r4, r1
 8006328:	6809      	ldr	r1, [r1, #0]
 800632a:	4605      	mov	r5, r0
 800632c:	b109      	cbz	r1, 8006332 <cleanup_glue+0xe>
 800632e:	f7ff fff9 	bl	8006324 <cleanup_glue>
 8006332:	4621      	mov	r1, r4
 8006334:	4628      	mov	r0, r5
 8006336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800633a:	f000 b869 	b.w	8006410 <_free_r>
	...

08006340 <_reclaim_reent>:
 8006340:	4b2c      	ldr	r3, [pc, #176]	; (80063f4 <_reclaim_reent+0xb4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4283      	cmp	r3, r0
 8006346:	b570      	push	{r4, r5, r6, lr}
 8006348:	4604      	mov	r4, r0
 800634a:	d051      	beq.n	80063f0 <_reclaim_reent+0xb0>
 800634c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800634e:	b143      	cbz	r3, 8006362 <_reclaim_reent+0x22>
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d14a      	bne.n	80063ec <_reclaim_reent+0xac>
 8006356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006358:	6819      	ldr	r1, [r3, #0]
 800635a:	b111      	cbz	r1, 8006362 <_reclaim_reent+0x22>
 800635c:	4620      	mov	r0, r4
 800635e:	f000 f857 	bl	8006410 <_free_r>
 8006362:	6961      	ldr	r1, [r4, #20]
 8006364:	b111      	cbz	r1, 800636c <_reclaim_reent+0x2c>
 8006366:	4620      	mov	r0, r4
 8006368:	f000 f852 	bl	8006410 <_free_r>
 800636c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800636e:	b111      	cbz	r1, 8006376 <_reclaim_reent+0x36>
 8006370:	4620      	mov	r0, r4
 8006372:	f000 f84d 	bl	8006410 <_free_r>
 8006376:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006378:	b111      	cbz	r1, 8006380 <_reclaim_reent+0x40>
 800637a:	4620      	mov	r0, r4
 800637c:	f000 f848 	bl	8006410 <_free_r>
 8006380:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006382:	b111      	cbz	r1, 800638a <_reclaim_reent+0x4a>
 8006384:	4620      	mov	r0, r4
 8006386:	f000 f843 	bl	8006410 <_free_r>
 800638a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800638c:	b111      	cbz	r1, 8006394 <_reclaim_reent+0x54>
 800638e:	4620      	mov	r0, r4
 8006390:	f000 f83e 	bl	8006410 <_free_r>
 8006394:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006396:	b111      	cbz	r1, 800639e <_reclaim_reent+0x5e>
 8006398:	4620      	mov	r0, r4
 800639a:	f000 f839 	bl	8006410 <_free_r>
 800639e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80063a0:	b111      	cbz	r1, 80063a8 <_reclaim_reent+0x68>
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 f834 	bl	8006410 <_free_r>
 80063a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063aa:	b111      	cbz	r1, 80063b2 <_reclaim_reent+0x72>
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 f82f 	bl	8006410 <_free_r>
 80063b2:	69a3      	ldr	r3, [r4, #24]
 80063b4:	b1e3      	cbz	r3, 80063f0 <_reclaim_reent+0xb0>
 80063b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063b8:	4620      	mov	r0, r4
 80063ba:	4798      	blx	r3
 80063bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80063be:	b1b9      	cbz	r1, 80063f0 <_reclaim_reent+0xb0>
 80063c0:	4620      	mov	r0, r4
 80063c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063c6:	f7ff bfad 	b.w	8006324 <cleanup_glue>
 80063ca:	5949      	ldr	r1, [r1, r5]
 80063cc:	b941      	cbnz	r1, 80063e0 <_reclaim_reent+0xa0>
 80063ce:	3504      	adds	r5, #4
 80063d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063d2:	2d80      	cmp	r5, #128	; 0x80
 80063d4:	68d9      	ldr	r1, [r3, #12]
 80063d6:	d1f8      	bne.n	80063ca <_reclaim_reent+0x8a>
 80063d8:	4620      	mov	r0, r4
 80063da:	f000 f819 	bl	8006410 <_free_r>
 80063de:	e7ba      	b.n	8006356 <_reclaim_reent+0x16>
 80063e0:	680e      	ldr	r6, [r1, #0]
 80063e2:	4620      	mov	r0, r4
 80063e4:	f000 f814 	bl	8006410 <_free_r>
 80063e8:	4631      	mov	r1, r6
 80063ea:	e7ef      	b.n	80063cc <_reclaim_reent+0x8c>
 80063ec:	2500      	movs	r5, #0
 80063ee:	e7ef      	b.n	80063d0 <_reclaim_reent+0x90>
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	bf00      	nop
 80063f4:	20000010 	.word	0x20000010

080063f8 <__malloc_lock>:
 80063f8:	4801      	ldr	r0, [pc, #4]	; (8006400 <__malloc_lock+0x8>)
 80063fa:	f7ff bf7b 	b.w	80062f4 <__retarget_lock_acquire_recursive>
 80063fe:	bf00      	nop
 8006400:	20004f94 	.word	0x20004f94

08006404 <__malloc_unlock>:
 8006404:	4801      	ldr	r0, [pc, #4]	; (800640c <__malloc_unlock+0x8>)
 8006406:	f7ff bf76 	b.w	80062f6 <__retarget_lock_release_recursive>
 800640a:	bf00      	nop
 800640c:	20004f94 	.word	0x20004f94

08006410 <_free_r>:
 8006410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006412:	2900      	cmp	r1, #0
 8006414:	d048      	beq.n	80064a8 <_free_r+0x98>
 8006416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800641a:	9001      	str	r0, [sp, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	f1a1 0404 	sub.w	r4, r1, #4
 8006422:	bfb8      	it	lt
 8006424:	18e4      	addlt	r4, r4, r3
 8006426:	f7ff ffe7 	bl	80063f8 <__malloc_lock>
 800642a:	4a20      	ldr	r2, [pc, #128]	; (80064ac <_free_r+0x9c>)
 800642c:	9801      	ldr	r0, [sp, #4]
 800642e:	6813      	ldr	r3, [r2, #0]
 8006430:	4615      	mov	r5, r2
 8006432:	b933      	cbnz	r3, 8006442 <_free_r+0x32>
 8006434:	6063      	str	r3, [r4, #4]
 8006436:	6014      	str	r4, [r2, #0]
 8006438:	b003      	add	sp, #12
 800643a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800643e:	f7ff bfe1 	b.w	8006404 <__malloc_unlock>
 8006442:	42a3      	cmp	r3, r4
 8006444:	d90b      	bls.n	800645e <_free_r+0x4e>
 8006446:	6821      	ldr	r1, [r4, #0]
 8006448:	1862      	adds	r2, r4, r1
 800644a:	4293      	cmp	r3, r2
 800644c:	bf04      	itt	eq
 800644e:	681a      	ldreq	r2, [r3, #0]
 8006450:	685b      	ldreq	r3, [r3, #4]
 8006452:	6063      	str	r3, [r4, #4]
 8006454:	bf04      	itt	eq
 8006456:	1852      	addeq	r2, r2, r1
 8006458:	6022      	streq	r2, [r4, #0]
 800645a:	602c      	str	r4, [r5, #0]
 800645c:	e7ec      	b.n	8006438 <_free_r+0x28>
 800645e:	461a      	mov	r2, r3
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b10b      	cbz	r3, 8006468 <_free_r+0x58>
 8006464:	42a3      	cmp	r3, r4
 8006466:	d9fa      	bls.n	800645e <_free_r+0x4e>
 8006468:	6811      	ldr	r1, [r2, #0]
 800646a:	1855      	adds	r5, r2, r1
 800646c:	42a5      	cmp	r5, r4
 800646e:	d10b      	bne.n	8006488 <_free_r+0x78>
 8006470:	6824      	ldr	r4, [r4, #0]
 8006472:	4421      	add	r1, r4
 8006474:	1854      	adds	r4, r2, r1
 8006476:	42a3      	cmp	r3, r4
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	d1dd      	bne.n	8006438 <_free_r+0x28>
 800647c:	681c      	ldr	r4, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	6053      	str	r3, [r2, #4]
 8006482:	4421      	add	r1, r4
 8006484:	6011      	str	r1, [r2, #0]
 8006486:	e7d7      	b.n	8006438 <_free_r+0x28>
 8006488:	d902      	bls.n	8006490 <_free_r+0x80>
 800648a:	230c      	movs	r3, #12
 800648c:	6003      	str	r3, [r0, #0]
 800648e:	e7d3      	b.n	8006438 <_free_r+0x28>
 8006490:	6825      	ldr	r5, [r4, #0]
 8006492:	1961      	adds	r1, r4, r5
 8006494:	428b      	cmp	r3, r1
 8006496:	bf04      	itt	eq
 8006498:	6819      	ldreq	r1, [r3, #0]
 800649a:	685b      	ldreq	r3, [r3, #4]
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	bf04      	itt	eq
 80064a0:	1949      	addeq	r1, r1, r5
 80064a2:	6021      	streq	r1, [r4, #0]
 80064a4:	6054      	str	r4, [r2, #4]
 80064a6:	e7c7      	b.n	8006438 <_free_r+0x28>
 80064a8:	b003      	add	sp, #12
 80064aa:	bd30      	pop	{r4, r5, pc}
 80064ac:	20004a68 	.word	0x20004a68

080064b0 <_init>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	bf00      	nop
 80064b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b6:	bc08      	pop	{r3}
 80064b8:	469e      	mov	lr, r3
 80064ba:	4770      	bx	lr

080064bc <_fini>:
 80064bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064be:	bf00      	nop
 80064c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064c2:	bc08      	pop	{r3}
 80064c4:	469e      	mov	lr, r3
 80064c6:	4770      	bx	lr
