
amr_f429zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f08  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080070b8  080070b8  000170b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007210  08007210  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007218  08007218  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007218  08007218  00017218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004f38  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004fac  20004fac  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024215  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044e6  00000000  00000000  000442b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001880  00000000  00000000  000487a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016d8  00000000  00000000  0004a020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287b9  00000000  00000000  0004b6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d039  00000000  00000000  00073eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef86d  00000000  00000000  00090eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00180757  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bb8  00000000  00000000  001807ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080070a0 	.word	0x080070a0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080070a0 	.word	0x080070a0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <MX_ETH_Init+0x78>)
 800059e:	4a1d      	ldr	r2, [pc, #116]	; (8000614 <MX_ETH_Init+0x7c>)
 80005a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_ETH_Init+0x78>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_ETH_Init+0x78>)
 80005aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ae:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_ETH_Init+0x78>)
 80005b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b6:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <MX_ETH_Init+0x78>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MX_ETH_Init+0x80>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_ETH_Init+0x80>)
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_ETH_Init+0x80>)
 80005cc:	22e1      	movs	r2, #225	; 0xe1
 80005ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005d0:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_ETH_Init+0x80>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <MX_ETH_Init+0x80>)
 80005d8:	2200      	movs	r2, #0
 80005da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80005dc:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_ETH_Init+0x80>)
 80005de:	2200      	movs	r2, #0
 80005e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <MX_ETH_Init+0x78>)
 80005e4:	4a0c      	ldr	r2, [pc, #48]	; (8000618 <MX_ETH_Init+0x80>)
 80005e6:	615a      	str	r2, [r3, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80005e8:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_ETH_Init+0x78>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_ETH_Init+0x78>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_ETH_Init+0x78>)
 80005f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80005fa:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_ETH_Init+0x78>)
 80005fe:	f000 fe19 	bl	8001234 <HAL_ETH_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000608:	f000 fa78 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20004a74 	.word	0x20004a74
 8000614:	40028000 	.word	0x40028000
 8000618:	20000090 	.word	0x20000090

0800061c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08e      	sub	sp, #56	; 0x38
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a55      	ldr	r2, [pc, #340]	; (8000790 <HAL_ETH_MspInit+0x174>)
 800063a:	4293      	cmp	r3, r2
 800063c:	f040 80a4 	bne.w	8000788 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	623b      	str	r3, [r7, #32]
 8000644:	4b53      	ldr	r3, [pc, #332]	; (8000794 <HAL_ETH_MspInit+0x178>)
 8000646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000648:	4a52      	ldr	r2, [pc, #328]	; (8000794 <HAL_ETH_MspInit+0x178>)
 800064a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
 8000650:	4b50      	ldr	r3, [pc, #320]	; (8000794 <HAL_ETH_MspInit+0x178>)
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000658:	623b      	str	r3, [r7, #32]
 800065a:	6a3b      	ldr	r3, [r7, #32]
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
 8000660:	4b4c      	ldr	r3, [pc, #304]	; (8000794 <HAL_ETH_MspInit+0x178>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	4a4b      	ldr	r2, [pc, #300]	; (8000794 <HAL_ETH_MspInit+0x178>)
 8000666:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800066a:	6313      	str	r3, [r2, #48]	; 0x30
 800066c:	4b49      	ldr	r3, [pc, #292]	; (8000794 <HAL_ETH_MspInit+0x178>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000674:	61fb      	str	r3, [r7, #28]
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	2300      	movs	r3, #0
 800067a:	61bb      	str	r3, [r7, #24]
 800067c:	4b45      	ldr	r3, [pc, #276]	; (8000794 <HAL_ETH_MspInit+0x178>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	4a44      	ldr	r2, [pc, #272]	; (8000794 <HAL_ETH_MspInit+0x178>)
 8000682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000686:	6313      	str	r3, [r2, #48]	; 0x30
 8000688:	4b42      	ldr	r3, [pc, #264]	; (8000794 <HAL_ETH_MspInit+0x178>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000690:	61bb      	str	r3, [r7, #24]
 8000692:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <HAL_ETH_MspInit+0x178>)
 800069a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069c:	4a3d      	ldr	r2, [pc, #244]	; (8000794 <HAL_ETH_MspInit+0x178>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6313      	str	r3, [r2, #48]	; 0x30
 80006a4:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_ETH_MspInit+0x178>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <HAL_ETH_MspInit+0x178>)
 80006b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b8:	4a36      	ldr	r2, [pc, #216]	; (8000794 <HAL_ETH_MspInit+0x178>)
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	6313      	str	r3, [r2, #48]	; 0x30
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ETH_MspInit+0x178>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	f003 0301 	and.w	r3, r3, #1
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <HAL_ETH_MspInit+0x178>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	4a2f      	ldr	r2, [pc, #188]	; (8000794 <HAL_ETH_MspInit+0x178>)
 80006d6:	f043 0302 	orr.w	r3, r3, #2
 80006da:	6313      	str	r3, [r2, #48]	; 0x30
 80006dc:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <HAL_ETH_MspInit+0x178>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e0:	f003 0302 	and.w	r3, r3, #2
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b29      	ldr	r3, [pc, #164]	; (8000794 <HAL_ETH_MspInit+0x178>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	4a28      	ldr	r2, [pc, #160]	; (8000794 <HAL_ETH_MspInit+0x178>)
 80006f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006f6:	6313      	str	r3, [r2, #48]	; 0x30
 80006f8:	4b26      	ldr	r3, [pc, #152]	; (8000794 <HAL_ETH_MspInit+0x178>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000704:	2332      	movs	r3, #50	; 0x32
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000708:	2302      	movs	r3, #2
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000714:	230b      	movs	r3, #11
 8000716:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000718:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071c:	4619      	mov	r1, r3
 800071e:	481e      	ldr	r0, [pc, #120]	; (8000798 <HAL_ETH_MspInit+0x17c>)
 8000720:	f001 f9f4 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000724:	2386      	movs	r3, #134	; 0x86
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000734:	230b      	movs	r3, #11
 8000736:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	4619      	mov	r1, r3
 800073e:	4817      	ldr	r0, [pc, #92]	; (800079c <HAL_ETH_MspInit+0x180>)
 8000740:	f001 f9e4 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000756:	230b      	movs	r3, #11
 8000758:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075e:	4619      	mov	r1, r3
 8000760:	480f      	ldr	r0, [pc, #60]	; (80007a0 <HAL_ETH_MspInit+0x184>)
 8000762:	f001 f9d3 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000766:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076c:	2302      	movs	r3, #2
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000774:	2303      	movs	r3, #3
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000778:	230b      	movs	r3, #11
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800077c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000780:	4619      	mov	r1, r3
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <HAL_ETH_MspInit+0x188>)
 8000784:	f001 f9c2 	bl	8001b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000788:	bf00      	nop
 800078a:	3738      	adds	r7, #56	; 0x38
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40028000 	.word	0x40028000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020800 	.word	0x40020800
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40021800 	.word	0x40021800

080007a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80007ac:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <MX_FREERTOS_Init+0x28>)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4808      	ldr	r0, [pc, #32]	; (80007d4 <MX_FREERTOS_Init+0x2c>)
 80007b2:	f003 fa7d 	bl	8003cb0 <osThreadNew>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4a07      	ldr	r2, [pc, #28]	; (80007d8 <MX_FREERTOS_Init+0x30>)
 80007ba:	6013      	str	r3, [r2, #0]

  /* creation of StickTask */
  StickTaskHandle = osThreadNew(StickStatusTask, NULL, &StickTask_attributes);
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <MX_FREERTOS_Init+0x34>)
 80007be:	2100      	movs	r1, #0
 80007c0:	4807      	ldr	r0, [pc, #28]	; (80007e0 <MX_FREERTOS_Init+0x38>)
 80007c2:	f003 fa75 	bl	8003cb0 <osThreadNew>
 80007c6:	4603      	mov	r3, r0
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <MX_FREERTOS_Init+0x3c>)
 80007ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	0800711c 	.word	0x0800711c
 80007d4:	080007e9 	.word	0x080007e9
 80007d8:	20004abc 	.word	0x20004abc
 80007dc:	08007140 	.word	0x08007140
 80007e0:	080007f9 	.word	0x080007f9
 80007e4:	20004ac0 	.word	0x20004ac0

080007e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f003 faef 	bl	8003dd4 <osDelay>
 80007f6:	e7fb      	b.n	80007f0 <StartDefaultTask+0x8>

080007f8 <StickStatusTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StickStatusTask */
void StickStatusTask(void *argument)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	GPIO_PinState X_Status, Y_Status, Z_Status;

	X_Status = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);
 8000800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <StickStatusTask+0x58>)
 8000806:	f001 fb2d 	bl	8001e64 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	73fb      	strb	r3, [r7, #15]
	Y_Status = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);
 800080e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000812:	480f      	ldr	r0, [pc, #60]	; (8000850 <StickStatusTask+0x58>)
 8000814:	f001 fb26 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	73bb      	strb	r3, [r7, #14]
	Z_Status = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);
 800081c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000820:	480b      	ldr	r0, [pc, #44]	; (8000850 <StickStatusTask+0x58>)
 8000822:	f001 fb1f 	bl	8001e64 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	737b      	strb	r3, [r7, #13]
	User_Printf("X Axis : %s", X_Status);
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	4619      	mov	r1, r3
 800082e:	4809      	ldr	r0, [pc, #36]	; (8000854 <StickStatusTask+0x5c>)
 8000830:	f000 fb7c 	bl	8000f2c <User_Printf>
	User_Printf("Y Axis : %s", Y_Status);
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	4619      	mov	r1, r3
 8000838:	4807      	ldr	r0, [pc, #28]	; (8000858 <StickStatusTask+0x60>)
 800083a:	f000 fb77 	bl	8000f2c <User_Printf>
	User_Printf("Z Axis : %s", Z_Status);
 800083e:	7b7b      	ldrb	r3, [r7, #13]
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <StickStatusTask+0x64>)
 8000844:	f000 fb72 	bl	8000f2c <User_Printf>
	osDelay(1);
 8000848:	2001      	movs	r0, #1
 800084a:	f003 fac3 	bl	8003dd4 <osDelay>
  {
 800084e:	e7d7      	b.n	8000800 <StickStatusTask+0x8>
 8000850:	40020c00 	.word	0x40020c00
 8000854:	080070d0 	.word	0x080070d0
 8000858:	080070dc 	.word	0x080070dc
 800085c:	080070e8 	.word	0x080070e8

08000860 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08c      	sub	sp, #48	; 0x30
 8000864:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	4b52      	ldr	r3, [pc, #328]	; (80009c4 <MX_GPIO_Init+0x164>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a51      	ldr	r2, [pc, #324]	; (80009c4 <MX_GPIO_Init+0x164>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b4f      	ldr	r3, [pc, #316]	; (80009c4 <MX_GPIO_Init+0x164>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
 8000890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	4b4b      	ldr	r3, [pc, #300]	; (80009c4 <MX_GPIO_Init+0x164>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a4a      	ldr	r2, [pc, #296]	; (80009c4 <MX_GPIO_Init+0x164>)
 800089c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b48      	ldr	r3, [pc, #288]	; (80009c4 <MX_GPIO_Init+0x164>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	4b44      	ldr	r3, [pc, #272]	; (80009c4 <MX_GPIO_Init+0x164>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a43      	ldr	r2, [pc, #268]	; (80009c4 <MX_GPIO_Init+0x164>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b41      	ldr	r3, [pc, #260]	; (80009c4 <MX_GPIO_Init+0x164>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <MX_GPIO_Init+0x164>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a3c      	ldr	r2, [pc, #240]	; (80009c4 <MX_GPIO_Init+0x164>)
 80008d4:	f043 0302 	orr.w	r3, r3, #2
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b3a      	ldr	r3, [pc, #232]	; (80009c4 <MX_GPIO_Init+0x164>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0302 	and.w	r3, r3, #2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <MX_GPIO_Init+0x164>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a35      	ldr	r2, [pc, #212]	; (80009c4 <MX_GPIO_Init+0x164>)
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b33      	ldr	r3, [pc, #204]	; (80009c4 <MX_GPIO_Init+0x164>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0308 	and.w	r3, r3, #8
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <MX_GPIO_Init+0x164>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a2e      	ldr	r2, [pc, #184]	; (80009c4 <MX_GPIO_Init+0x164>)
 800090c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <MX_GPIO_Init+0x164>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f244 0181 	movw	r1, #16513	; 0x4081
 8000924:	4828      	ldr	r0, [pc, #160]	; (80009c8 <MX_GPIO_Init+0x168>)
 8000926:	f001 fab5 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2140      	movs	r1, #64	; 0x40
 800092e:	4827      	ldr	r0, [pc, #156]	; (80009cc <MX_GPIO_Init+0x16c>)
 8000930:	f001 fab0 	bl	8001e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	4821      	ldr	r0, [pc, #132]	; (80009d0 <MX_GPIO_Init+0x170>)
 800094c:	f001 f8de 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000950:	f244 0381 	movw	r3, #16513	; 0x4081
 8000954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4817      	ldr	r0, [pc, #92]	; (80009c8 <MX_GPIO_Init+0x168>)
 800096a:	f001 f8cf 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = xAxis_Pin|yAxis_Pin|zAxis_Pin;
 800096e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4814      	ldr	r0, [pc, #80]	; (80009d4 <MX_GPIO_Init+0x174>)
 8000984:	f001 f8c2 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000988:	2340      	movs	r3, #64	; 0x40
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	2300      	movs	r3, #0
 8000996:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <MX_GPIO_Init+0x16c>)
 80009a0:	f001 f8b4 	bl	8001b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4805      	ldr	r0, [pc, #20]	; (80009cc <MX_GPIO_Init+0x16c>)
 80009b8:	f001 f8a8 	bl	8001b0c <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3730      	adds	r7, #48	; 0x30
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40021800 	.word	0x40021800
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 fae2 	bl	8000fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f810 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff ff3c 	bl	8000860 <MX_GPIO_Init>
  MX_ETH_Init();
 80009e8:	f7ff fdd6 	bl	8000598 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009ec:	f000 f980 	bl	8000cf0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009f0:	f000 f9f0 	bl	8000dd4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80009f4:	f003 f912 	bl	8003c1c <osKernelInitialize>
  MX_FREERTOS_Init();
 80009f8:	f7ff fed6 	bl	80007a8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80009fc:	f003 f932 	bl	8003c64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <main+0x28>
	...

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	; 0x50
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	2230      	movs	r2, #48	; 0x30
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f005 feb4 	bl	8006780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <SystemClock_Config+0xcc>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a27      	ldr	r2, [pc, #156]	; (8000ad0 <SystemClock_Config+0xcc>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <SystemClock_Config+0xcc>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a64:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a74:	2304      	movs	r3, #4
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a78:	23a8      	movs	r3, #168	; 0xa8
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a80:	2307      	movs	r3, #7
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 fb39 	bl	8002100 <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a94:	f000 f832 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2105      	movs	r1, #5
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fd9a 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ac2:	f000 f81b 	bl	8000afc <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	; 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d101      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aea:	f000 fa7d 	bl	8000fe8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40010000 	.word	0x40010000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  User_Printf("error detected");
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <Error_Handler+0x14>)
 8000b06:	f000 fa11 	bl	8000f2c <User_Printf>

  /* USER CODE END Error_Handler_Debug */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	080070f4 	.word	0x080070f4

08000b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <HAL_MspInit+0x54>)
 8000b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b22:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <HAL_MspInit+0x54>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2a:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <HAL_MspInit+0x54>)
 8000b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_MspInit+0x54>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <HAL_MspInit+0x54>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <HAL_MspInit+0x54>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	210f      	movs	r1, #15
 8000b56:	f06f 0001 	mvn.w	r0, #1
 8000b5a:	f000 fb41 	bl	80011e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800

08000b6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	; 0x30
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	2019      	movs	r0, #25
 8000b82:	f000 fb2d 	bl	80011e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b86:	2019      	movs	r0, #25
 8000b88:	f000 fb46 	bl	8001218 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	4b1f      	ldr	r3, [pc, #124]	; (8000c10 <HAL_InitTick+0xa4>)
 8000b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b94:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <HAL_InitTick+0xa4>)
 8000b96:	f043 0301 	orr.w	r3, r3, #1
 8000b9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <HAL_InitTick+0xa4>)
 8000b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ba8:	f107 0210 	add.w	r2, r7, #16
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f001 ff18 	bl	80029e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bb8:	f001 ff02 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc4:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <HAL_InitTick+0xa8>)
 8000bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bca:	0c9b      	lsrs	r3, r3, #18
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_InitTick+0xac>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <HAL_InitTick+0xb0>)
 8000bd4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_InitTick+0xac>)
 8000bd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bdc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_InitTick+0xac>)
 8000be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_InitTick+0xac>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_InitTick+0xac>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000bf0:	4809      	ldr	r0, [pc, #36]	; (8000c18 <HAL_InitTick+0xac>)
 8000bf2:	f001 ff2b 	bl	8002a4c <HAL_TIM_Base_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d104      	bne.n	8000c06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000bfc:	4806      	ldr	r0, [pc, #24]	; (8000c18 <HAL_InitTick+0xac>)
 8000bfe:	f001 ff7f 	bl	8002b00 <HAL_TIM_Base_Start_IT>
 8000c02:	4603      	mov	r3, r0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3730      	adds	r7, #48	; 0x30
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	20004ac4 	.word	0x20004ac4
 8000c1c:	40010000 	.word	0x40010000

08000c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <NMI_Handler+0x4>

08000c26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <MemManage_Handler+0x4>

08000c32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c52:	f001 ffc5 	bl	8002be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20004ac4 	.word	0x20004ac4

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f005 fd3c 	bl	800670c <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20030000 	.word	0x20030000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	20000098 	.word	0x20000098
 8000cc8:	20004fb0 	.word	0x20004fb0

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <MX_USART3_UART_Init+0x50>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USART3_UART_Init+0x4c>)
 8000d28:	f002 f93e 	bl	8002fa8 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d32:	f7ff fee3 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20004b0c 	.word	0x20004b0c
 8000d40:	40004800 	.word	0x40004800

08000d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a19      	ldr	r2, [pc, #100]	; (8000dc8 <HAL_UART_MspInit+0x84>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d12c      	bne.n	8000dc0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <HAL_UART_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db0:	2307      	movs	r3, #7
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <HAL_UART_MspInit+0x8c>)
 8000dbc:	f000 fea6 	bl	8001b0c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40004800 	.word	0x40004800
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020c00 	.word	0x40020c00

08000dd4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de8:	2202      	movs	r2, #2
 8000dea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df4:	2202      	movs	r2, #2
 8000df6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e18:	f001 f855 	bl	8001ec6 <HAL_PCD_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e22:	f7ff fe6b 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20004b50 	.word	0x20004b50

08000e30 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e50:	d13f      	bne.n	8000ed2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <HAL_PCD_MspInit+0xac>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a20      	ldr	r2, [pc, #128]	; (8000edc <HAL_PCD_MspInit+0xac>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <HAL_PCD_MspInit+0xac>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e80:	230a      	movs	r3, #10
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4815      	ldr	r0, [pc, #84]	; (8000ee0 <HAL_PCD_MspInit+0xb0>)
 8000e8c:	f000 fe3e 	bl	8001b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <HAL_PCD_MspInit+0xb0>)
 8000ea6:	f000 fe31 	bl	8001b0c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_PCD_MspInit+0xac>)
 8000eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_PCD_MspInit+0xac>)
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	6353      	str	r3, [r2, #52]	; 0x34
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_PCD_MspInit+0xac>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_PCD_MspInit+0xac>)
 8000ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_PCD_MspInit+0xac>)
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000

08000ee4 <vprint>:

#include "user_func.h"
#include "main.h"
#include "usart.h"

void vprint(const char *fmt, va_list argp) {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0b4      	sub	sp, #208	; 0xd0
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	char string[200];
	if (0 < vsprintf(string, fmt, argp))
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f005 fd34 	bl	8006964 <vsiprintf>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	dd0d      	ble.n	8000f1e <vprint+0x3a>
			{
		HAL_UART_Transmit(&huart3, (uint8_t*) string, strlen(string), 0xffffff);
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff f972 	bl	80001f0 <strlen>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	f107 0108 	add.w	r1, r7, #8
 8000f14:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <vprint+0x44>)
 8000f1a:	f002 f892 	bl	8003042 <HAL_UART_Transmit>
	}
}
 8000f1e:	bf00      	nop
 8000f20:	37d0      	adds	r7, #208	; 0xd0
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20004b0c 	.word	0x20004b0c

08000f2c <User_Printf>:
 * Function Description : User_Printf message will logged Console.
 *
 */

void User_Printf(const char *fmt, ...)
{
 8000f2c:	b40f      	push	{r0, r1, r2, r3}
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
	va_list argp;
	va_start(argp, fmt);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	607b      	str	r3, [r7, #4]
	vprint(fmt, argp);
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	6938      	ldr	r0, [r7, #16]
 8000f3e:	f7ff ffd1 	bl	8000ee4 <vprint>
	va_end(argp);
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f4c:	b004      	add	sp, #16
 8000f4e:	4770      	bx	lr

08000f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f88 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f58:	4a0e      	ldr	r2, [pc, #56]	; (8000f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f6c:	4c0b      	ldr	r4, [pc, #44]	; (8000f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f7a:	f7ff fea7 	bl	8000ccc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7e:	f005 fbcb 	bl	8006718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f82:	f7ff fd29 	bl	80009d8 <main>
  bx  lr    
 8000f86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f88:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f94:	08007220 	.word	0x08007220
  ldr r2, =_sbss
 8000f98:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f9c:	20004fac 	.word	0x20004fac

08000fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa0:	e7fe      	b.n	8000fa0 <ADC_IRQHandler>
	...

08000fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <HAL_Init+0x40>)
 8000fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_Init+0x40>)
 8000fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc0:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_Init+0x40>)
 8000fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fcc:	2003      	movs	r0, #3
 8000fce:	f000 f8fc 	bl	80011ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f7ff fdca 	bl	8000b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd8:	f7ff fd9c 	bl	8000b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023c00 	.word	0x40023c00

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000008 	.word	0x20000008
 800100c:	20004f58 	.word	0x20004f58

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20004f58 	.word	0x20004f58

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff ffee 	bl	8001010 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffde 	bl	8001010 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000008 	.word	0x20000008

08001070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001086:	68ba      	ldr	r2, [r7, #8]
 8001088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800108c:	4013      	ands	r3, r2
 800108e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800109c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <__NVIC_GetPriorityGrouping+0x18>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	0a1b      	lsrs	r3, r3, #8
 80010c2:	f003 0307 	and.w	r3, r3, #7
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db0b      	blt.n	80010fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 021f 	and.w	r2, r3, #31
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <__NVIC_EnableIRQ+0x38>)
 80010ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	2001      	movs	r0, #1
 80010f6:	fa00 f202 	lsl.w	r2, r0, r2
 80010fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000e100 	.word	0xe000e100

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001120:	2b00      	cmp	r3, #0
 8001122:	db0a      	blt.n	800113a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	b2da      	uxtb	r2, r3
 8001128:	490c      	ldr	r1, [pc, #48]	; (800115c <__NVIC_SetPriority+0x4c>)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	0112      	lsls	r2, r2, #4
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	440b      	add	r3, r1
 8001134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001138:	e00a      	b.n	8001150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	b2da      	uxtb	r2, r3
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <__NVIC_SetPriority+0x50>)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	3b04      	subs	r3, #4
 8001148:	0112      	lsls	r2, r2, #4
 800114a:	b2d2      	uxtb	r2, r2
 800114c:	440b      	add	r3, r1
 800114e:	761a      	strb	r2, [r3, #24]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000e100 	.word	0xe000e100
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	f1c3 0307 	rsb	r3, r3, #7
 800117e:	2b04      	cmp	r3, #4
 8001180:	bf28      	it	cs
 8001182:	2304      	movcs	r3, #4
 8001184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3304      	adds	r3, #4
 800118a:	2b06      	cmp	r3, #6
 800118c:	d902      	bls.n	8001194 <NVIC_EncodePriority+0x30>
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3b03      	subs	r3, #3
 8001192:	e000      	b.n	8001196 <NVIC_EncodePriority+0x32>
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	f04f 32ff 	mov.w	r2, #4294967295
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	401a      	ands	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ac:	f04f 31ff 	mov.w	r1, #4294967295
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa01 f303 	lsl.w	r3, r1, r3
 80011b6:	43d9      	mvns	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	4313      	orrs	r3, r2
         );
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff4c 	bl	8001070 <__NVIC_SetPriorityGrouping>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f2:	f7ff ff61 	bl	80010b8 <__NVIC_GetPriorityGrouping>
 80011f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff ffb1 	bl	8001164 <NVIC_EncodePriority>
 8001202:	4602      	mov	r2, r0
 8001204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff80 	bl	8001110 <__NVIC_SetPriority>
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ff54 	bl	80010d4 <__NVIC_EnableIRQ>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800123c:	2300      	movs	r3, #0
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	2300      	movs	r3, #0
 8001242:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001244:	4baa      	ldr	r3, [pc, #680]	; (80014f0 <HAL_ETH_Init+0x2bc>)
 8001246:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800124c:	2300      	movs	r3, #0
 800124e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d101      	bne.n	800125a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e183      	b.n	8001562 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001260:	b2db      	uxtb	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	d106      	bne.n	8001274 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff f9d4 	bl	800061c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b9e      	ldr	r3, [pc, #632]	; (80014f4 <HAL_ETH_Init+0x2c0>)
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	4a9d      	ldr	r2, [pc, #628]	; (80014f4 <HAL_ETH_Init+0x2c0>)
 800127e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001282:	6453      	str	r3, [r2, #68]	; 0x44
 8001284:	4b9b      	ldr	r3, [pc, #620]	; (80014f4 <HAL_ETH_Init+0x2c0>)
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001290:	4b99      	ldr	r3, [pc, #612]	; (80014f8 <HAL_ETH_Init+0x2c4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	4a98      	ldr	r2, [pc, #608]	; (80014f8 <HAL_ETH_Init+0x2c4>)
 8001296:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800129a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800129c:	4b96      	ldr	r3, [pc, #600]	; (80014f8 <HAL_ETH_Init+0x2c4>)
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4994      	ldr	r1, [pc, #592]	; (80014f8 <HAL_ETH_Init+0x2c4>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80012c2:	f7ff fea5 	bl	8001010 <HAL_GetTick>
 80012c6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012c8:	e011      	b.n	80012ee <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80012ca:	f7ff fea1 	bl	8001010 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012d8:	d909      	bls.n	80012ee <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2203      	movs	r2, #3
 80012de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e139      	b.n	8001562 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0301 	and.w	r3, r3, #1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1e4      	bne.n	80012ca <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	691b      	ldr	r3, [r3, #16]
 8001306:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f023 031c 	bic.w	r3, r3, #28
 800130e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001310:	f001 fb36 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 8001314:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4a78      	ldr	r2, [pc, #480]	; (80014fc <HAL_ETH_Init+0x2c8>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d908      	bls.n	8001330 <HAL_ETH_Init+0xfc>
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4a77      	ldr	r2, [pc, #476]	; (8001500 <HAL_ETH_Init+0x2cc>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d804      	bhi.n	8001330 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	e027      	b.n	8001380 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	4a73      	ldr	r2, [pc, #460]	; (8001500 <HAL_ETH_Init+0x2cc>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d908      	bls.n	800134a <HAL_ETH_Init+0x116>
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	4a6d      	ldr	r2, [pc, #436]	; (80014f0 <HAL_ETH_Init+0x2bc>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d204      	bcs.n	800134a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f043 030c 	orr.w	r3, r3, #12
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	e01a      	b.n	8001380 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	4a68      	ldr	r2, [pc, #416]	; (80014f0 <HAL_ETH_Init+0x2bc>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d303      	bcc.n	800135a <HAL_ETH_Init+0x126>
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4a6b      	ldr	r2, [pc, #428]	; (8001504 <HAL_ETH_Init+0x2d0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d911      	bls.n	800137e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4a69      	ldr	r2, [pc, #420]	; (8001504 <HAL_ETH_Init+0x2d0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d908      	bls.n	8001374 <HAL_ETH_Init+0x140>
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4a68      	ldr	r2, [pc, #416]	; (8001508 <HAL_ETH_Init+0x2d4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d804      	bhi.n	8001374 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	e005      	b.n	8001380 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	e000      	b.n	8001380 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800137e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001388:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800138c:	2100      	movs	r1, #0
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f954 	bl	800163c <HAL_ETH_WritePHYRegister>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d00b      	beq.n	80013b2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800139e:	6939      	ldr	r1, [r7, #16]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f9b1 	bl	8001708 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0d7      	b.n	8001562 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80013b2:	20ff      	movs	r0, #255	; 0xff
 80013b4:	f7ff fe38 	bl	8001028 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	f000 80a5 	beq.w	800150c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80013c2:	f7ff fe25 	bl	8001010 <HAL_GetTick>
 80013c6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	461a      	mov	r2, r3
 80013ce:	2101      	movs	r1, #1
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f8cb 	bl	800156c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80013d6:	f7ff fe1b 	bl	8001010 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d90f      	bls.n	8001408 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80013ec:	6939      	ldr	r1, [r7, #16]
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f98a 	bl	8001708 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e0ac      	b.n	8001562 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0da      	beq.n	80013c8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001416:	2100      	movs	r1, #0
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f90f 	bl	800163c <HAL_ETH_WritePHYRegister>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00b      	beq.n	800143c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001428:	6939      	ldr	r1, [r7, #16]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f96c 	bl	8001708 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001438:	2301      	movs	r3, #1
 800143a:	e092      	b.n	8001562 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800143c:	f7ff fde8 	bl	8001010 <HAL_GetTick>
 8001440:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	461a      	mov	r2, r3
 8001448:	2101      	movs	r1, #1
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f88e 	bl	800156c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001450:	f7ff fdde 	bl	8001010 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d90f      	bls.n	8001482 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001466:	6939      	ldr	r1, [r7, #16]
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f94d 	bl	8001708 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e06f      	b.n	8001562 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f003 0320 	and.w	r3, r3, #32
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0da      	beq.n	8001442 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	461a      	mov	r2, r3
 8001492:	2110      	movs	r1, #16
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f869 	bl	800156c <HAL_ETH_ReadPHYRegister>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80014a4:	6939      	ldr	r1, [r7, #16]
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f92e 	bl	8001708 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80014b4:	2301      	movs	r3, #1
 80014b6:	e054      	b.n	8001562 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	e002      	b.n	80014d2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	e035      	b.n	8001550 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	e030      	b.n	8001550 <HAL_ETH_Init+0x31c>
 80014ee:	bf00      	nop
 80014f0:	03938700 	.word	0x03938700
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40013800 	.word	0x40013800
 80014fc:	01312cff 	.word	0x01312cff
 8001500:	02160ebf 	.word	0x02160ebf
 8001504:	05f5e0ff 	.word	0x05f5e0ff
 8001508:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	085b      	lsrs	r3, r3, #1
 800151a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800151c:	4313      	orrs	r3, r2
 800151e:	b29b      	uxth	r3, r3
 8001520:	461a      	mov	r2, r3
 8001522:	2100      	movs	r1, #0
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f889 	bl	800163c <HAL_ETH_WritePHYRegister>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001534:	6939      	ldr	r1, [r7, #16]
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f8e6 	bl	8001708 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e00c      	b.n	8001562 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001548:	f640 70ff 	movw	r0, #4095	; 0xfff
 800154c:	f7ff fd6c 	bl	8001028 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001550:	6939      	ldr	r1, [r7, #16]
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f8d8 	bl	8001708 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop

0800156c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	460b      	mov	r3, r1
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b82      	cmp	r3, #130	; 0x82
 800158c:	d101      	bne.n	8001592 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800158e:	2302      	movs	r3, #2
 8001590:	e050      	b.n	8001634 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2282      	movs	r2, #130	; 0x82
 8001596:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f003 031c 	and.w	r3, r3, #28
 80015a8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8a1b      	ldrh	r3, [r3, #16]
 80015ae:	02db      	lsls	r3, r3, #11
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80015b8:	897b      	ldrh	r3, [r7, #10]
 80015ba:	019b      	lsls	r3, r3, #6
 80015bc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f023 0302 	bic.w	r3, r3, #2
 80015cc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015de:	f7ff fd17 	bl	8001010 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015e4:	e015      	b.n	8001612 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80015e6:	f7ff fd13 	bl	8001010 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d309      	bcc.n	800160a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2201      	movs	r2, #1
 80015fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e014      	b.n	8001634 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e4      	bne.n	80015e6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	3718      	adds	r7, #24
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	460b      	mov	r3, r1
 8001646:	607a      	str	r2, [r7, #4]
 8001648:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b42      	cmp	r3, #66	; 0x42
 800165c:	d101      	bne.n	8001662 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800165e:	2302      	movs	r3, #2
 8001660:	e04e      	b.n	8001700 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	2242      	movs	r2, #66	; 0x42
 8001666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f003 031c 	and.w	r3, r3, #28
 8001678:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8a1b      	ldrh	r3, [r3, #16]
 800167e:	02db      	lsls	r3, r3, #11
 8001680:	b29b      	uxth	r3, r3
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4313      	orrs	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001688:	897b      	ldrh	r3, [r7, #10]
 800168a:	019b      	lsls	r3, r3, #6
 800168c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	4313      	orrs	r3, r2
 8001694:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80016b8:	f7ff fcaa 	bl	8001010 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016be:	e015      	b.n	80016ec <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80016c0:	f7ff fca6 	bl	8001010 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ce:	d309      	bcc.n	80016e4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e00d      	b.n	8001700 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1e4      	bne.n	80016c0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b0b0      	sub	sp, #192	; 0xc0
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001724:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800172c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001736:	2300      	movs	r3, #0
 8001738:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800173a:	2300      	movs	r3, #0
 800173c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800174e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001752:	663b      	str	r3, [r7, #96]	; 0x60
 8001754:	e001      	b.n	800175a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800175a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800175e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001764:	2300      	movs	r3, #0
 8001766:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001774:	2340      	movs	r3, #64	; 0x40
 8001776:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800179c:	2300      	movs	r3, #0
 800179e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80017a8:	2380      	movs	r3, #128	; 0x80
 80017aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017e0:	4bac      	ldr	r3, [pc, #688]	; (8001a94 <ETH_MACDMAConfig+0x38c>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80017e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80017ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80017ec:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80017ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80017f0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80017f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80017f4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80017fa:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80017fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80017fe:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001802:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001808:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800180a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800180c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800180e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001810:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001814:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001818:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800181a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800181c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800181e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001822:	4313      	orrs	r3, r2
 8001824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001830:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800183c:	2001      	movs	r0, #1
 800183e:	f7ff fbf3 	bl	8001028 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800184a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800184c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800184e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001850:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001854:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001856:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800185a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800185c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001860:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001866:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800186c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001870:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001878:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800187a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001886:	2001      	movs	r0, #1
 8001888:	f7ff fbce 	bl	8001028 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001894:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800189e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018a8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80018b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018b8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80018bc:	4013      	ands	r3, r2
 80018be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80018c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80018c6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80018c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80018cc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80018ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80018d2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80018d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80018d8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80018da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80018de:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80018e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80018e4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80018e6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018ea:	4313      	orrs	r3, r2
 80018ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018f8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001904:	2001      	movs	r0, #1
 8001906:	f7ff fb8f 	bl	8001028 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001912:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001914:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001918:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800192e:	2001      	movs	r0, #1
 8001930:	f7ff fb7a 	bl	8001028 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800193c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800193e:	2300      	movs	r3, #0
 8001940:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001946:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800194c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001950:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001952:	2300      	movs	r3, #0
 8001954:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001962:	2304      	movs	r3, #4
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001966:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800196c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800197c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001982:	2300      	movs	r3, #0
 8001984:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001986:	2300      	movs	r3, #0
 8001988:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001992:	3318      	adds	r3, #24
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800199a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800199e:	4b3e      	ldr	r3, [pc, #248]	; (8001a98 <ETH_MACDMAConfig+0x390>)
 80019a0:	4013      	ands	r3, r2
 80019a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80019a6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80019a8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80019aa:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80019ac:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80019ae:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80019b0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80019b2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80019b4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80019b6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80019b8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80019ba:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80019bc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80019be:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80019c2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80019c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80019c6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80019c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019cc:	4313      	orrs	r3, r2
 80019ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019da:	3318      	adds	r3, #24
 80019dc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80019e0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ea:	3318      	adds	r3, #24
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7ff fb18 	bl	8001028 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a00:	3318      	adds	r3, #24
 8001a02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a06:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a0c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001a10:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001a14:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001a18:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a1c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001a1e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001a22:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a30:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f7ff faf1 	bl	8001028 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a52:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d10f      	bne.n	8001a7c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a64:	331c      	adds	r3, #28
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a78:	331c      	adds	r3, #28
 8001a7a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	461a      	mov	r2, r3
 8001a82:	2100      	movs	r1, #0
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f809 	bl	8001a9c <ETH_MACAddressConfig>
}
 8001a8a:	bf00      	nop
 8001a8c:	37c0      	adds	r7, #192	; 0xc0
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	ff20810f 	.word	0xff20810f
 8001a98:	f8de3f23 	.word	0xf8de3f23

08001a9c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3305      	adds	r3, #5
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	3204      	adds	r2, #4
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <ETH_MACAddressConfig+0x68>)
 8001abe:	4413      	add	r3, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3303      	adds	r3, #3
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	061a      	lsls	r2, r3, #24
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	041b      	lsls	r3, r3, #16
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3301      	adds	r3, #1
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <ETH_MACAddressConfig+0x6c>)
 8001aee:	4413      	add	r3, r2
 8001af0:	461a      	mov	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	6013      	str	r3, [r2, #0]
}
 8001af6:	bf00      	nop
 8001af8:	371c      	adds	r7, #28
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40028040 	.word	0x40028040
 8001b08:	40028044 	.word	0x40028044

08001b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	e177      	b.n	8001e18 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	f040 8166 	bne.w	8001e12 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d005      	beq.n	8001b5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d130      	bne.n	8001bc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2203      	movs	r2, #3
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	68da      	ldr	r2, [r3, #12]
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b94:	2201      	movs	r2, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	f003 0201 	and.w	r2, r3, #1
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d017      	beq.n	8001bfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689a      	ldr	r2, [r3, #8]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d123      	bne.n	8001c50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	08da      	lsrs	r2, r3, #3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3208      	adds	r2, #8
 8001c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	08da      	lsrs	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3208      	adds	r2, #8
 8001c4a:	69b9      	ldr	r1, [r7, #24]
 8001c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0203 	and.w	r2, r3, #3
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 80c0 	beq.w	8001e12 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	4b66      	ldr	r3, [pc, #408]	; (8001e30 <HAL_GPIO_Init+0x324>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a65      	ldr	r2, [pc, #404]	; (8001e30 <HAL_GPIO_Init+0x324>)
 8001c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b63      	ldr	r3, [pc, #396]	; (8001e30 <HAL_GPIO_Init+0x324>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001caa:	60fb      	str	r3, [r7, #12]
 8001cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cae:	4a61      	ldr	r2, [pc, #388]	; (8001e34 <HAL_GPIO_Init+0x328>)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	089b      	lsrs	r3, r3, #2
 8001cb4:	3302      	adds	r3, #2
 8001cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_GPIO_Init+0x32c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d037      	beq.n	8001d4a <HAL_GPIO_Init+0x23e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a57      	ldr	r2, [pc, #348]	; (8001e3c <HAL_GPIO_Init+0x330>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d031      	beq.n	8001d46 <HAL_GPIO_Init+0x23a>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a56      	ldr	r2, [pc, #344]	; (8001e40 <HAL_GPIO_Init+0x334>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d02b      	beq.n	8001d42 <HAL_GPIO_Init+0x236>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a55      	ldr	r2, [pc, #340]	; (8001e44 <HAL_GPIO_Init+0x338>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d025      	beq.n	8001d3e <HAL_GPIO_Init+0x232>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a54      	ldr	r2, [pc, #336]	; (8001e48 <HAL_GPIO_Init+0x33c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01f      	beq.n	8001d3a <HAL_GPIO_Init+0x22e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a53      	ldr	r2, [pc, #332]	; (8001e4c <HAL_GPIO_Init+0x340>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d019      	beq.n	8001d36 <HAL_GPIO_Init+0x22a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a52      	ldr	r2, [pc, #328]	; (8001e50 <HAL_GPIO_Init+0x344>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_GPIO_Init+0x226>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a51      	ldr	r2, [pc, #324]	; (8001e54 <HAL_GPIO_Init+0x348>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00d      	beq.n	8001d2e <HAL_GPIO_Init+0x222>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a50      	ldr	r2, [pc, #320]	; (8001e58 <HAL_GPIO_Init+0x34c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d007      	beq.n	8001d2a <HAL_GPIO_Init+0x21e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4f      	ldr	r2, [pc, #316]	; (8001e5c <HAL_GPIO_Init+0x350>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d101      	bne.n	8001d26 <HAL_GPIO_Init+0x21a>
 8001d22:	2309      	movs	r3, #9
 8001d24:	e012      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d26:	230a      	movs	r3, #10
 8001d28:	e010      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	e00e      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d2e:	2307      	movs	r3, #7
 8001d30:	e00c      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e00a      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d36:	2305      	movs	r3, #5
 8001d38:	e008      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e006      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e004      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d42:	2302      	movs	r3, #2
 8001d44:	e002      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <HAL_GPIO_Init+0x240>
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	69fa      	ldr	r2, [r7, #28]
 8001d4e:	f002 0203 	and.w	r2, r2, #3
 8001d52:	0092      	lsls	r2, r2, #2
 8001d54:	4093      	lsls	r3, r2
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d5c:	4935      	ldr	r1, [pc, #212]	; (8001e34 <HAL_GPIO_Init+0x328>)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	3302      	adds	r3, #2
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	43db      	mvns	r3, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4013      	ands	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d8e:	4a34      	ldr	r2, [pc, #208]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d94:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db8:	4a29      	ldr	r2, [pc, #164]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de2:	4a1f      	ldr	r2, [pc, #124]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <HAL_GPIO_Init+0x354>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3301      	adds	r3, #1
 8001e16:	61fb      	str	r3, [r7, #28]
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	f67f ae84 	bls.w	8001b28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3724      	adds	r7, #36	; 0x24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40021400 	.word	0x40021400
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40021c00 	.word	0x40021c00
 8001e58:	40022000 	.word	0x40022000
 8001e5c:	40022400 	.word	0x40022400
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	887b      	ldrh	r3, [r7, #2]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	73fb      	strb	r3, [r7, #15]
 8001e80:	e001      	b.n	8001e86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	807b      	strh	r3, [r7, #2]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea4:	787b      	ldrb	r3, [r7, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eaa:	887a      	ldrh	r2, [r7, #2]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb0:	e003      	b.n	8001eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eb2:	887b      	ldrh	r3, [r7, #2]
 8001eb4:	041a      	lsls	r2, r3, #16
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	619a      	str	r2, [r3, #24]
}
 8001eba:	bf00      	nop
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ec8:	b08f      	sub	sp, #60	; 0x3c
 8001eca:	af0a      	add	r7, sp, #40	; 0x28
 8001ecc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e10f      	b.n	80020f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7fe ff9c 	bl	8000e30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2203      	movs	r2, #3
 8001efc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f001 fbbd 	bl	8003696 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	603b      	str	r3, [r7, #0]
 8001f22:	687e      	ldr	r6, [r7, #4]
 8001f24:	466d      	mov	r5, sp
 8001f26:	f106 0410 	add.w	r4, r6, #16
 8001f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f3a:	1d33      	adds	r3, r6, #4
 8001f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f3e:	6838      	ldr	r0, [r7, #0]
 8001f40:	f001 fb48 	bl	80035d4 <USB_CoreInit>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d005      	beq.n	8001f56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e0d0      	b.n	80020f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 fbab 	bl	80036b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	e04a      	b.n	8001ffe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f68:	7bfa      	ldrb	r2, [r7, #15]
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	1a9b      	subs	r3, r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	333d      	adds	r3, #61	; 0x3d
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f7c:	7bfa      	ldrb	r2, [r7, #15]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	333c      	adds	r3, #60	; 0x3c
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	b298      	uxth	r0, r3
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3342      	adds	r3, #66	; 0x42
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	333f      	adds	r3, #63	; 0x3f
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	1a9b      	subs	r3, r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3344      	adds	r3, #68	; 0x44
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	3348      	adds	r3, #72	; 0x48
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3350      	adds	r3, #80	; 0x50
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d3af      	bcc.n	8001f68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	73fb      	strb	r3, [r7, #15]
 800200c:	e044      	b.n	8002098 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	3301      	adds	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3b5      	bcc.n	800200e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	603b      	str	r3, [r7, #0]
 80020a8:	687e      	ldr	r6, [r7, #4]
 80020aa:	466d      	mov	r5, sp
 80020ac:	f106 0410 	add.w	r4, r6, #16
 80020b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c0:	1d33      	adds	r3, r6, #4
 80020c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c4:	6838      	ldr	r0, [r7, #0]
 80020c6:	f001 fb43 	bl	8003750 <USB_DevInit>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e00d      	b.n	80020f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 fcee 	bl	8003ad2 <USB_DevDisconnect>

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e264      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d075      	beq.n	800220a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800211e:	4ba3      	ldr	r3, [pc, #652]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d00c      	beq.n	8002144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212a:	4ba0      	ldr	r3, [pc, #640]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002132:	2b08      	cmp	r3, #8
 8002134:	d112      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002136:	4b9d      	ldr	r3, [pc, #628]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b99      	ldr	r3, [pc, #612]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d05b      	beq.n	8002208 <HAL_RCC_OscConfig+0x108>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d157      	bne.n	8002208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e23f      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x74>
 8002166:	4b91      	ldr	r3, [pc, #580]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a90      	ldr	r2, [pc, #576]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b8b      	ldr	r3, [pc, #556]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a8a      	ldr	r2, [pc, #552]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a87      	ldr	r2, [pc, #540]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002198:	4b84      	ldr	r3, [pc, #528]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a83      	ldr	r2, [pc, #524]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b81      	ldr	r3, [pc, #516]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a80      	ldr	r2, [pc, #512]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7fe ff2a 	bl	8001010 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c0:	f7fe ff26 	bl	8001010 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e204      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xc0>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe ff16 	bl	8001010 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e8:	f7fe ff12 	bl	8001010 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1f0      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b6c      	ldr	r3, [pc, #432]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0xe8>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d063      	beq.n	80022de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002216:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b5f      	ldr	r3, [pc, #380]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b5c      	ldr	r3, [pc, #368]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1c4      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b56      	ldr	r3, [pc, #344]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4952      	ldr	r1, [pc, #328]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e03a      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b4f      	ldr	r3, [pc, #316]	; (80023b0 <HAL_RCC_OscConfig+0x2b0>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7fe fecb 	bl	8001010 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227e:	f7fe fec7 	bl	8001010 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1a5      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b46      	ldr	r3, [pc, #280]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b43      	ldr	r3, [pc, #268]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4940      	ldr	r1, [pc, #256]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_OscConfig+0x2b0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe feaa 	bl	8001010 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe fea6 	bl	8001010 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e184      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b36      	ldr	r3, [pc, #216]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d030      	beq.n	800234c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <HAL_RCC_OscConfig+0x2b4>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe fe8a 	bl	8001010 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe fe86 	bl	8001010 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e164      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x200>
 800231e:	e015      	b.n	800234c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_OscConfig+0x2b4>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe fe73 	bl	8001010 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232e:	f7fe fe6f 	bl	8001010 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e14d      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002340:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f0      	bne.n	800232e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a0 	beq.w	800249a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	6413      	str	r3, [r2, #64]	; 0x40
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <HAL_RCC_OscConfig+0x2ac>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	60bb      	str	r3, [r7, #8]
 8002384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002386:	2301      	movs	r3, #1
 8002388:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002392:	2b00      	cmp	r3, #0
 8002394:	d121      	bne.n	80023da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_RCC_OscConfig+0x2b8>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a2:	f7fe fe35 	bl	8001010 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a8:	e011      	b.n	80023ce <HAL_RCC_OscConfig+0x2ce>
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	42470000 	.word	0x42470000
 80023b4:	42470e80 	.word	0x42470e80
 80023b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023bc:	f7fe fe28 	bl	8001010 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e106      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	4b85      	ldr	r3, [pc, #532]	; (80025e4 <HAL_RCC_OscConfig+0x4e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d106      	bne.n	80023f0 <HAL_RCC_OscConfig+0x2f0>
 80023e2:	4b81      	ldr	r3, [pc, #516]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80023e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e6:	4a80      	ldr	r2, [pc, #512]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6713      	str	r3, [r2, #112]	; 0x70
 80023ee:	e01c      	b.n	800242a <HAL_RCC_OscConfig+0x32a>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	2b05      	cmp	r3, #5
 80023f6:	d10c      	bne.n	8002412 <HAL_RCC_OscConfig+0x312>
 80023f8:	4b7b      	ldr	r3, [pc, #492]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	4a7a      	ldr	r2, [pc, #488]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6713      	str	r3, [r2, #112]	; 0x70
 8002404:	4b78      	ldr	r3, [pc, #480]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	4a77      	ldr	r2, [pc, #476]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6713      	str	r3, [r2, #112]	; 0x70
 8002410:	e00b      	b.n	800242a <HAL_RCC_OscConfig+0x32a>
 8002412:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002416:	4a74      	ldr	r2, [pc, #464]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6713      	str	r3, [r2, #112]	; 0x70
 800241e:	4b72      	ldr	r3, [pc, #456]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a71      	ldr	r2, [pc, #452]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002424:	f023 0304 	bic.w	r3, r3, #4
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d015      	beq.n	800245e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7fe fded 	bl	8001010 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7fe fde9 	bl	8001010 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	; 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e0c5      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002450:	4b65      	ldr	r3, [pc, #404]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ee      	beq.n	800243a <HAL_RCC_OscConfig+0x33a>
 800245c:	e014      	b.n	8002488 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245e:	f7fe fdd7 	bl	8001010 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002466:	f7fe fdd3 	bl	8001010 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	f241 3288 	movw	r2, #5000	; 0x1388
 8002474:	4293      	cmp	r3, r2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e0af      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800247c:	4b5a      	ldr	r3, [pc, #360]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d105      	bne.n	800249a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248e:	4b56      	ldr	r3, [pc, #344]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	4a55      	ldr	r2, [pc, #340]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002498:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 809b 	beq.w	80025da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d05c      	beq.n	800256a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d141      	bne.n	800253c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_RCC_OscConfig+0x4ec>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024be:	f7fe fda7 	bl	8001010 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe fda3 	bl	8001010 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e081      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d8:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69da      	ldr	r2, [r3, #28]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	019b      	lsls	r3, r3, #6
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	085b      	lsrs	r3, r3, #1
 80024fc:	3b01      	subs	r3, #1
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002506:	061b      	lsls	r3, r3, #24
 8002508:	4937      	ldr	r1, [pc, #220]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 800250a:	4313      	orrs	r3, r2
 800250c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800250e:	4b37      	ldr	r3, [pc, #220]	; (80025ec <HAL_RCC_OscConfig+0x4ec>)
 8002510:	2201      	movs	r2, #1
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002514:	f7fe fd7c 	bl	8001010 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe fd78 	bl	8001010 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e056      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	4b2e      	ldr	r3, [pc, #184]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d0f0      	beq.n	800251c <HAL_RCC_OscConfig+0x41c>
 800253a:	e04e      	b.n	80025da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <HAL_RCC_OscConfig+0x4ec>)
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fd65 	bl	8001010 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254a:	f7fe fd61 	bl	8001010 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e03f      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1f0      	bne.n	800254a <HAL_RCC_OscConfig+0x44a>
 8002568:	e037      	b.n	80025da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e032      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_RCC_OscConfig+0x4e8>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d028      	beq.n	80025d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d121      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d11a      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025a6:	4013      	ands	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d111      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	3b01      	subs	r3, #1
 80025c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40007000 	.word	0x40007000
 80025e8:	40023800 	.word	0x40023800
 80025ec:	42470060 	.word	0x42470060

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fc96 	bl	8001010 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fc92 	bl	8001010 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe f9e8 	bl	8000b6c <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	08007164 	.word	0x08007164
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	2300      	movs	r3, #0
 80027ce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d4:	4b67      	ldr	r3, [pc, #412]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d00d      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x40>
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	f200 80bd 	bhi.w	8002960 <HAL_RCC_GetSysClockFreq+0x1a4>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ee:	e0b7      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b61      	ldr	r3, [pc, #388]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80027f2:	60bb      	str	r3, [r7, #8]
       break;
 80027f4:	e0b7      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f6:	4b61      	ldr	r3, [pc, #388]	; (800297c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80027f8:	60bb      	str	r3, [r7, #8]
      break;
 80027fa:	e0b4      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027fc:	4b5d      	ldr	r3, [pc, #372]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002804:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002806:	4b5b      	ldr	r3, [pc, #364]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d04d      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002812:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	461a      	mov	r2, r3
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	ea02 0800 	and.w	r8, r2, r0
 800282a:	ea03 0901 	and.w	r9, r3, r1
 800282e:	4640      	mov	r0, r8
 8002830:	4649      	mov	r1, r9
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 0300 	mov.w	r3, #0
 800283a:	014b      	lsls	r3, r1, #5
 800283c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002840:	0142      	lsls	r2, r0, #5
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	ebb0 0008 	subs.w	r0, r0, r8
 800284a:	eb61 0109 	sbc.w	r1, r1, r9
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	f04f 0300 	mov.w	r3, #0
 8002856:	018b      	lsls	r3, r1, #6
 8002858:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800285c:	0182      	lsls	r2, r0, #6
 800285e:	1a12      	subs	r2, r2, r0
 8002860:	eb63 0301 	sbc.w	r3, r3, r1
 8002864:	f04f 0000 	mov.w	r0, #0
 8002868:	f04f 0100 	mov.w	r1, #0
 800286c:	00d9      	lsls	r1, r3, #3
 800286e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002872:	00d0      	lsls	r0, r2, #3
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	eb12 0208 	adds.w	r2, r2, r8
 800287c:	eb43 0309 	adc.w	r3, r3, r9
 8002880:	f04f 0000 	mov.w	r0, #0
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	0259      	lsls	r1, r3, #9
 800288a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800288e:	0250      	lsls	r0, r2, #9
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	461a      	mov	r2, r3
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	f7fd fcfe 	bl	80002a0 <__aeabi_uldivmod>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4613      	mov	r3, r2
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e04a      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	099b      	lsrs	r3, r3, #6
 80028b4:	461a      	mov	r2, r3
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028be:	f04f 0100 	mov.w	r1, #0
 80028c2:	ea02 0400 	and.w	r4, r2, r0
 80028c6:	ea03 0501 	and.w	r5, r3, r1
 80028ca:	4620      	mov	r0, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	014b      	lsls	r3, r1, #5
 80028d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80028dc:	0142      	lsls	r2, r0, #5
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	1b00      	subs	r0, r0, r4
 80028e4:	eb61 0105 	sbc.w	r1, r1, r5
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	018b      	lsls	r3, r1, #6
 80028f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80028f6:	0182      	lsls	r2, r0, #6
 80028f8:	1a12      	subs	r2, r2, r0
 80028fa:	eb63 0301 	sbc.w	r3, r3, r1
 80028fe:	f04f 0000 	mov.w	r0, #0
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	00d9      	lsls	r1, r3, #3
 8002908:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800290c:	00d0      	lsls	r0, r2, #3
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	1912      	adds	r2, r2, r4
 8002914:	eb45 0303 	adc.w	r3, r5, r3
 8002918:	f04f 0000 	mov.w	r0, #0
 800291c:	f04f 0100 	mov.w	r1, #0
 8002920:	0299      	lsls	r1, r3, #10
 8002922:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002926:	0290      	lsls	r0, r2, #10
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	461a      	mov	r2, r3
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	f7fd fcb2 	bl	80002a0 <__aeabi_uldivmod>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4613      	mov	r3, r2
 8002942:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	0c1b      	lsrs	r3, r3, #16
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	3301      	adds	r3, #1
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	fbb2 f3f3 	udiv	r3, r2, r3
 800295c:	60bb      	str	r3, [r7, #8]
      break;
 800295e:	e002      	b.n	8002966 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002962:	60bb      	str	r3, [r7, #8]
      break;
 8002964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002966:	68bb      	ldr	r3, [r7, #8]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800
 8002978:	00f42400 	.word	0x00f42400
 800297c:	007a1200 	.word	0x007a1200

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_RCC_GetHCLKFreq+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	20000000 	.word	0x20000000

08002998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800299c:	f7ff fff0 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029a0:	4602      	mov	r2, r0
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	0a9b      	lsrs	r3, r3, #10
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	4903      	ldr	r1, [pc, #12]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ae:	5ccb      	ldrb	r3, [r1, r3]
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023800 	.word	0x40023800
 80029bc:	08007174 	.word	0x08007174

080029c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029c4:	f7ff ffdc 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029c8:	4602      	mov	r2, r0
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	0b5b      	lsrs	r3, r3, #13
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	4903      	ldr	r1, [pc, #12]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d6:	5ccb      	ldrb	r3, [r1, r3]
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40023800 	.word	0x40023800
 80029e4:	08007174 	.word	0x08007174

080029e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	220f      	movs	r2, #15
 80029f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_RCC_GetClockConfig+0x5c>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 0203 	and.w	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a04:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_RCC_GetClockConfig+0x5c>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <HAL_RCC_GetClockConfig+0x5c>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_RCC_GetClockConfig+0x5c>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	08db      	lsrs	r3, r3, #3
 8002a22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_RCC_GetClockConfig+0x60>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 020f 	and.w	r2, r3, #15
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	601a      	str	r2, [r3, #0]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40023c00 	.word	0x40023c00

08002a4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e041      	b.n	8002ae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d106      	bne.n	8002a78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f839 	bl	8002aea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3304      	adds	r3, #4
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	f000 f9d8 	bl	8002e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d001      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e04e      	b.n	8002bb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a23      	ldr	r2, [pc, #140]	; (8002bc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d022      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b42:	d01d      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d018      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <HAL_TIM_Base_Start_IT+0xcc>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d013      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00e      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a19      	ldr	r2, [pc, #100]	; (8002bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d004      	beq.n	8002b80 <HAL_TIM_Base_Start_IT+0x80>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a18      	ldr	r2, [pc, #96]	; (8002bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d111      	bne.n	8002ba4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b06      	cmp	r3, #6
 8002b90:	d010      	beq.n	8002bb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0201 	orr.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba2:	e007      	b.n	8002bb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0201 	orr.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800
 8002bd0:	40000c00 	.word	0x40000c00
 8002bd4:	40010400 	.word	0x40010400
 8002bd8:	40014000 	.word	0x40014000
 8002bdc:	40001800 	.word	0x40001800

08002be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d122      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d11b      	bne.n	8002c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f06f 0202 	mvn.w	r2, #2
 8002c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f8ee 	bl	8002e04 <HAL_TIM_IC_CaptureCallback>
 8002c28:	e005      	b.n	8002c36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f8e0 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f8f1 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d122      	bne.n	8002c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d11b      	bne.n	8002c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f06f 0204 	mvn.w	r2, #4
 8002c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f8c4 	bl	8002e04 <HAL_TIM_IC_CaptureCallback>
 8002c7c:	e005      	b.n	8002c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f8b6 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f8c7 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d122      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d11b      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0208 	mvn.w	r2, #8
 8002cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f89a 	bl	8002e04 <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f88c 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f89d 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0310 	and.w	r3, r3, #16
 8002cee:	2b10      	cmp	r3, #16
 8002cf0:	d122      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b10      	cmp	r3, #16
 8002cfe:	d11b      	bne.n	8002d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0210 	mvn.w	r2, #16
 8002d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f870 	bl	8002e04 <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f862 	bl	8002df0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f873 	bl	8002e18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d10e      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0201 	mvn.w	r2, #1
 8002d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fd feba 	bl	8000ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6e:	2b80      	cmp	r3, #128	; 0x80
 8002d70:	d10e      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	2b80      	cmp	r3, #128	; 0x80
 8002d7e:	d107      	bne.n	8002d90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f902 	bl	8002f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	d10e      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b40      	cmp	r3, #64	; 0x40
 8002daa:	d107      	bne.n	8002dbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f838 	bl	8002e2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d10e      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0320 	and.w	r3, r3, #32
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d107      	bne.n	8002de8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f06f 0220 	mvn.w	r2, #32
 8002de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 f8cc 	bl	8002f80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a40      	ldr	r2, [pc, #256]	; (8002f54 <TIM_Base_SetConfig+0x114>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d013      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5e:	d00f      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a3d      	ldr	r2, [pc, #244]	; (8002f58 <TIM_Base_SetConfig+0x118>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00b      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a3c      	ldr	r2, [pc, #240]	; (8002f5c <TIM_Base_SetConfig+0x11c>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d007      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a3b      	ldr	r2, [pc, #236]	; (8002f60 <TIM_Base_SetConfig+0x120>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d003      	beq.n	8002e80 <TIM_Base_SetConfig+0x40>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a3a      	ldr	r2, [pc, #232]	; (8002f64 <TIM_Base_SetConfig+0x124>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d108      	bne.n	8002e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <TIM_Base_SetConfig+0x114>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02b      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea0:	d027      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <TIM_Base_SetConfig+0x118>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d023      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <TIM_Base_SetConfig+0x11c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d01f      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a2a      	ldr	r2, [pc, #168]	; (8002f60 <TIM_Base_SetConfig+0x120>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01b      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a29      	ldr	r2, [pc, #164]	; (8002f64 <TIM_Base_SetConfig+0x124>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d017      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <TIM_Base_SetConfig+0x128>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <TIM_Base_SetConfig+0x12c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00f      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a26      	ldr	r2, [pc, #152]	; (8002f70 <TIM_Base_SetConfig+0x130>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <TIM_Base_SetConfig+0x134>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d007      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a24      	ldr	r2, [pc, #144]	; (8002f78 <TIM_Base_SetConfig+0x138>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0xb2>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a23      	ldr	r2, [pc, #140]	; (8002f7c <TIM_Base_SetConfig+0x13c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <TIM_Base_SetConfig+0x114>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d003      	beq.n	8002f38 <TIM_Base_SetConfig+0xf8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <TIM_Base_SetConfig+0x124>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d103      	bne.n	8002f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	615a      	str	r2, [r3, #20]
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800
 8002f60:	40000c00 	.word	0x40000c00
 8002f64:	40010400 	.word	0x40010400
 8002f68:	40014000 	.word	0x40014000
 8002f6c:	40014400 	.word	0x40014400
 8002f70:	40014800 	.word	0x40014800
 8002f74:	40001800 	.word	0x40001800
 8002f78:	40001c00 	.word	0x40001c00
 8002f7c:	40002000 	.word	0x40002000

08002f80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e03f      	b.n	800303a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd feb8 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f929 	bl	8003244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003000:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003010:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003020:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b08a      	sub	sp, #40	; 0x28
 8003046:	af02      	add	r7, sp, #8
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003052:	2300      	movs	r3, #0
 8003054:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	d17c      	bne.n	800315c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_UART_Transmit+0x2c>
 8003068:	88fb      	ldrh	r3, [r7, #6]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e075      	b.n	800315e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_UART_Transmit+0x3e>
 800307c:	2302      	movs	r3, #2
 800307e:	e06e      	b.n	800315e <HAL_UART_Transmit+0x11c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2221      	movs	r2, #33	; 0x21
 8003092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003096:	f7fd ffbb 	bl	8001010 <HAL_GetTick>
 800309a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	88fa      	ldrh	r2, [r7, #6]
 80030a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b0:	d108      	bne.n	80030c4 <HAL_UART_Transmit+0x82>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	e003      	b.n	80030cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030d4:	e02a      	b.n	800312c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 f840 	bl	8003166 <UART_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e036      	b.n	800315e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10b      	bne.n	800310e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003104:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	3302      	adds	r3, #2
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	e007      	b.n	800311e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	3301      	adds	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1cf      	bne.n	80030d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2200      	movs	r2, #0
 800313e:	2140      	movs	r1, #64	; 0x40
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f810 	bl	8003166 <UART_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e006      	b.n	800315e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e000      	b.n	800315e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800315c:	2302      	movs	r3, #2
  }
}
 800315e:	4618      	mov	r0, r3
 8003160:	3720      	adds	r7, #32
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b090      	sub	sp, #64	; 0x40
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	4613      	mov	r3, r2
 8003174:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003176:	e050      	b.n	800321a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317e:	d04c      	beq.n	800321a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <UART_WaitOnFlagUntilTimeout+0x30>
 8003186:	f7fd ff43 	bl	8001010 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003192:	429a      	cmp	r2, r3
 8003194:	d241      	bcs.n	800321a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	330c      	adds	r3, #12
 80031b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031b6:	637a      	str	r2, [r7, #52]	; 0x34
 80031b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e5      	bne.n	8003196 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3314      	adds	r3, #20
 80031d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	e853 3f00 	ldrex	r3, [r3]
 80031d8:	613b      	str	r3, [r7, #16]
   return(result);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f023 0301 	bic.w	r3, r3, #1
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3314      	adds	r3, #20
 80031e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031ea:	623a      	str	r2, [r7, #32]
 80031ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ee:	69f9      	ldr	r1, [r7, #28]
 80031f0:	6a3a      	ldr	r2, [r7, #32]
 80031f2:	e841 2300 	strex	r3, r2, [r1]
 80031f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1e5      	bne.n	80031ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e00f      	b.n	800323a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4013      	ands	r3, r2
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	429a      	cmp	r2, r3
 8003228:	bf0c      	ite	eq
 800322a:	2301      	moveq	r3, #1
 800322c:	2300      	movne	r3, #0
 800322e:	b2db      	uxtb	r3, r3
 8003230:	461a      	mov	r2, r3
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	429a      	cmp	r2, r3
 8003236:	d09f      	beq.n	8003178 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3740      	adds	r7, #64	; 0x40
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003248:	b09f      	sub	sp, #124	; 0x7c
 800324a:	af00      	add	r7, sp, #0
 800324c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800324e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325a:	68d9      	ldr	r1, [r3, #12]
 800325c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	ea40 0301 	orr.w	r3, r0, r1
 8003264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	431a      	orrs	r2, r3
 8003270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003272:	695b      	ldr	r3, [r3, #20]
 8003274:	431a      	orrs	r2, r3
 8003276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4313      	orrs	r3, r2
 800327c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800327e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003288:	f021 010c 	bic.w	r1, r1, #12
 800328c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003292:	430b      	orrs	r3, r1
 8003294:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003296:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a2:	6999      	ldr	r1, [r3, #24]
 80032a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	ea40 0301 	orr.w	r3, r0, r1
 80032ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	4bc5      	ldr	r3, [pc, #788]	; (80035c8 <UART_SetConfig+0x384>)
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d004      	beq.n	80032c2 <UART_SetConfig+0x7e>
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4bc3      	ldr	r3, [pc, #780]	; (80035cc <UART_SetConfig+0x388>)
 80032be:	429a      	cmp	r2, r3
 80032c0:	d103      	bne.n	80032ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032c2:	f7ff fb7d 	bl	80029c0 <HAL_RCC_GetPCLK2Freq>
 80032c6:	6778      	str	r0, [r7, #116]	; 0x74
 80032c8:	e002      	b.n	80032d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ca:	f7ff fb65 	bl	8002998 <HAL_RCC_GetPCLK1Freq>
 80032ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032d8:	f040 80b6 	bne.w	8003448 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032de:	461c      	mov	r4, r3
 80032e0:	f04f 0500 	mov.w	r5, #0
 80032e4:	4622      	mov	r2, r4
 80032e6:	462b      	mov	r3, r5
 80032e8:	1891      	adds	r1, r2, r2
 80032ea:	6439      	str	r1, [r7, #64]	; 0x40
 80032ec:	415b      	adcs	r3, r3
 80032ee:	647b      	str	r3, [r7, #68]	; 0x44
 80032f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80032f4:	1912      	adds	r2, r2, r4
 80032f6:	eb45 0303 	adc.w	r3, r5, r3
 80032fa:	f04f 0000 	mov.w	r0, #0
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	00d9      	lsls	r1, r3, #3
 8003304:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003308:	00d0      	lsls	r0, r2, #3
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	1911      	adds	r1, r2, r4
 8003310:	6639      	str	r1, [r7, #96]	; 0x60
 8003312:	416b      	adcs	r3, r5
 8003314:	667b      	str	r3, [r7, #100]	; 0x64
 8003316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	461a      	mov	r2, r3
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	1891      	adds	r1, r2, r2
 8003322:	63b9      	str	r1, [r7, #56]	; 0x38
 8003324:	415b      	adcs	r3, r3
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800332c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003330:	f7fc ffb6 	bl	80002a0 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4ba5      	ldr	r3, [pc, #660]	; (80035d0 <UART_SetConfig+0x38c>)
 800333a:	fba3 2302 	umull	r2, r3, r3, r2
 800333e:	095b      	lsrs	r3, r3, #5
 8003340:	011e      	lsls	r6, r3, #4
 8003342:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003344:	461c      	mov	r4, r3
 8003346:	f04f 0500 	mov.w	r5, #0
 800334a:	4622      	mov	r2, r4
 800334c:	462b      	mov	r3, r5
 800334e:	1891      	adds	r1, r2, r2
 8003350:	6339      	str	r1, [r7, #48]	; 0x30
 8003352:	415b      	adcs	r3, r3
 8003354:	637b      	str	r3, [r7, #52]	; 0x34
 8003356:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800335a:	1912      	adds	r2, r2, r4
 800335c:	eb45 0303 	adc.w	r3, r5, r3
 8003360:	f04f 0000 	mov.w	r0, #0
 8003364:	f04f 0100 	mov.w	r1, #0
 8003368:	00d9      	lsls	r1, r3, #3
 800336a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800336e:	00d0      	lsls	r0, r2, #3
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	1911      	adds	r1, r2, r4
 8003376:	65b9      	str	r1, [r7, #88]	; 0x58
 8003378:	416b      	adcs	r3, r5
 800337a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800337c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	461a      	mov	r2, r3
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	1891      	adds	r1, r2, r2
 8003388:	62b9      	str	r1, [r7, #40]	; 0x28
 800338a:	415b      	adcs	r3, r3
 800338c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800338e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003392:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003396:	f7fc ff83 	bl	80002a0 <__aeabi_uldivmod>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4b8c      	ldr	r3, [pc, #560]	; (80035d0 <UART_SetConfig+0x38c>)
 80033a0:	fba3 1302 	umull	r1, r3, r3, r2
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	2164      	movs	r1, #100	; 0x64
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	3332      	adds	r3, #50	; 0x32
 80033b2:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <UART_SetConfig+0x38c>)
 80033b4:	fba2 2303 	umull	r2, r3, r2, r3
 80033b8:	095b      	lsrs	r3, r3, #5
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033c0:	441e      	add	r6, r3
 80033c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c4:	4618      	mov	r0, r3
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	1894      	adds	r4, r2, r2
 80033d0:	623c      	str	r4, [r7, #32]
 80033d2:	415b      	adcs	r3, r3
 80033d4:	627b      	str	r3, [r7, #36]	; 0x24
 80033d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80033da:	1812      	adds	r2, r2, r0
 80033dc:	eb41 0303 	adc.w	r3, r1, r3
 80033e0:	f04f 0400 	mov.w	r4, #0
 80033e4:	f04f 0500 	mov.w	r5, #0
 80033e8:	00dd      	lsls	r5, r3, #3
 80033ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033ee:	00d4      	lsls	r4, r2, #3
 80033f0:	4622      	mov	r2, r4
 80033f2:	462b      	mov	r3, r5
 80033f4:	1814      	adds	r4, r2, r0
 80033f6:	653c      	str	r4, [r7, #80]	; 0x50
 80033f8:	414b      	adcs	r3, r1
 80033fa:	657b      	str	r3, [r7, #84]	; 0x54
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	461a      	mov	r2, r3
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	1891      	adds	r1, r2, r2
 8003408:	61b9      	str	r1, [r7, #24]
 800340a:	415b      	adcs	r3, r3
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003412:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003416:	f7fc ff43 	bl	80002a0 <__aeabi_uldivmod>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4b6c      	ldr	r3, [pc, #432]	; (80035d0 <UART_SetConfig+0x38c>)
 8003420:	fba3 1302 	umull	r1, r3, r3, r2
 8003424:	095b      	lsrs	r3, r3, #5
 8003426:	2164      	movs	r1, #100	; 0x64
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	3332      	adds	r3, #50	; 0x32
 8003432:	4a67      	ldr	r2, [pc, #412]	; (80035d0 <UART_SetConfig+0x38c>)
 8003434:	fba2 2303 	umull	r2, r3, r2, r3
 8003438:	095b      	lsrs	r3, r3, #5
 800343a:	f003 0207 	and.w	r2, r3, #7
 800343e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4432      	add	r2, r6
 8003444:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003446:	e0b9      	b.n	80035bc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344a:	461c      	mov	r4, r3
 800344c:	f04f 0500 	mov.w	r5, #0
 8003450:	4622      	mov	r2, r4
 8003452:	462b      	mov	r3, r5
 8003454:	1891      	adds	r1, r2, r2
 8003456:	6139      	str	r1, [r7, #16]
 8003458:	415b      	adcs	r3, r3
 800345a:	617b      	str	r3, [r7, #20]
 800345c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003460:	1912      	adds	r2, r2, r4
 8003462:	eb45 0303 	adc.w	r3, r5, r3
 8003466:	f04f 0000 	mov.w	r0, #0
 800346a:	f04f 0100 	mov.w	r1, #0
 800346e:	00d9      	lsls	r1, r3, #3
 8003470:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003474:	00d0      	lsls	r0, r2, #3
 8003476:	4602      	mov	r2, r0
 8003478:	460b      	mov	r3, r1
 800347a:	eb12 0804 	adds.w	r8, r2, r4
 800347e:	eb43 0905 	adc.w	r9, r3, r5
 8003482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	008b      	lsls	r3, r1, #2
 8003496:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800349a:	0082      	lsls	r2, r0, #2
 800349c:	4640      	mov	r0, r8
 800349e:	4649      	mov	r1, r9
 80034a0:	f7fc fefe 	bl	80002a0 <__aeabi_uldivmod>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4b49      	ldr	r3, [pc, #292]	; (80035d0 <UART_SetConfig+0x38c>)
 80034aa:	fba3 2302 	umull	r2, r3, r3, r2
 80034ae:	095b      	lsrs	r3, r3, #5
 80034b0:	011e      	lsls	r6, r3, #4
 80034b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b4:	4618      	mov	r0, r3
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	1894      	adds	r4, r2, r2
 80034c0:	60bc      	str	r4, [r7, #8]
 80034c2:	415b      	adcs	r3, r3
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034ca:	1812      	adds	r2, r2, r0
 80034cc:	eb41 0303 	adc.w	r3, r1, r3
 80034d0:	f04f 0400 	mov.w	r4, #0
 80034d4:	f04f 0500 	mov.w	r5, #0
 80034d8:	00dd      	lsls	r5, r3, #3
 80034da:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80034de:	00d4      	lsls	r4, r2, #3
 80034e0:	4622      	mov	r2, r4
 80034e2:	462b      	mov	r3, r5
 80034e4:	1814      	adds	r4, r2, r0
 80034e6:	64bc      	str	r4, [r7, #72]	; 0x48
 80034e8:	414b      	adcs	r3, r1
 80034ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	008b      	lsls	r3, r1, #2
 8003500:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003504:	0082      	lsls	r2, r0, #2
 8003506:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800350a:	f7fc fec9 	bl	80002a0 <__aeabi_uldivmod>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <UART_SetConfig+0x38c>)
 8003514:	fba3 1302 	umull	r1, r3, r3, r2
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	2164      	movs	r1, #100	; 0x64
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	3332      	adds	r3, #50	; 0x32
 8003526:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <UART_SetConfig+0x38c>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	095b      	lsrs	r3, r3, #5
 800352e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003532:	441e      	add	r6, r3
 8003534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003536:	4618      	mov	r0, r3
 8003538:	f04f 0100 	mov.w	r1, #0
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	1894      	adds	r4, r2, r2
 8003542:	603c      	str	r4, [r7, #0]
 8003544:	415b      	adcs	r3, r3
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800354c:	1812      	adds	r2, r2, r0
 800354e:	eb41 0303 	adc.w	r3, r1, r3
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	f04f 0500 	mov.w	r5, #0
 800355a:	00dd      	lsls	r5, r3, #3
 800355c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003560:	00d4      	lsls	r4, r2, #3
 8003562:	4622      	mov	r2, r4
 8003564:	462b      	mov	r3, r5
 8003566:	eb12 0a00 	adds.w	sl, r2, r0
 800356a:	eb43 0b01 	adc.w	fp, r3, r1
 800356e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4618      	mov	r0, r3
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	008b      	lsls	r3, r1, #2
 8003582:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003586:	0082      	lsls	r2, r0, #2
 8003588:	4650      	mov	r0, sl
 800358a:	4659      	mov	r1, fp
 800358c:	f7fc fe88 	bl	80002a0 <__aeabi_uldivmod>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4b0e      	ldr	r3, [pc, #56]	; (80035d0 <UART_SetConfig+0x38c>)
 8003596:	fba3 1302 	umull	r1, r3, r3, r2
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	2164      	movs	r1, #100	; 0x64
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3332      	adds	r3, #50	; 0x32
 80035a8:	4a09      	ldr	r2, [pc, #36]	; (80035d0 <UART_SetConfig+0x38c>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4432      	add	r2, r6
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	377c      	adds	r7, #124	; 0x7c
 80035c0:	46bd      	mov	sp, r7
 80035c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035c6:	bf00      	nop
 80035c8:	40011000 	.word	0x40011000
 80035cc:	40011400 	.word	0x40011400
 80035d0:	51eb851f 	.word	0x51eb851f

080035d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035d4:	b084      	sub	sp, #16
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b084      	sub	sp, #16
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	f107 001c 	add.w	r0, r7, #28
 80035e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80035e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d122      	bne.n	8003632 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003616:	2b01      	cmp	r3, #1
 8003618:	d105      	bne.n	8003626 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa82 	bl	8003b30 <USB_CoreReset>
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e01a      	b.n	8003668 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa76 	bl	8003b30 <USB_CoreReset>
 8003644:	4603      	mov	r3, r0
 8003646:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	639a      	str	r2, [r3, #56]	; 0x38
 800365a:	e005      	b.n	8003668 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	2b01      	cmp	r3, #1
 800366c:	d10b      	bne.n	8003686 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f043 0206 	orr.w	r2, r3, #6
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f043 0220 	orr.w	r2, r3, #32
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003686:	7bfb      	ldrb	r3, [r7, #15]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003692:	b004      	add	sp, #16
 8003694:	4770      	bx	lr

08003696 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f023 0201 	bic.w	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d115      	bne.n	8003706 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80036e6:	2001      	movs	r0, #1
 80036e8:	f7fd fc9e 	bl	8001028 <HAL_Delay>
      ms++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa0e 	bl	8003b14 <USB_GetMode>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d01e      	beq.n	800373c <USB_SetCurrentMode+0x84>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2b31      	cmp	r3, #49	; 0x31
 8003702:	d9f0      	bls.n	80036e6 <USB_SetCurrentMode+0x2e>
 8003704:	e01a      	b.n	800373c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003706:	78fb      	ldrb	r3, [r7, #3]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d115      	bne.n	8003738 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003718:	2001      	movs	r0, #1
 800371a:	f7fd fc85 	bl	8001028 <HAL_Delay>
      ms++;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3301      	adds	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f9f5 	bl	8003b14 <USB_GetMode>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <USB_SetCurrentMode+0x84>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b31      	cmp	r3, #49	; 0x31
 8003734:	d9f0      	bls.n	8003718 <USB_SetCurrentMode+0x60>
 8003736:	e001      	b.n	800373c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e005      	b.n	8003748 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b32      	cmp	r3, #50	; 0x32
 8003740:	d101      	bne.n	8003746 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003750:	b084      	sub	sp, #16
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800375e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	e009      	b.n	8003784 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	3340      	adds	r3, #64	; 0x40
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	2200      	movs	r2, #0
 800377c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3301      	adds	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	2b0e      	cmp	r3, #14
 8003788:	d9f2      	bls.n	8003770 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800378a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11c      	bne.n	80037ca <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379e:	f043 0302 	orr.w	r3, r3, #2
 80037a2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
 80037c8:	e00b      	b.n	80037e2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80037e8:	461a      	mov	r2, r3
 80037ea:	2300      	movs	r3, #0
 80037ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f4:	4619      	mov	r1, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fc:	461a      	mov	r2, r3
 80037fe:	680b      	ldr	r3, [r1, #0]
 8003800:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10c      	bne.n	8003822 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d104      	bne.n	8003818 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800380e:	2100      	movs	r1, #0
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f945 	bl	8003aa0 <USB_SetDevSpeed>
 8003816:	e008      	b.n	800382a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003818:	2101      	movs	r1, #1
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f940 	bl	8003aa0 <USB_SetDevSpeed>
 8003820:	e003      	b.n	800382a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003822:	2103      	movs	r1, #3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 f93b 	bl	8003aa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800382a:	2110      	movs	r1, #16
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 f8f3 	bl	8003a18 <USB_FlushTxFifo>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f90f 	bl	8003a60 <USB_FlushRxFifo>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	461a      	mov	r2, r3
 8003854:	2300      	movs	r3, #0
 8003856:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385e:	461a      	mov	r2, r3
 8003860:	2300      	movs	r3, #0
 8003862:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386a:	461a      	mov	r2, r3
 800386c:	2300      	movs	r3, #0
 800386e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003870:	2300      	movs	r3, #0
 8003872:	613b      	str	r3, [r7, #16]
 8003874:	e043      	b.n	80038fe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003888:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800388c:	d118      	bne.n	80038c0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a0:	461a      	mov	r2, r3
 80038a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e013      	b.n	80038d2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b6:	461a      	mov	r2, r3
 80038b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	e008      	b.n	80038d2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038cc:	461a      	mov	r2, r3
 80038ce:	2300      	movs	r3, #0
 80038d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038de:	461a      	mov	r2, r3
 80038e0:	2300      	movs	r3, #0
 80038e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f0:	461a      	mov	r2, r3
 80038f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	3301      	adds	r3, #1
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	429a      	cmp	r2, r3
 8003904:	d3b7      	bcc.n	8003876 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003906:	2300      	movs	r3, #0
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	e043      	b.n	8003994 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800391e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003922:	d118      	bne.n	8003956 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003936:	461a      	mov	r2, r3
 8003938:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	e013      	b.n	8003968 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	015a      	lsls	r2, r3, #5
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4413      	add	r3, r2
 8003948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800394c:	461a      	mov	r2, r3
 800394e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e008      	b.n	8003968 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003962:	461a      	mov	r2, r3
 8003964:	2300      	movs	r3, #0
 8003966:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003974:	461a      	mov	r2, r3
 8003976:	2300      	movs	r3, #0
 8003978:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003986:	461a      	mov	r2, r3
 8003988:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800398c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	3301      	adds	r3, #1
 8003992:	613b      	str	r3, [r7, #16]
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	429a      	cmp	r2, r3
 800399a:	d3b7      	bcc.n	800390c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80039bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d105      	bne.n	80039d0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	f043 0210 	orr.w	r2, r3, #16
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <USB_DevInit+0x2c4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80039dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f043 0208 	orr.w	r2, r3, #8
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80039ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a10:	b004      	add	sp, #16
 8003a12:	4770      	bx	lr
 8003a14:	803c3800 	.word	0x803c3800

08003a18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	019b      	lsls	r3, r3, #6
 8003a2a:	f043 0220 	orr.w	r2, r3, #32
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3301      	adds	r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <USB_FlushTxFifo+0x44>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e006      	b.n	8003a50 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d0f1      	beq.n	8003a32 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	00030d40 	.word	0x00030d40

08003a60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2210      	movs	r2, #16
 8003a70:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3301      	adds	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
 8003a78:	4a08      	ldr	r2, [pc, #32]	; (8003a9c <USB_FlushRxFifo+0x3c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e006      	b.n	8003a90 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b10      	cmp	r3, #16
 8003a8c:	d0f1      	beq.n	8003a72 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	00030d40 	.word	0x00030d40

08003aa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	68f9      	ldr	r1, [r7, #12]
 8003abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003aec:	f023 0303 	bic.w	r3, r3, #3
 8003af0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b00:	f043 0302 	orr.w	r3, r3, #2
 8003b04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0301 	and.w	r3, r3, #1
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	4a13      	ldr	r2, [pc, #76]	; (8003b90 <USB_CoreReset+0x60>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e01a      	b.n	8003b82 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	daf3      	bge.n	8003b3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	4a09      	ldr	r2, [pc, #36]	; (8003b90 <USB_CoreReset+0x60>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e006      	b.n	8003b82 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d0f1      	beq.n	8003b64 <USB_CoreReset+0x34>

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	00030d40 	.word	0x00030d40

08003b94 <__NVIC_SetPriority>:
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	6039      	str	r1, [r7, #0]
 8003b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	db0a      	blt.n	8003bbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	490c      	ldr	r1, [pc, #48]	; (8003be0 <__NVIC_SetPriority+0x4c>)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003bbc:	e00a      	b.n	8003bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4908      	ldr	r1, [pc, #32]	; (8003be4 <__NVIC_SetPriority+0x50>)
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	3b04      	subs	r3, #4
 8003bcc:	0112      	lsls	r2, r2, #4
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	761a      	strb	r2, [r3, #24]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000e100 	.word	0xe000e100
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <SysTick_Handler+0x1c>)
 8003bee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003bf0:	f001 fd28 	bl	8005644 <xTaskGetSchedulerState>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d001      	beq.n	8003bfe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003bfa:	f002 fb0d 	bl	8006218 <xPortSysTickHandler>
  }
}
 8003bfe:	bf00      	nop
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	e000e010 	.word	0xe000e010

08003c08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	f06f 0004 	mvn.w	r0, #4
 8003c12:	f7ff ffbf 	bl	8003b94 <__NVIC_SetPriority>
#endif
}
 8003c16:	bf00      	nop
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c22:	f3ef 8305 	mrs	r3, IPSR
 8003c26:	603b      	str	r3, [r7, #0]
  return(result);
 8003c28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c2e:	f06f 0305 	mvn.w	r3, #5
 8003c32:	607b      	str	r3, [r7, #4]
 8003c34:	e00c      	b.n	8003c50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c36:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <osKernelInitialize+0x44>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d105      	bne.n	8003c4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <osKernelInitialize+0x44>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	e002      	b.n	8003c50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c50:	687b      	ldr	r3, [r7, #4]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	2000009c 	.word	0x2000009c

08003c64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c6a:	f3ef 8305 	mrs	r3, IPSR
 8003c6e:	603b      	str	r3, [r7, #0]
  return(result);
 8003c70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003c76:	f06f 0305 	mvn.w	r3, #5
 8003c7a:	607b      	str	r3, [r7, #4]
 8003c7c:	e010      	b.n	8003ca0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <osKernelStart+0x48>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d109      	bne.n	8003c9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c86:	f7ff ffbf 	bl	8003c08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <osKernelStart+0x48>)
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c90:	f001 f87c 	bl	8004d8c <vTaskStartScheduler>
      stat = osOK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	607b      	str	r3, [r7, #4]
 8003c98:	e002      	b.n	8003ca0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ca0:	687b      	ldr	r3, [r7, #4]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	2000009c 	.word	0x2000009c

08003cb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08e      	sub	sp, #56	; 0x38
 8003cb4:	af04      	add	r7, sp, #16
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cc0:	f3ef 8305 	mrs	r3, IPSR
 8003cc4:	617b      	str	r3, [r7, #20]
  return(result);
 8003cc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d17e      	bne.n	8003dca <osThreadNew+0x11a>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d07b      	beq.n	8003dca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003cd6:	2318      	movs	r3, #24
 8003cd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d045      	beq.n	8003d76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <osThreadNew+0x48>
        name = attr->name;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <osThreadNew+0x6e>
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b38      	cmp	r3, #56	; 0x38
 8003d10:	d805      	bhi.n	8003d1e <osThreadNew+0x6e>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <osThreadNew+0x72>
        return (NULL);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e054      	b.n	8003dcc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	089b      	lsrs	r3, r3, #2
 8003d30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00e      	beq.n	8003d58 <osThreadNew+0xa8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2bbb      	cmp	r3, #187	; 0xbb
 8003d40:	d90a      	bls.n	8003d58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d006      	beq.n	8003d58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <osThreadNew+0xa8>
        mem = 1;
 8003d52:	2301      	movs	r3, #1
 8003d54:	61bb      	str	r3, [r7, #24]
 8003d56:	e010      	b.n	8003d7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10c      	bne.n	8003d7a <osThreadNew+0xca>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d108      	bne.n	8003d7a <osThreadNew+0xca>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <osThreadNew+0xca>
          mem = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	e001      	b.n	8003d7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d110      	bne.n	8003da2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d88:	9202      	str	r2, [sp, #8]
 8003d8a:	9301      	str	r3, [sp, #4]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	6a3a      	ldr	r2, [r7, #32]
 8003d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fe0c 	bl	80049b4 <xTaskCreateStatic>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	e013      	b.n	8003dca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d110      	bne.n	8003dca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	f107 0310 	add.w	r3, r7, #16
 8003db0:	9301      	str	r3, [sp, #4]
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fe57 	bl	8004a6e <xTaskCreate>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d001      	beq.n	8003dca <osThreadNew+0x11a>
            hTask = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003dca:	693b      	ldr	r3, [r7, #16]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3728      	adds	r7, #40	; 0x28
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ddc:	f3ef 8305 	mrs	r3, IPSR
 8003de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003de2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <osDelay+0x1c>
    stat = osErrorISR;
 8003de8:	f06f 0305 	mvn.w	r3, #5
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	e007      	b.n	8003e00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d002      	beq.n	8003e00 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 ff92 	bl	8004d24 <vTaskDelay>
    }
  }

  return (stat);
 8003e00:	68fb      	ldr	r3, [r7, #12]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	4a07      	ldr	r2, [pc, #28]	; (8003e38 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e1c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	4a06      	ldr	r2, [pc, #24]	; (8003e3c <vApplicationGetIdleTaskMemory+0x30>)
 8003e22:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2280      	movs	r2, #128	; 0x80
 8003e28:	601a      	str	r2, [r3, #0]
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	200000a0 	.word	0x200000a0
 8003e3c:	2000015c 	.word	0x2000015c

08003e40 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	4a07      	ldr	r2, [pc, #28]	; (8003e6c <vApplicationGetTimerTaskMemory+0x2c>)
 8003e50:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4a06      	ldr	r2, [pc, #24]	; (8003e70 <vApplicationGetTimerTaskMemory+0x30>)
 8003e56:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e5e:	601a      	str	r2, [r3, #0]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	2000035c 	.word	0x2000035c
 8003e70:	20000418 	.word	0x20000418

08003e74 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f103 0208 	add.w	r2, r3, #8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f04f 32ff 	mov.w	r2, #4294967295
 8003e8c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f103 0208 	add.w	r2, r3, #8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f103 0208 	add.w	r2, r3, #8
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	601a      	str	r2, [r3, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f16:	b480      	push	{r7}
 8003f18:	b085      	sub	sp, #20
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
 8003f1e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d103      	bne.n	8003f36 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e00c      	b.n	8003f50 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3308      	adds	r3, #8
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	e002      	b.n	8003f44 <vListInsert+0x2e>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d2f6      	bcs.n	8003f3e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	601a      	str	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6892      	ldr	r2, [r2, #8]
 8003f9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6852      	ldr	r2, [r2, #4]
 8003fa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d103      	bne.n	8003fbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	1e5a      	subs	r2, r3, #1
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10a      	bne.n	8004006 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004002:	bf00      	nop
 8004004:	e7fe      	b.n	8004004 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004006:	f002 f875 	bl	80060f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004012:	68f9      	ldr	r1, [r7, #12]
 8004014:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004016:	fb01 f303 	mul.w	r3, r1, r3
 800401a:	441a      	add	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	3b01      	subs	r3, #1
 8004038:	68f9      	ldr	r1, [r7, #12]
 800403a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	441a      	add	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	22ff      	movs	r2, #255	; 0xff
 800404a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	22ff      	movs	r2, #255	; 0xff
 8004052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d114      	bne.n	8004086 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d01a      	beq.n	800409a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	3310      	adds	r3, #16
 8004068:	4618      	mov	r0, r3
 800406a:	f001 f929 	bl	80052c0 <xTaskRemoveFromEventList>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004074:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <xQueueGenericReset+0xcc>)
 8004076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	e009      	b.n	800409a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3310      	adds	r3, #16
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff fef2 	bl	8003e74 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3324      	adds	r3, #36	; 0x24
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff feed 	bl	8003e74 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800409a:	f002 f85b 	bl	8006154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800409e:	2301      	movs	r3, #1
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	e000ed04 	.word	0xe000ed04

080040ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08e      	sub	sp, #56	; 0x38
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10a      	bne.n	80040f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040ee:	bf00      	nop
 80040f0:	e7fe      	b.n	80040f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <xQueueGenericCreateStatic+0x52>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <xQueueGenericCreateStatic+0x56>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <xQueueGenericCreateStatic+0x58>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	623b      	str	r3, [r7, #32]
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <xQueueGenericCreateStatic+0x7e>
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <xQueueGenericCreateStatic+0x82>
 800412a:	2301      	movs	r3, #1
 800412c:	e000      	b.n	8004130 <xQueueGenericCreateStatic+0x84>
 800412e:	2300      	movs	r3, #0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	61fb      	str	r3, [r7, #28]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800414a:	2350      	movs	r3, #80	; 0x50
 800414c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b50      	cmp	r3, #80	; 0x50
 8004152:	d00a      	beq.n	800416a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	61bb      	str	r3, [r7, #24]
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800416a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800417e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	4613      	mov	r3, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f805 	bl	800419c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004194:	4618      	mov	r0, r3
 8004196:	3730      	adds	r7, #48	; 0x30
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e002      	b.n	80041be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041ca:	2101      	movs	r1, #1
 80041cc:	69b8      	ldr	r0, [r7, #24]
 80041ce:	f7ff ff05 	bl	8003fdc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	78fa      	ldrb	r2, [r7, #3]
 80041d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b08e      	sub	sp, #56	; 0x38
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041f2:	2300      	movs	r3, #0
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xQueueGenericSend+0x32>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <xQueueGenericSend+0x40>
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <xQueueGenericSend+0x44>
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <xQueueGenericSend+0x46>
 8004228:	2300      	movs	r3, #0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10a      	bne.n	8004244 <xQueueGenericSend+0x60>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d103      	bne.n	8004252 <xQueueGenericSend+0x6e>
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <xQueueGenericSend+0x72>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <xQueueGenericSend+0x74>
 8004256:	2300      	movs	r3, #0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <xQueueGenericSend+0x8e>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	623b      	str	r3, [r7, #32]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004272:	f001 f9e7 	bl	8005644 <xTaskGetSchedulerState>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d102      	bne.n	8004282 <xQueueGenericSend+0x9e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <xQueueGenericSend+0xa2>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <xQueueGenericSend+0xa4>
 8004286:	2300      	movs	r3, #0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d10a      	bne.n	80042a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	61fb      	str	r3, [r7, #28]
}
 800429e:	bf00      	nop
 80042a0:	e7fe      	b.n	80042a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042a2:	f001 ff27 	bl	80060f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <xQueueGenericSend+0xd4>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d129      	bne.n	800430c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042be:	f000 fa0b 	bl	80046d8 <prvCopyDataToQueue>
 80042c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d010      	beq.n	80042ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	3324      	adds	r3, #36	; 0x24
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fff5 	bl	80052c0 <xTaskRemoveFromEventList>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d013      	beq.n	8004304 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042dc:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <xQueueGenericSend+0x1f8>)
 80042de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	e00a      	b.n	8004304 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d007      	beq.n	8004304 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042f4:	4b39      	ldr	r3, [pc, #228]	; (80043dc <xQueueGenericSend+0x1f8>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004304:	f001 ff26 	bl	8006154 <vPortExitCritical>
				return pdPASS;
 8004308:	2301      	movs	r3, #1
 800430a:	e063      	b.n	80043d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004312:	f001 ff1f 	bl	8006154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004316:	2300      	movs	r3, #0
 8004318:	e05c      	b.n	80043d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800431a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431c:	2b00      	cmp	r3, #0
 800431e:	d106      	bne.n	800432e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004320:	f107 0314 	add.w	r3, r7, #20
 8004324:	4618      	mov	r0, r3
 8004326:	f001 f82f 	bl	8005388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800432a:	2301      	movs	r3, #1
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800432e:	f001 ff11 	bl	8006154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004332:	f000 fd9b 	bl	8004e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004336:	f001 fedd 	bl	80060f4 <vPortEnterCritical>
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004340:	b25b      	sxtb	r3, r3
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d103      	bne.n	8004350 <xQueueGenericSend+0x16c>
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004356:	b25b      	sxtb	r3, r3
 8004358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435c:	d103      	bne.n	8004366 <xQueueGenericSend+0x182>
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004366:	f001 fef5 	bl	8006154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800436a:	1d3a      	adds	r2, r7, #4
 800436c:	f107 0314 	add.w	r3, r7, #20
 8004370:	4611      	mov	r1, r2
 8004372:	4618      	mov	r0, r3
 8004374:	f001 f81e 	bl	80053b4 <xTaskCheckForTimeOut>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d124      	bne.n	80043c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800437e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004380:	f000 faa2 	bl	80048c8 <prvIsQueueFull>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d018      	beq.n	80043bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	3310      	adds	r3, #16
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	4611      	mov	r1, r2
 8004392:	4618      	mov	r0, r3
 8004394:	f000 ff44 	bl	8005220 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800439a:	f000 fa2d 	bl	80047f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800439e:	f000 fd73 	bl	8004e88 <xTaskResumeAll>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f47f af7c 	bne.w	80042a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043aa:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <xQueueGenericSend+0x1f8>)
 80043ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f3bf 8f4f 	dsb	sy
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	e772      	b.n	80042a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043be:	f000 fa1b 	bl	80047f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043c2:	f000 fd61 	bl	8004e88 <xTaskResumeAll>
 80043c6:	e76c      	b.n	80042a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ca:	f000 fa15 	bl	80047f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043ce:	f000 fd5b 	bl	8004e88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3738      	adds	r7, #56	; 0x38
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b090      	sub	sp, #64	; 0x40
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <xQueueGenericSendFromISR+0x3c>
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <xQueueGenericSendFromISR+0x40>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <xQueueGenericSendFromISR+0x42>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d103      	bne.n	800444a <xQueueGenericSendFromISR+0x6a>
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <xQueueGenericSendFromISR+0x6e>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <xQueueGenericSendFromISR+0x70>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	623b      	str	r3, [r7, #32]
}
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800446a:	f001 ff25 	bl	80062b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800446e:	f3ef 8211 	mrs	r2, BASEPRI
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	61fa      	str	r2, [r7, #28]
 8004484:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004486:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004488:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004492:	429a      	cmp	r2, r3
 8004494:	d302      	bcc.n	800449c <xQueueGenericSendFromISR+0xbc>
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d12f      	bne.n	80044fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800449c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044b2:	f000 f911 	bl	80046d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d112      	bne.n	80044e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d016      	beq.n	80044f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ca:	3324      	adds	r3, #36	; 0x24
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fef7 	bl	80052c0 <xTaskRemoveFromEventList>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00e      	beq.n	80044f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00b      	beq.n	80044f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e007      	b.n	80044f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044ea:	3301      	adds	r3, #1
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	b25a      	sxtb	r2, r3
 80044f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80044f6:	2301      	movs	r3, #1
 80044f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80044fa:	e001      	b.n	8004500 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004502:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800450a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800450c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800450e:	4618      	mov	r0, r3
 8004510:	3740      	adds	r7, #64	; 0x40
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08c      	sub	sp, #48	; 0x30
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004524:	2300      	movs	r3, #0
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10a      	bne.n	8004548 <xQueueReceive+0x30>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	623b      	str	r3, [r7, #32]
}
 8004544:	bf00      	nop
 8004546:	e7fe      	b.n	8004546 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d103      	bne.n	8004556 <xQueueReceive+0x3e>
 800454e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <xQueueReceive+0x42>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <xQueueReceive+0x44>
 800455a:	2300      	movs	r3, #0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <xQueueReceive+0x5e>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	61fb      	str	r3, [r7, #28]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004576:	f001 f865 	bl	8005644 <xTaskGetSchedulerState>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <xQueueReceive+0x6e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <xQueueReceive+0x72>
 8004586:	2301      	movs	r3, #1
 8004588:	e000      	b.n	800458c <xQueueReceive+0x74>
 800458a:	2300      	movs	r3, #0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xQueueReceive+0x8e>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	61bb      	str	r3, [r7, #24]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045a6:	f001 fda5 	bl	80060f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d01f      	beq.n	80045f6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ba:	f000 f8f7 	bl	80047ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	1e5a      	subs	r2, r3, #1
 80045c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00f      	beq.n	80045ee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	3310      	adds	r3, #16
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fe74 	bl	80052c0 <xTaskRemoveFromEventList>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045de:	4b3d      	ldr	r3, [pc, #244]	; (80046d4 <xQueueReceive+0x1bc>)
 80045e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045ee:	f001 fdb1 	bl	8006154 <vPortExitCritical>
				return pdPASS;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e069      	b.n	80046ca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d103      	bne.n	8004604 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045fc:	f001 fdaa 	bl	8006154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004600:	2300      	movs	r3, #0
 8004602:	e062      	b.n	80046ca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d106      	bne.n	8004618 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800460a:	f107 0310 	add.w	r3, r7, #16
 800460e:	4618      	mov	r0, r3
 8004610:	f000 feba 	bl	8005388 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004614:	2301      	movs	r3, #1
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004618:	f001 fd9c 	bl	8006154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800461c:	f000 fc26 	bl	8004e6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004620:	f001 fd68 	bl	80060f4 <vPortEnterCritical>
 8004624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800462a:	b25b      	sxtb	r3, r3
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d103      	bne.n	800463a <xQueueReceive+0x122>
 8004632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004640:	b25b      	sxtb	r3, r3
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	d103      	bne.n	8004650 <xQueueReceive+0x138>
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004650:	f001 fd80 	bl	8006154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004654:	1d3a      	adds	r2, r7, #4
 8004656:	f107 0310 	add.w	r3, r7, #16
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fea9 	bl	80053b4 <xTaskCheckForTimeOut>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d123      	bne.n	80046b0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800466a:	f000 f917 	bl	800489c <prvIsQueueEmpty>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d017      	beq.n	80046a4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	3324      	adds	r3, #36	; 0x24
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f000 fdcf 	bl	8005220 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004684:	f000 f8b8 	bl	80047f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004688:	f000 fbfe 	bl	8004e88 <xTaskResumeAll>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d189      	bne.n	80045a6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004692:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <xQueueReceive+0x1bc>)
 8004694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	e780      	b.n	80045a6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046a6:	f000 f8a7 	bl	80047f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046aa:	f000 fbed 	bl	8004e88 <xTaskResumeAll>
 80046ae:	e77a      	b.n	80045a6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b2:	f000 f8a1 	bl	80047f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046b6:	f000 fbe7 	bl	8004e88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046bc:	f000 f8ee 	bl	800489c <prvIsQueueEmpty>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f43f af6f 	beq.w	80045a6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3730      	adds	r7, #48	; 0x30
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	e000ed04 	.word	0xe000ed04

080046d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d14d      	bne.n	800479a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 ffbc 	bl	8005680 <xTaskPriorityDisinherit>
 8004708:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	e043      	b.n	800479a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d119      	bne.n	800474c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6858      	ldr	r0, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	461a      	mov	r2, r3
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	f002 f81e 	bl	8006764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	441a      	add	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	429a      	cmp	r2, r3
 8004740:	d32b      	bcc.n	800479a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	e026      	b.n	800479a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68d8      	ldr	r0, [r3, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004754:	461a      	mov	r2, r3
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	f002 f804 	bl	8006764 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	425b      	negs	r3, r3
 8004766:	441a      	add	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d207      	bcs.n	8004788 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	425b      	negs	r3, r3
 8004782:	441a      	add	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d105      	bne.n	800479a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	3b01      	subs	r3, #1
 8004798:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80047a2:	697b      	ldr	r3, [r7, #20]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d018      	beq.n	80047f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	441a      	add	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d303      	bcc.n	80047e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68d9      	ldr	r1, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	461a      	mov	r2, r3
 80047ea:	6838      	ldr	r0, [r7, #0]
 80047ec:	f001 ffba 	bl	8006764 <memcpy>
	}
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004800:	f001 fc78 	bl	80060f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800480a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800480c:	e011      	b.n	8004832 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	d012      	beq.n	800483c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3324      	adds	r3, #36	; 0x24
 800481a:	4618      	mov	r0, r3
 800481c:	f000 fd50 	bl	80052c0 <xTaskRemoveFromEventList>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004826:	f000 fe27 	bl	8005478 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800482a:	7bfb      	ldrb	r3, [r7, #15]
 800482c:	3b01      	subs	r3, #1
 800482e:	b2db      	uxtb	r3, r3
 8004830:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004832:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004836:	2b00      	cmp	r3, #0
 8004838:	dce9      	bgt.n	800480e <prvUnlockQueue+0x16>
 800483a:	e000      	b.n	800483e <prvUnlockQueue+0x46>
					break;
 800483c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	22ff      	movs	r2, #255	; 0xff
 8004842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004846:	f001 fc85 	bl	8006154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800484a:	f001 fc53 	bl	80060f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004854:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004856:	e011      	b.n	800487c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d012      	beq.n	8004886 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3310      	adds	r3, #16
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fd2b 	bl	80052c0 <xTaskRemoveFromEventList>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004870:	f000 fe02 	bl	8005478 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004874:	7bbb      	ldrb	r3, [r7, #14]
 8004876:	3b01      	subs	r3, #1
 8004878:	b2db      	uxtb	r3, r3
 800487a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800487c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004880:	2b00      	cmp	r3, #0
 8004882:	dce9      	bgt.n	8004858 <prvUnlockQueue+0x60>
 8004884:	e000      	b.n	8004888 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004886:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	22ff      	movs	r2, #255	; 0xff
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004890:	f001 fc60 	bl	8006154 <vPortExitCritical>
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048a4:	f001 fc26 	bl	80060f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d102      	bne.n	80048b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048b0:	2301      	movs	r3, #1
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	e001      	b.n	80048ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048ba:	f001 fc4b 	bl	8006154 <vPortExitCritical>

	return xReturn;
 80048be:	68fb      	ldr	r3, [r7, #12]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048d0:	f001 fc10 	bl	80060f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048dc:	429a      	cmp	r2, r3
 80048de:	d102      	bne.n	80048e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048e0:	2301      	movs	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e001      	b.n	80048ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048ea:	f001 fc33 	bl	8006154 <vPortExitCritical>

	return xReturn;
 80048ee:	68fb      	ldr	r3, [r7, #12]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004902:	2300      	movs	r3, #0
 8004904:	60fb      	str	r3, [r7, #12]
 8004906:	e014      	b.n	8004932 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004908:	4a0f      	ldr	r2, [pc, #60]	; (8004948 <vQueueAddToRegistry+0x50>)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10b      	bne.n	800492c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004914:	490c      	ldr	r1, [pc, #48]	; (8004948 <vQueueAddToRegistry+0x50>)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800491e:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <vQueueAddToRegistry+0x50>)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4413      	add	r3, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800492a:	e006      	b.n	800493a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b07      	cmp	r3, #7
 8004936:	d9e7      	bls.n	8004908 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004938:	bf00      	nop
 800493a:	bf00      	nop
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20004f5c 	.word	0x20004f5c

0800494c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800495c:	f001 fbca 	bl	80060f4 <vPortEnterCritical>
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004966:	b25b      	sxtb	r3, r3
 8004968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496c:	d103      	bne.n	8004976 <vQueueWaitForMessageRestricted+0x2a>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800497c:	b25b      	sxtb	r3, r3
 800497e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004982:	d103      	bne.n	800498c <vQueueWaitForMessageRestricted+0x40>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800498c:	f001 fbe2 	bl	8006154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	d106      	bne.n	80049a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	3324      	adds	r3, #36	; 0x24
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 fc61 	bl	8005268 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049a6:	6978      	ldr	r0, [r7, #20]
 80049a8:	f7ff ff26 	bl	80047f8 <prvUnlockQueue>
	}
 80049ac:	bf00      	nop
 80049ae:	3718      	adds	r7, #24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08e      	sub	sp, #56	; 0x38
 80049b8:	af04      	add	r7, sp, #16
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <xTaskCreateStatic+0x2a>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	623b      	str	r3, [r7, #32]
}
 80049da:	bf00      	nop
 80049dc:	e7fe      	b.n	80049dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10a      	bne.n	80049fa <xTaskCreateStatic+0x46>
	__asm volatile
 80049e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e8:	f383 8811 	msr	BASEPRI, r3
 80049ec:	f3bf 8f6f 	isb	sy
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	61fb      	str	r3, [r7, #28]
}
 80049f6:	bf00      	nop
 80049f8:	e7fe      	b.n	80049f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80049fa:	23bc      	movs	r3, #188	; 0xbc
 80049fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2bbc      	cmp	r3, #188	; 0xbc
 8004a02:	d00a      	beq.n	8004a1a <xTaskCreateStatic+0x66>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	61bb      	str	r3, [r7, #24]
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d01e      	beq.n	8004a60 <xTaskCreateStatic+0xac>
 8004a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01b      	beq.n	8004a60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a34:	2202      	movs	r2, #2
 8004a36:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	9303      	str	r3, [sp, #12]
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	9302      	str	r3, [sp, #8]
 8004a42:	f107 0314 	add.w	r3, r7, #20
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f850 	bl	8004af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a5a:	f000 f8f3 	bl	8004c44 <prvAddNewTaskToReadyList>
 8004a5e:	e001      	b.n	8004a64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a64:	697b      	ldr	r3, [r7, #20]
	}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3728      	adds	r7, #40	; 0x28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b08c      	sub	sp, #48	; 0x30
 8004a72:	af04      	add	r7, sp, #16
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	603b      	str	r3, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f001 fc58 	bl	8006338 <pvPortMalloc>
 8004a88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00e      	beq.n	8004aae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004a90:	20bc      	movs	r0, #188	; 0xbc
 8004a92:	f001 fc51 	bl	8006338 <pvPortMalloc>
 8004a96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8004aa4:	e005      	b.n	8004ab2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004aa6:	6978      	ldr	r0, [r7, #20]
 8004aa8:	f001 fd12 	bl	80064d0 <vPortFree>
 8004aac:	e001      	b.n	8004ab2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d017      	beq.n	8004ae8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ac0:	88fa      	ldrh	r2, [r7, #6]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	9303      	str	r3, [sp, #12]
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	9302      	str	r3, [sp, #8]
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	9301      	str	r3, [sp, #4]
 8004ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f80e 	bl	8004af8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004adc:	69f8      	ldr	r0, [r7, #28]
 8004ade:	f000 f8b1 	bl	8004c44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	61bb      	str	r3, [r7, #24]
 8004ae6:	e002      	b.n	8004aee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8004aec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004aee:	69bb      	ldr	r3, [r7, #24]
	}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	461a      	mov	r2, r3
 8004b10:	21a5      	movs	r1, #165	; 0xa5
 8004b12:	f001 fe35 	bl	8006780 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b20:	3b01      	subs	r3, #1
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	f023 0307 	bic.w	r3, r3, #7
 8004b2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	617b      	str	r3, [r7, #20]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01f      	beq.n	8004b96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b56:	2300      	movs	r3, #0
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	e012      	b.n	8004b82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b5c:	68ba      	ldr	r2, [r7, #8]
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	4413      	add	r3, r2
 8004b62:	7819      	ldrb	r1, [r3, #0]
 8004b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	4413      	add	r3, r2
 8004b6a:	3334      	adds	r3, #52	; 0x34
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d006      	beq.n	8004b8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2b0f      	cmp	r3, #15
 8004b86:	d9e9      	bls.n	8004b5c <prvInitialiseNewTask+0x64>
 8004b88:	e000      	b.n	8004b8c <prvInitialiseNewTask+0x94>
			{
				break;
 8004b8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b94:	e003      	b.n	8004b9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba0:	2b37      	cmp	r3, #55	; 0x37
 8004ba2:	d901      	bls.n	8004ba8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ba4:	2337      	movs	r3, #55	; 0x37
 8004ba6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	3304      	adds	r3, #4
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff f978 	bl	8003eb4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	3318      	adds	r3, #24
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff f973 	bl	8003eb4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be6:	2200      	movs	r2, #0
 8004be8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	3354      	adds	r3, #84	; 0x54
 8004bf8:	2260      	movs	r2, #96	; 0x60
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 fdbf 	bl	8006780 <memset>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	4a0c      	ldr	r2, [pc, #48]	; (8004c38 <prvInitialiseNewTask+0x140>)
 8004c06:	659a      	str	r2, [r3, #88]	; 0x58
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	4a0c      	ldr	r2, [pc, #48]	; (8004c3c <prvInitialiseNewTask+0x144>)
 8004c0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c10:	4a0b      	ldr	r2, [pc, #44]	; (8004c40 <prvInitialiseNewTask+0x148>)
 8004c12:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	68f9      	ldr	r1, [r7, #12]
 8004c18:	69b8      	ldr	r0, [r7, #24]
 8004c1a:	f001 f941 	bl	8005ea0 <pxPortInitialiseStack>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c30:	bf00      	nop
 8004c32:	3720      	adds	r7, #32
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	0800719c 	.word	0x0800719c
 8004c3c:	080071bc 	.word	0x080071bc
 8004c40:	0800717c 	.word	0x0800717c

08004c44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c4c:	f001 fa52 	bl	80060f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c50:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <prvAddNewTaskToReadyList+0xc4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3301      	adds	r3, #1
 8004c56:	4a2c      	ldr	r2, [pc, #176]	; (8004d08 <prvAddNewTaskToReadyList+0xc4>)
 8004c58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c5a:	4b2c      	ldr	r3, [pc, #176]	; (8004d0c <prvAddNewTaskToReadyList+0xc8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c62:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <prvAddNewTaskToReadyList+0xc8>)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c68:	4b27      	ldr	r3, [pc, #156]	; (8004d08 <prvAddNewTaskToReadyList+0xc4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d110      	bne.n	8004c92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c70:	f000 fc26 	bl	80054c0 <prvInitialiseTaskLists>
 8004c74:	e00d      	b.n	8004c92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c76:	4b26      	ldr	r3, [pc, #152]	; (8004d10 <prvAddNewTaskToReadyList+0xcc>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c7e:	4b23      	ldr	r3, [pc, #140]	; (8004d0c <prvAddNewTaskToReadyList+0xc8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d802      	bhi.n	8004c92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <prvAddNewTaskToReadyList+0xc8>)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <prvAddNewTaskToReadyList+0xd0>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3301      	adds	r3, #1
 8004c98:	4a1e      	ldr	r2, [pc, #120]	; (8004d14 <prvAddNewTaskToReadyList+0xd0>)
 8004c9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004c9c:	4b1d      	ldr	r3, [pc, #116]	; (8004d14 <prvAddNewTaskToReadyList+0xd0>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <prvAddNewTaskToReadyList+0xd4>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d903      	bls.n	8004cb8 <prvAddNewTaskToReadyList+0x74>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	4a18      	ldr	r2, [pc, #96]	; (8004d18 <prvAddNewTaskToReadyList+0xd4>)
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <prvAddNewTaskToReadyList+0xd8>)
 8004cc6:	441a      	add	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7ff f8fd 	bl	8003ece <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cd4:	f001 fa3e 	bl	8006154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <prvAddNewTaskToReadyList+0xcc>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00e      	beq.n	8004cfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ce0:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <prvAddNewTaskToReadyList+0xc8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d207      	bcs.n	8004cfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <prvAddNewTaskToReadyList+0xdc>)
 8004cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000cec 	.word	0x20000cec
 8004d0c:	20000818 	.word	0x20000818
 8004d10:	20000cf8 	.word	0x20000cf8
 8004d14:	20000d08 	.word	0x20000d08
 8004d18:	20000cf4 	.word	0x20000cf4
 8004d1c:	2000081c 	.word	0x2000081c
 8004d20:	e000ed04 	.word	0xe000ed04

08004d24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d017      	beq.n	8004d66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d36:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <vTaskDelay+0x60>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <vTaskDelay+0x30>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	60bb      	str	r3, [r7, #8]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d54:	f000 f88a 	bl	8004e6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d58:	2100      	movs	r1, #0
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fcfe 	bl	800575c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d60:	f000 f892 	bl	8004e88 <xTaskResumeAll>
 8004d64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d107      	bne.n	8004d7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d6c:	4b06      	ldr	r3, [pc, #24]	; (8004d88 <vTaskDelay+0x64>)
 8004d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000d14 	.word	0x20000d14
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d9a:	463a      	mov	r2, r7
 8004d9c:	1d39      	adds	r1, r7, #4
 8004d9e:	f107 0308 	add.w	r3, r7, #8
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff f832 	bl	8003e0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	9202      	str	r2, [sp, #8]
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	2300      	movs	r3, #0
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	2300      	movs	r3, #0
 8004db8:	460a      	mov	r2, r1
 8004dba:	4924      	ldr	r1, [pc, #144]	; (8004e4c <vTaskStartScheduler+0xc0>)
 8004dbc:	4824      	ldr	r0, [pc, #144]	; (8004e50 <vTaskStartScheduler+0xc4>)
 8004dbe:	f7ff fdf9 	bl	80049b4 <xTaskCreateStatic>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	4a23      	ldr	r2, [pc, #140]	; (8004e54 <vTaskStartScheduler+0xc8>)
 8004dc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004dc8:	4b22      	ldr	r3, [pc, #136]	; (8004e54 <vTaskStartScheduler+0xc8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e001      	b.n	8004dda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d102      	bne.n	8004de6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004de0:	f000 fd10 	bl	8005804 <xTimerCreateTimerTask>
 8004de4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d11b      	bne.n	8004e24 <vTaskStartScheduler+0x98>
	__asm volatile
 8004dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df0:	f383 8811 	msr	BASEPRI, r3
 8004df4:	f3bf 8f6f 	isb	sy
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	613b      	str	r3, [r7, #16]
}
 8004dfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e00:	4b15      	ldr	r3, [pc, #84]	; (8004e58 <vTaskStartScheduler+0xcc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3354      	adds	r3, #84	; 0x54
 8004e06:	4a15      	ldr	r2, [pc, #84]	; (8004e5c <vTaskStartScheduler+0xd0>)
 8004e08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004e0a:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <vTaskStartScheduler+0xd4>)
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004e12:	4b14      	ldr	r3, [pc, #80]	; (8004e64 <vTaskStartScheduler+0xd8>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004e18:	4b13      	ldr	r3, [pc, #76]	; (8004e68 <vTaskStartScheduler+0xdc>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004e1e:	f001 f8c7 	bl	8005fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004e22:	e00e      	b.n	8004e42 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2a:	d10a      	bne.n	8004e42 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	e7fe      	b.n	8004e40 <vTaskStartScheduler+0xb4>
}
 8004e42:	bf00      	nop
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08007104 	.word	0x08007104
 8004e50:	08005491 	.word	0x08005491
 8004e54:	20000d10 	.word	0x20000d10
 8004e58:	20000818 	.word	0x20000818
 8004e5c:	20000010 	.word	0x20000010
 8004e60:	20000d0c 	.word	0x20000d0c
 8004e64:	20000cf8 	.word	0x20000cf8
 8004e68:	20000cf0 	.word	0x20000cf0

08004e6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e70:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <vTaskSuspendAll+0x18>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	3301      	adds	r3, #1
 8004e76:	4a03      	ldr	r2, [pc, #12]	; (8004e84 <vTaskSuspendAll+0x18>)
 8004e78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e7a:	bf00      	nop
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	20000d14 	.word	0x20000d14

08004e88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e96:	4b42      	ldr	r3, [pc, #264]	; (8004fa0 <xTaskResumeAll+0x118>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	603b      	str	r3, [r7, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	e7fe      	b.n	8004eb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004eb4:	f001 f91e 	bl	80060f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004eb8:	4b39      	ldr	r3, [pc, #228]	; (8004fa0 <xTaskResumeAll+0x118>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	4a38      	ldr	r2, [pc, #224]	; (8004fa0 <xTaskResumeAll+0x118>)
 8004ec0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ec2:	4b37      	ldr	r3, [pc, #220]	; (8004fa0 <xTaskResumeAll+0x118>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d162      	bne.n	8004f90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004eca:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <xTaskResumeAll+0x11c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d05e      	beq.n	8004f90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ed2:	e02f      	b.n	8004f34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed4:	4b34      	ldr	r3, [pc, #208]	; (8004fa8 <xTaskResumeAll+0x120>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3318      	adds	r3, #24
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff f851 	bl	8003f88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff f84c 	bl	8003f88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	4b2d      	ldr	r3, [pc, #180]	; (8004fac <xTaskResumeAll+0x124>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d903      	bls.n	8004f04 <xTaskResumeAll+0x7c>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	4a2a      	ldr	r2, [pc, #168]	; (8004fac <xTaskResumeAll+0x124>)
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4a27      	ldr	r2, [pc, #156]	; (8004fb0 <xTaskResumeAll+0x128>)
 8004f12:	441a      	add	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	3304      	adds	r3, #4
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f7fe ffd7 	bl	8003ece <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f24:	4b23      	ldr	r3, [pc, #140]	; (8004fb4 <xTaskResumeAll+0x12c>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d302      	bcc.n	8004f34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004f2e:	4b22      	ldr	r3, [pc, #136]	; (8004fb8 <xTaskResumeAll+0x130>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f34:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <xTaskResumeAll+0x120>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1cb      	bne.n	8004ed4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f42:	f000 fb5f 	bl	8005604 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <xTaskResumeAll+0x134>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d010      	beq.n	8004f74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f52:	f000 f847 	bl	8004fe4 <xTaskIncrementTick>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004f5c:	4b16      	ldr	r3, [pc, #88]	; (8004fb8 <xTaskResumeAll+0x130>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f1      	bne.n	8004f52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004f6e:	4b13      	ldr	r3, [pc, #76]	; (8004fbc <xTaskResumeAll+0x134>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f74:	4b10      	ldr	r3, [pc, #64]	; (8004fb8 <xTaskResumeAll+0x130>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f80:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <xTaskResumeAll+0x138>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f90:	f001 f8e0 	bl	8006154 <vPortExitCritical>

	return xAlreadyYielded;
 8004f94:	68bb      	ldr	r3, [r7, #8]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000d14 	.word	0x20000d14
 8004fa4:	20000cec 	.word	0x20000cec
 8004fa8:	20000cac 	.word	0x20000cac
 8004fac:	20000cf4 	.word	0x20000cf4
 8004fb0:	2000081c 	.word	0x2000081c
 8004fb4:	20000818 	.word	0x20000818
 8004fb8:	20000d00 	.word	0x20000d00
 8004fbc:	20000cfc 	.word	0x20000cfc
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <xTaskGetTickCount+0x1c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004fd0:	687b      	ldr	r3, [r7, #4]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000cf0 	.word	0x20000cf0

08004fe4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fee:	4b4f      	ldr	r3, [pc, #316]	; (800512c <xTaskIncrementTick+0x148>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f040 808f 	bne.w	8005116 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ff8:	4b4d      	ldr	r3, [pc, #308]	; (8005130 <xTaskIncrementTick+0x14c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005000:	4a4b      	ldr	r2, [pc, #300]	; (8005130 <xTaskIncrementTick+0x14c>)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d120      	bne.n	800504e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800500c:	4b49      	ldr	r3, [pc, #292]	; (8005134 <xTaskIncrementTick+0x150>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <xTaskIncrementTick+0x48>
	__asm volatile
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	603b      	str	r3, [r7, #0]
}
 8005028:	bf00      	nop
 800502a:	e7fe      	b.n	800502a <xTaskIncrementTick+0x46>
 800502c:	4b41      	ldr	r3, [pc, #260]	; (8005134 <xTaskIncrementTick+0x150>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	4b41      	ldr	r3, [pc, #260]	; (8005138 <xTaskIncrementTick+0x154>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a3f      	ldr	r2, [pc, #252]	; (8005134 <xTaskIncrementTick+0x150>)
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	4a3f      	ldr	r2, [pc, #252]	; (8005138 <xTaskIncrementTick+0x154>)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6013      	str	r3, [r2, #0]
 8005040:	4b3e      	ldr	r3, [pc, #248]	; (800513c <xTaskIncrementTick+0x158>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	4a3d      	ldr	r2, [pc, #244]	; (800513c <xTaskIncrementTick+0x158>)
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	f000 fadb 	bl	8005604 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800504e:	4b3c      	ldr	r3, [pc, #240]	; (8005140 <xTaskIncrementTick+0x15c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	429a      	cmp	r2, r3
 8005056:	d349      	bcc.n	80050ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005058:	4b36      	ldr	r3, [pc, #216]	; (8005134 <xTaskIncrementTick+0x150>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d104      	bne.n	800506c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005062:	4b37      	ldr	r3, [pc, #220]	; (8005140 <xTaskIncrementTick+0x15c>)
 8005064:	f04f 32ff 	mov.w	r2, #4294967295
 8005068:	601a      	str	r2, [r3, #0]
					break;
 800506a:	e03f      	b.n	80050ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800506c:	4b31      	ldr	r3, [pc, #196]	; (8005134 <xTaskIncrementTick+0x150>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	429a      	cmp	r2, r3
 8005082:	d203      	bcs.n	800508c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005084:	4a2e      	ldr	r2, [pc, #184]	; (8005140 <xTaskIncrementTick+0x15c>)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800508a:	e02f      	b.n	80050ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	3304      	adds	r3, #4
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe ff79 	bl	8003f88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	3318      	adds	r3, #24
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fe ff70 	bl	8003f88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <xTaskIncrementTick+0x160>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d903      	bls.n	80050bc <xTaskIncrementTick+0xd8>
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	4a22      	ldr	r2, [pc, #136]	; (8005144 <xTaskIncrementTick+0x160>)
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <xTaskIncrementTick+0x164>)
 80050ca:	441a      	add	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	3304      	adds	r3, #4
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f7fe fefb 	bl	8003ece <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050dc:	4b1b      	ldr	r3, [pc, #108]	; (800514c <xTaskIncrementTick+0x168>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d3b8      	bcc.n	8005058 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80050e6:	2301      	movs	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ea:	e7b5      	b.n	8005058 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80050ec:	4b17      	ldr	r3, [pc, #92]	; (800514c <xTaskIncrementTick+0x168>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f2:	4915      	ldr	r1, [pc, #84]	; (8005148 <xTaskIncrementTick+0x164>)
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d901      	bls.n	8005108 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005104:	2301      	movs	r3, #1
 8005106:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005108:	4b11      	ldr	r3, [pc, #68]	; (8005150 <xTaskIncrementTick+0x16c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d007      	beq.n	8005120 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005110:	2301      	movs	r3, #1
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e004      	b.n	8005120 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <xTaskIncrementTick+0x170>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	4a0d      	ldr	r2, [pc, #52]	; (8005154 <xTaskIncrementTick+0x170>)
 800511e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005120:	697b      	ldr	r3, [r7, #20]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000d14 	.word	0x20000d14
 8005130:	20000cf0 	.word	0x20000cf0
 8005134:	20000ca4 	.word	0x20000ca4
 8005138:	20000ca8 	.word	0x20000ca8
 800513c:	20000d04 	.word	0x20000d04
 8005140:	20000d0c 	.word	0x20000d0c
 8005144:	20000cf4 	.word	0x20000cf4
 8005148:	2000081c 	.word	0x2000081c
 800514c:	20000818 	.word	0x20000818
 8005150:	20000d00 	.word	0x20000d00
 8005154:	20000cfc 	.word	0x20000cfc

08005158 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800515e:	4b2a      	ldr	r3, [pc, #168]	; (8005208 <vTaskSwitchContext+0xb0>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005166:	4b29      	ldr	r3, [pc, #164]	; (800520c <vTaskSwitchContext+0xb4>)
 8005168:	2201      	movs	r2, #1
 800516a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800516c:	e046      	b.n	80051fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800516e:	4b27      	ldr	r3, [pc, #156]	; (800520c <vTaskSwitchContext+0xb4>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005174:	4b26      	ldr	r3, [pc, #152]	; (8005210 <vTaskSwitchContext+0xb8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	e010      	b.n	800519e <vTaskSwitchContext+0x46>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10a      	bne.n	8005198 <vTaskSwitchContext+0x40>
	__asm volatile
 8005182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005186:	f383 8811 	msr	BASEPRI, r3
 800518a:	f3bf 8f6f 	isb	sy
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	607b      	str	r3, [r7, #4]
}
 8005194:	bf00      	nop
 8005196:	e7fe      	b.n	8005196 <vTaskSwitchContext+0x3e>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3b01      	subs	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	491d      	ldr	r1, [pc, #116]	; (8005214 <vTaskSwitchContext+0xbc>)
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0e4      	beq.n	800517c <vTaskSwitchContext+0x24>
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4613      	mov	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	4413      	add	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4a15      	ldr	r2, [pc, #84]	; (8005214 <vTaskSwitchContext+0xbc>)
 80051be:	4413      	add	r3, r2
 80051c0:	60bb      	str	r3, [r7, #8]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	685a      	ldr	r2, [r3, #4]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	605a      	str	r2, [r3, #4]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	3308      	adds	r3, #8
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d104      	bne.n	80051e2 <vTaskSwitchContext+0x8a>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4a0b      	ldr	r2, [pc, #44]	; (8005218 <vTaskSwitchContext+0xc0>)
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	4a08      	ldr	r2, [pc, #32]	; (8005210 <vTaskSwitchContext+0xb8>)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80051f2:	4b09      	ldr	r3, [pc, #36]	; (8005218 <vTaskSwitchContext+0xc0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3354      	adds	r3, #84	; 0x54
 80051f8:	4a08      	ldr	r2, [pc, #32]	; (800521c <vTaskSwitchContext+0xc4>)
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	20000d14 	.word	0x20000d14
 800520c:	20000d00 	.word	0x20000d00
 8005210:	20000cf4 	.word	0x20000cf4
 8005214:	2000081c 	.word	0x2000081c
 8005218:	20000818 	.word	0x20000818
 800521c:	20000010 	.word	0x20000010

08005220 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	60fb      	str	r3, [r7, #12]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005246:	4b07      	ldr	r3, [pc, #28]	; (8005264 <vTaskPlaceOnEventList+0x44>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3318      	adds	r3, #24
 800524c:	4619      	mov	r1, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fe fe61 	bl	8003f16 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005254:	2101      	movs	r1, #1
 8005256:	6838      	ldr	r0, [r7, #0]
 8005258:	f000 fa80 	bl	800575c <prvAddCurrentTaskToDelayedList>
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000818 	.word	0x20000818

08005268 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10a      	bne.n	8005290 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	617b      	str	r3, [r7, #20]
}
 800528c:	bf00      	nop
 800528e:	e7fe      	b.n	800528e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3318      	adds	r3, #24
 8005296:	4619      	mov	r1, r3
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7fe fe18 	bl	8003ece <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80052a4:	f04f 33ff 	mov.w	r3, #4294967295
 80052a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	68b8      	ldr	r0, [r7, #8]
 80052ae:	f000 fa55 	bl	800575c <prvAddCurrentTaskToDelayedList>
	}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000818 	.word	0x20000818

080052c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10a      	bne.n	80052ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60fb      	str	r3, [r7, #12]
}
 80052e8:	bf00      	nop
 80052ea:	e7fe      	b.n	80052ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	3318      	adds	r3, #24
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fe fe49 	bl	8003f88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052f6:	4b1e      	ldr	r3, [pc, #120]	; (8005370 <xTaskRemoveFromEventList+0xb0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d11d      	bne.n	800533a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	3304      	adds	r3, #4
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe fe40 	bl	8003f88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530c:	4b19      	ldr	r3, [pc, #100]	; (8005374 <xTaskRemoveFromEventList+0xb4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d903      	bls.n	800531c <xTaskRemoveFromEventList+0x5c>
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	4a16      	ldr	r2, [pc, #88]	; (8005374 <xTaskRemoveFromEventList+0xb4>)
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	4613      	mov	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4a13      	ldr	r2, [pc, #76]	; (8005378 <xTaskRemoveFromEventList+0xb8>)
 800532a:	441a      	add	r2, r3
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4610      	mov	r0, r2
 8005334:	f7fe fdcb 	bl	8003ece <vListInsertEnd>
 8005338:	e005      	b.n	8005346 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	3318      	adds	r3, #24
 800533e:	4619      	mov	r1, r3
 8005340:	480e      	ldr	r0, [pc, #56]	; (800537c <xTaskRemoveFromEventList+0xbc>)
 8005342:	f7fe fdc4 	bl	8003ece <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534a:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <xTaskRemoveFromEventList+0xc0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	429a      	cmp	r2, r3
 8005352:	d905      	bls.n	8005360 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005354:	2301      	movs	r3, #1
 8005356:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <xTaskRemoveFromEventList+0xc4>)
 800535a:	2201      	movs	r2, #1
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e001      	b.n	8005364 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005364:	697b      	ldr	r3, [r7, #20]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20000d14 	.word	0x20000d14
 8005374:	20000cf4 	.word	0x20000cf4
 8005378:	2000081c 	.word	0x2000081c
 800537c:	20000cac 	.word	0x20000cac
 8005380:	20000818 	.word	0x20000818
 8005384:	20000d00 	.word	0x20000d00

08005388 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <vTaskInternalSetTimeOutState+0x24>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005398:	4b05      	ldr	r3, [pc, #20]	; (80053b0 <vTaskInternalSetTimeOutState+0x28>)
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	605a      	str	r2, [r3, #4]
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	20000d04 	.word	0x20000d04
 80053b0:	20000cf0 	.word	0x20000cf0

080053b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	613b      	str	r3, [r7, #16]
}
 80053d6:	bf00      	nop
 80053d8:	e7fe      	b.n	80053d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	60fb      	str	r3, [r7, #12]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80053f6:	f000 fe7d 	bl	80060f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80053fa:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <xTaskCheckForTimeOut+0xbc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d102      	bne.n	800541a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	e023      	b.n	8005462 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b15      	ldr	r3, [pc, #84]	; (8005474 <xTaskCheckForTimeOut+0xc0>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d007      	beq.n	8005436 <xTaskCheckForTimeOut+0x82>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	429a      	cmp	r2, r3
 800542e:	d302      	bcc.n	8005436 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005430:	2301      	movs	r3, #1
 8005432:	61fb      	str	r3, [r7, #28]
 8005434:	e015      	b.n	8005462 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	429a      	cmp	r2, r3
 800543e:	d20b      	bcs.n	8005458 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1ad2      	subs	r2, r2, r3
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f7ff ff9b 	bl	8005388 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
 8005456:	e004      	b.n	8005462 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800545e:	2301      	movs	r3, #1
 8005460:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005462:	f000 fe77 	bl	8006154 <vPortExitCritical>

	return xReturn;
 8005466:	69fb      	ldr	r3, [r7, #28]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20000cf0 	.word	0x20000cf0
 8005474:	20000d04 	.word	0x20000d04

08005478 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800547c:	4b03      	ldr	r3, [pc, #12]	; (800548c <vTaskMissedYield+0x14>)
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
}
 8005482:	bf00      	nop
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr
 800548c:	20000d00 	.word	0x20000d00

08005490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005498:	f000 f852 	bl	8005540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800549c:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <prvIdleTask+0x28>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d9f9      	bls.n	8005498 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <prvIdleTask+0x2c>)
 80054a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054b4:	e7f0      	b.n	8005498 <prvIdleTask+0x8>
 80054b6:	bf00      	nop
 80054b8:	2000081c 	.word	0x2000081c
 80054bc:	e000ed04 	.word	0xe000ed04

080054c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054c6:	2300      	movs	r3, #0
 80054c8:	607b      	str	r3, [r7, #4]
 80054ca:	e00c      	b.n	80054e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4a12      	ldr	r2, [pc, #72]	; (8005520 <prvInitialiseTaskLists+0x60>)
 80054d8:	4413      	add	r3, r2
 80054da:	4618      	mov	r0, r3
 80054dc:	f7fe fcca 	bl	8003e74 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3301      	adds	r3, #1
 80054e4:	607b      	str	r3, [r7, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2b37      	cmp	r3, #55	; 0x37
 80054ea:	d9ef      	bls.n	80054cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80054ec:	480d      	ldr	r0, [pc, #52]	; (8005524 <prvInitialiseTaskLists+0x64>)
 80054ee:	f7fe fcc1 	bl	8003e74 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80054f2:	480d      	ldr	r0, [pc, #52]	; (8005528 <prvInitialiseTaskLists+0x68>)
 80054f4:	f7fe fcbe 	bl	8003e74 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80054f8:	480c      	ldr	r0, [pc, #48]	; (800552c <prvInitialiseTaskLists+0x6c>)
 80054fa:	f7fe fcbb 	bl	8003e74 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80054fe:	480c      	ldr	r0, [pc, #48]	; (8005530 <prvInitialiseTaskLists+0x70>)
 8005500:	f7fe fcb8 	bl	8003e74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005504:	480b      	ldr	r0, [pc, #44]	; (8005534 <prvInitialiseTaskLists+0x74>)
 8005506:	f7fe fcb5 	bl	8003e74 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800550a:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <prvInitialiseTaskLists+0x78>)
 800550c:	4a05      	ldr	r2, [pc, #20]	; (8005524 <prvInitialiseTaskLists+0x64>)
 800550e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <prvInitialiseTaskLists+0x7c>)
 8005512:	4a05      	ldr	r2, [pc, #20]	; (8005528 <prvInitialiseTaskLists+0x68>)
 8005514:	601a      	str	r2, [r3, #0]
}
 8005516:	bf00      	nop
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	2000081c 	.word	0x2000081c
 8005524:	20000c7c 	.word	0x20000c7c
 8005528:	20000c90 	.word	0x20000c90
 800552c:	20000cac 	.word	0x20000cac
 8005530:	20000cc0 	.word	0x20000cc0
 8005534:	20000cd8 	.word	0x20000cd8
 8005538:	20000ca4 	.word	0x20000ca4
 800553c:	20000ca8 	.word	0x20000ca8

08005540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005546:	e019      	b.n	800557c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005548:	f000 fdd4 	bl	80060f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800554c:	4b10      	ldr	r3, [pc, #64]	; (8005590 <prvCheckTasksWaitingTermination+0x50>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3304      	adds	r3, #4
 8005558:	4618      	mov	r0, r3
 800555a:	f7fe fd15 	bl	8003f88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800555e:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <prvCheckTasksWaitingTermination+0x54>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3b01      	subs	r3, #1
 8005564:	4a0b      	ldr	r2, [pc, #44]	; (8005594 <prvCheckTasksWaitingTermination+0x54>)
 8005566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005568:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <prvCheckTasksWaitingTermination+0x58>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3b01      	subs	r3, #1
 800556e:	4a0a      	ldr	r2, [pc, #40]	; (8005598 <prvCheckTasksWaitingTermination+0x58>)
 8005570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005572:	f000 fdef 	bl	8006154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f810 	bl	800559c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800557c:	4b06      	ldr	r3, [pc, #24]	; (8005598 <prvCheckTasksWaitingTermination+0x58>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e1      	bne.n	8005548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000cc0 	.word	0x20000cc0
 8005594:	20000cec 	.word	0x20000cec
 8005598:	20000cd4 	.word	0x20000cd4

0800559c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3354      	adds	r3, #84	; 0x54
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 f959 	bl	8006860 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d108      	bne.n	80055ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 ff87 	bl	80064d0 <vPortFree>
				vPortFree( pxTCB );
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 ff84 	bl	80064d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055c8:	e018      	b.n	80055fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d103      	bne.n	80055dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 ff7b 	bl	80064d0 <vPortFree>
	}
 80055da:	e00f      	b.n	80055fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d00a      	beq.n	80055fc <prvDeleteTCB+0x60>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60fb      	str	r3, [r7, #12]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <prvDeleteTCB+0x5e>
	}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <prvResetNextTaskUnblockTime+0x38>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d104      	bne.n	800561e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005614:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <prvResetNextTaskUnblockTime+0x3c>)
 8005616:	f04f 32ff 	mov.w	r2, #4294967295
 800561a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800561c:	e008      	b.n	8005630 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800561e:	4b07      	ldr	r3, [pc, #28]	; (800563c <prvResetNextTaskUnblockTime+0x38>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	4a04      	ldr	r2, [pc, #16]	; (8005640 <prvResetNextTaskUnblockTime+0x3c>)
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	20000ca4 	.word	0x20000ca4
 8005640:	20000d0c 	.word	0x20000d0c

08005644 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800564a:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <xTaskGetSchedulerState+0x34>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005652:	2301      	movs	r3, #1
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	e008      	b.n	800566a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005658:	4b08      	ldr	r3, [pc, #32]	; (800567c <xTaskGetSchedulerState+0x38>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005660:	2302      	movs	r3, #2
 8005662:	607b      	str	r3, [r7, #4]
 8005664:	e001      	b.n	800566a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005666:	2300      	movs	r3, #0
 8005668:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800566a:	687b      	ldr	r3, [r7, #4]
	}
 800566c:	4618      	mov	r0, r3
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	20000cf8 	.word	0x20000cf8
 800567c:	20000d14 	.word	0x20000d14

08005680 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d056      	beq.n	8005744 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005696:	4b2e      	ldr	r3, [pc, #184]	; (8005750 <xTaskPriorityDisinherit+0xd0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	429a      	cmp	r2, r3
 800569e:	d00a      	beq.n	80056b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60fb      	str	r3, [r7, #12]
}
 80056b2:	bf00      	nop
 80056b4:	e7fe      	b.n	80056b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	60bb      	str	r3, [r7, #8]
}
 80056d0:	bf00      	nop
 80056d2:	e7fe      	b.n	80056d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056d8:	1e5a      	subs	r2, r3, #1
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d02c      	beq.n	8005744 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d128      	bne.n	8005744 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fe fc46 	bl	8003f88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005714:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <xTaskPriorityDisinherit+0xd4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d903      	bls.n	8005724 <xTaskPriorityDisinherit+0xa4>
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	4a0c      	ldr	r2, [pc, #48]	; (8005754 <xTaskPriorityDisinherit+0xd4>)
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4a09      	ldr	r2, [pc, #36]	; (8005758 <xTaskPriorityDisinherit+0xd8>)
 8005732:	441a      	add	r2, r3
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	3304      	adds	r3, #4
 8005738:	4619      	mov	r1, r3
 800573a:	4610      	mov	r0, r2
 800573c:	f7fe fbc7 	bl	8003ece <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005744:	697b      	ldr	r3, [r7, #20]
	}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000818 	.word	0x20000818
 8005754:	20000cf4 	.word	0x20000cf4
 8005758:	2000081c 	.word	0x2000081c

0800575c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005766:	4b21      	ldr	r3, [pc, #132]	; (80057ec <prvAddCurrentTaskToDelayedList+0x90>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800576c:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3304      	adds	r3, #4
 8005772:	4618      	mov	r0, r3
 8005774:	f7fe fc08 	bl	8003f88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577e:	d10a      	bne.n	8005796 <prvAddCurrentTaskToDelayedList+0x3a>
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005786:	4b1a      	ldr	r3, [pc, #104]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4819      	ldr	r0, [pc, #100]	; (80057f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005790:	f7fe fb9d 	bl	8003ece <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005794:	e026      	b.n	80057e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4413      	add	r3, r2
 800579c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800579e:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d209      	bcs.n	80057c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057ae:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7fe fbab 	bl	8003f16 <vListInsert>
}
 80057c0:	e010      	b.n	80057e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c2:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3304      	adds	r3, #4
 80057cc:	4619      	mov	r1, r3
 80057ce:	4610      	mov	r0, r2
 80057d0:	f7fe fba1 	bl	8003f16 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057d4:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d202      	bcs.n	80057e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057de:	4a08      	ldr	r2, [pc, #32]	; (8005800 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6013      	str	r3, [r2, #0]
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000cf0 	.word	0x20000cf0
 80057f0:	20000818 	.word	0x20000818
 80057f4:	20000cd8 	.word	0x20000cd8
 80057f8:	20000ca8 	.word	0x20000ca8
 80057fc:	20000ca4 	.word	0x20000ca4
 8005800:	20000d0c 	.word	0x20000d0c

08005804 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08a      	sub	sp, #40	; 0x28
 8005808:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800580e:	f000 fb07 	bl	8005e20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005812:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <xTimerCreateTimerTask+0x80>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d021      	beq.n	800585e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005822:	1d3a      	adds	r2, r7, #4
 8005824:	f107 0108 	add.w	r1, r7, #8
 8005828:	f107 030c 	add.w	r3, r7, #12
 800582c:	4618      	mov	r0, r3
 800582e:	f7fe fb07 	bl	8003e40 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	9202      	str	r2, [sp, #8]
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	2302      	movs	r3, #2
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2300      	movs	r3, #0
 8005842:	460a      	mov	r2, r1
 8005844:	4910      	ldr	r1, [pc, #64]	; (8005888 <xTimerCreateTimerTask+0x84>)
 8005846:	4811      	ldr	r0, [pc, #68]	; (800588c <xTimerCreateTimerTask+0x88>)
 8005848:	f7ff f8b4 	bl	80049b4 <xTaskCreateStatic>
 800584c:	4603      	mov	r3, r0
 800584e:	4a10      	ldr	r2, [pc, #64]	; (8005890 <xTimerCreateTimerTask+0x8c>)
 8005850:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005852:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <xTimerCreateTimerTask+0x8c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800585a:	2301      	movs	r3, #1
 800585c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10a      	bne.n	800587a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	613b      	str	r3, [r7, #16]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800587a:	697b      	ldr	r3, [r7, #20]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000d48 	.word	0x20000d48
 8005888:	0800710c 	.word	0x0800710c
 800588c:	080059c9 	.word	0x080059c9
 8005890:	20000d4c 	.word	0x20000d4c

08005894 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	; 0x28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	623b      	str	r3, [r7, #32]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058c2:	4b1a      	ldr	r3, [pc, #104]	; (800592c <xTimerGenericCommand+0x98>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d02a      	beq.n	8005920 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b05      	cmp	r3, #5
 80058da:	dc18      	bgt.n	800590e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058dc:	f7ff feb2 	bl	8005644 <xTaskGetSchedulerState>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d109      	bne.n	80058fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058e6:	4b11      	ldr	r3, [pc, #68]	; (800592c <xTimerGenericCommand+0x98>)
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	f107 0110 	add.w	r1, r7, #16
 80058ee:	2300      	movs	r3, #0
 80058f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058f2:	f7fe fc77 	bl	80041e4 <xQueueGenericSend>
 80058f6:	6278      	str	r0, [r7, #36]	; 0x24
 80058f8:	e012      	b.n	8005920 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <xTimerGenericCommand+0x98>)
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	f107 0110 	add.w	r1, r7, #16
 8005902:	2300      	movs	r3, #0
 8005904:	2200      	movs	r2, #0
 8005906:	f7fe fc6d 	bl	80041e4 <xQueueGenericSend>
 800590a:	6278      	str	r0, [r7, #36]	; 0x24
 800590c:	e008      	b.n	8005920 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800590e:	4b07      	ldr	r3, [pc, #28]	; (800592c <xTimerGenericCommand+0x98>)
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	f107 0110 	add.w	r1, r7, #16
 8005916:	2300      	movs	r3, #0
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	f7fe fd61 	bl	80043e0 <xQueueGenericSendFromISR>
 800591e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005922:	4618      	mov	r0, r3
 8005924:	3728      	adds	r7, #40	; 0x28
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000d48 	.word	0x20000d48

08005930 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593a:	4b22      	ldr	r3, [pc, #136]	; (80059c4 <prvProcessExpiredTimer+0x94>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	3304      	adds	r3, #4
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe fb1d 	bl	8003f88 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d022      	beq.n	80059a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	18d1      	adds	r1, r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	6978      	ldr	r0, [r7, #20]
 800596a:	f000 f8d1 	bl	8005b10 <prvInsertTimerInActiveList>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01f      	beq.n	80059b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005974:	2300      	movs	r3, #0
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2300      	movs	r3, #0
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	2100      	movs	r1, #0
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f7ff ff88 	bl	8005894 <xTimerGenericCommand>
 8005984:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d113      	bne.n	80059b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	60fb      	str	r3, [r7, #12]
}
 800599e:	bf00      	nop
 80059a0:	e7fe      	b.n	80059a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	6a1b      	ldr	r3, [r3, #32]
 80059b8:	6978      	ldr	r0, [r7, #20]
 80059ba:	4798      	blx	r3
}
 80059bc:	bf00      	nop
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20000d40 	.word	0x20000d40

080059c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059d0:	f107 0308 	add.w	r3, r7, #8
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 f857 	bl	8005a88 <prvGetNextExpireTime>
 80059da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4619      	mov	r1, r3
 80059e0:	68f8      	ldr	r0, [r7, #12]
 80059e2:	f000 f803 	bl	80059ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059e6:	f000 f8d5 	bl	8005b94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059ea:	e7f1      	b.n	80059d0 <prvTimerTask+0x8>

080059ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059f6:	f7ff fa39 	bl	8004e6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059fa:	f107 0308 	add.w	r3, r7, #8
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 f866 	bl	8005ad0 <prvSampleTimeNow>
 8005a04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d130      	bne.n	8005a6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10a      	bne.n	8005a28 <prvProcessTimerOrBlockTask+0x3c>
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d806      	bhi.n	8005a28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a1a:	f7ff fa35 	bl	8004e88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a1e:	68f9      	ldr	r1, [r7, #12]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7ff ff85 	bl	8005930 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a26:	e024      	b.n	8005a72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d008      	beq.n	8005a40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <prvProcessTimerOrBlockTask+0x90>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <prvProcessTimerOrBlockTask+0x50>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <prvProcessTimerOrBlockTask+0x52>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <prvProcessTimerOrBlockTask+0x94>)
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	f7fe ff7d 	bl	800494c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a52:	f7ff fa19 	bl	8004e88 <xTaskResumeAll>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10a      	bne.n	8005a72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a5c:	4b09      	ldr	r3, [pc, #36]	; (8005a84 <prvProcessTimerOrBlockTask+0x98>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	f3bf 8f6f 	isb	sy
}
 8005a6c:	e001      	b.n	8005a72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a6e:	f7ff fa0b 	bl	8004e88 <xTaskResumeAll>
}
 8005a72:	bf00      	nop
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000d44 	.word	0x20000d44
 8005a80:	20000d48 	.word	0x20000d48
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a90:	4b0e      	ldr	r3, [pc, #56]	; (8005acc <prvGetNextExpireTime+0x44>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <prvGetNextExpireTime+0x16>
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	e000      	b.n	8005aa0 <prvGetNextExpireTime+0x18>
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d105      	bne.n	8005ab8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005aac:	4b07      	ldr	r3, [pc, #28]	; (8005acc <prvGetNextExpireTime+0x44>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	e001      	b.n	8005abc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005abc:	68fb      	ldr	r3, [r7, #12]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000d40 	.word	0x20000d40

08005ad0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ad8:	f7ff fa74 	bl	8004fc4 <xTaskGetTickCount>
 8005adc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005ade:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <prvSampleTimeNow+0x3c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d205      	bcs.n	8005af4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ae8:	f000 f936 	bl	8005d58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	e002      	b.n	8005afa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005afa:	4a04      	ldr	r2, [pc, #16]	; (8005b0c <prvSampleTimeNow+0x3c>)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b00:	68fb      	ldr	r3, [r7, #12]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000d50 	.word	0x20000d50

08005b10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
 8005b1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d812      	bhi.n	8005b5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d302      	bcc.n	8005b4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	617b      	str	r3, [r7, #20]
 8005b48:	e01b      	b.n	8005b82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b4a:	4b10      	ldr	r3, [pc, #64]	; (8005b8c <prvInsertTimerInActiveList+0x7c>)
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3304      	adds	r3, #4
 8005b52:	4619      	mov	r1, r3
 8005b54:	4610      	mov	r0, r2
 8005b56:	f7fe f9de 	bl	8003f16 <vListInsert>
 8005b5a:	e012      	b.n	8005b82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d206      	bcs.n	8005b72 <prvInsertTimerInActiveList+0x62>
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d302      	bcc.n	8005b72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e007      	b.n	8005b82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b72:	4b07      	ldr	r3, [pc, #28]	; (8005b90 <prvInsertTimerInActiveList+0x80>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	f7fe f9ca 	bl	8003f16 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b82:	697b      	ldr	r3, [r7, #20]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20000d44 	.word	0x20000d44
 8005b90:	20000d40 	.word	0x20000d40

08005b94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08e      	sub	sp, #56	; 0x38
 8005b98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b9a:	e0ca      	b.n	8005d32 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da18      	bge.n	8005bd4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ba2:	1d3b      	adds	r3, r7, #4
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10a      	bne.n	8005bc4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	61fb      	str	r3, [r7, #28]
}
 8005bc0:	bf00      	nop
 8005bc2:	e7fe      	b.n	8005bc2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bca:	6850      	ldr	r0, [r2, #4]
 8005bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bce:	6892      	ldr	r2, [r2, #8]
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f2c0 80aa 	blt.w	8005d30 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d004      	beq.n	8005bf2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	3304      	adds	r3, #4
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe f9cb 	bl	8003f88 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff ff6b 	bl	8005ad0 <prvSampleTimeNow>
 8005bfa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b09      	cmp	r3, #9
 8005c00:	f200 8097 	bhi.w	8005d32 <prvProcessReceivedCommands+0x19e>
 8005c04:	a201      	add	r2, pc, #4	; (adr r2, 8005c0c <prvProcessReceivedCommands+0x78>)
 8005c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0a:	bf00      	nop
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c35 	.word	0x08005c35
 8005c14:	08005c35 	.word	0x08005c35
 8005c18:	08005ca9 	.word	0x08005ca9
 8005c1c:	08005cbd 	.word	0x08005cbd
 8005c20:	08005d07 	.word	0x08005d07
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c35 	.word	0x08005c35
 8005c2c:	08005ca9 	.word	0x08005ca9
 8005c30:	08005cbd 	.word	0x08005cbd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c3a:	f043 0301 	orr.w	r3, r3, #1
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	18d1      	adds	r1, r2, r3
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c54:	f7ff ff5c 	bl	8005b10 <prvInsertTimerInActiveList>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d069      	beq.n	8005d32 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d05e      	beq.n	8005d32 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	441a      	add	r2, r3
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	2300      	movs	r3, #0
 8005c82:	2100      	movs	r1, #0
 8005c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005c86:	f7ff fe05 	bl	8005894 <xTimerGenericCommand>
 8005c8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d14f      	bne.n	8005d32 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	61bb      	str	r3, [r7, #24]
}
 8005ca4:	bf00      	nop
 8005ca6:	e7fe      	b.n	8005ca6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cae:	f023 0301 	bic.w	r3, r3, #1
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005cba:	e03a      	b.n	8005d32 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc2:	f043 0301 	orr.w	r3, r3, #1
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10a      	bne.n	8005cf2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	617b      	str	r3, [r7, #20]
}
 8005cee:	bf00      	nop
 8005cf0:	e7fe      	b.n	8005cf0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	18d1      	adds	r1, r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d00:	f7ff ff06 	bl	8005b10 <prvInsertTimerInActiveList>
					break;
 8005d04:	e015      	b.n	8005d32 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d103      	bne.n	8005d1c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d16:	f000 fbdb 	bl	80064d0 <vPortFree>
 8005d1a:	e00a      	b.n	8005d32 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d2e:	e000      	b.n	8005d32 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005d30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d32:	4b08      	ldr	r3, [pc, #32]	; (8005d54 <prvProcessReceivedCommands+0x1c0>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	1d39      	adds	r1, r7, #4
 8005d38:	2200      	movs	r2, #0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fbec 	bl	8004518 <xQueueReceive>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f47f af2a 	bne.w	8005b9c <prvProcessReceivedCommands+0x8>
	}
}
 8005d48:	bf00      	nop
 8005d4a:	bf00      	nop
 8005d4c:	3730      	adds	r7, #48	; 0x30
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000d48 	.word	0x20000d48

08005d58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d5e:	e048      	b.n	8005df2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d60:	4b2d      	ldr	r3, [pc, #180]	; (8005e18 <prvSwitchTimerLists+0xc0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <prvSwitchTimerLists+0xc0>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3304      	adds	r3, #4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7fe f905 	bl	8003f88 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d02e      	beq.n	8005df2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d90e      	bls.n	8005dc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005db2:	4b19      	ldr	r3, [pc, #100]	; (8005e18 <prvSwitchTimerLists+0xc0>)
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3304      	adds	r3, #4
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4610      	mov	r0, r2
 8005dbe:	f7fe f8aa 	bl	8003f16 <vListInsert>
 8005dc2:	e016      	b.n	8005df2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	2100      	movs	r1, #0
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f7ff fd60 	bl	8005894 <xTimerGenericCommand>
 8005dd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	603b      	str	r3, [r7, #0]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005df2:	4b09      	ldr	r3, [pc, #36]	; (8005e18 <prvSwitchTimerLists+0xc0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1b1      	bne.n	8005d60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005dfc:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <prvSwitchTimerLists+0xc0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <prvSwitchTimerLists+0xc4>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <prvSwitchTimerLists+0xc0>)
 8005e08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e0a:	4a04      	ldr	r2, [pc, #16]	; (8005e1c <prvSwitchTimerLists+0xc4>)
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	6013      	str	r3, [r2, #0]
}
 8005e10:	bf00      	nop
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000d40 	.word	0x20000d40
 8005e1c:	20000d44 	.word	0x20000d44

08005e20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e26:	f000 f965 	bl	80060f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e2a:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <prvCheckForValidListAndQueue+0x60>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d120      	bne.n	8005e74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e32:	4814      	ldr	r0, [pc, #80]	; (8005e84 <prvCheckForValidListAndQueue+0x64>)
 8005e34:	f7fe f81e 	bl	8003e74 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e38:	4813      	ldr	r0, [pc, #76]	; (8005e88 <prvCheckForValidListAndQueue+0x68>)
 8005e3a:	f7fe f81b 	bl	8003e74 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e3e:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <prvCheckForValidListAndQueue+0x6c>)
 8005e40:	4a10      	ldr	r2, [pc, #64]	; (8005e84 <prvCheckForValidListAndQueue+0x64>)
 8005e42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e44:	4b12      	ldr	r3, [pc, #72]	; (8005e90 <prvCheckForValidListAndQueue+0x70>)
 8005e46:	4a10      	ldr	r2, [pc, #64]	; (8005e88 <prvCheckForValidListAndQueue+0x68>)
 8005e48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <prvCheckForValidListAndQueue+0x74>)
 8005e50:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <prvCheckForValidListAndQueue+0x78>)
 8005e52:	2110      	movs	r1, #16
 8005e54:	200a      	movs	r0, #10
 8005e56:	f7fe f929 	bl	80040ac <xQueueGenericCreateStatic>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4a08      	ldr	r2, [pc, #32]	; (8005e80 <prvCheckForValidListAndQueue+0x60>)
 8005e5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e60:	4b07      	ldr	r3, [pc, #28]	; (8005e80 <prvCheckForValidListAndQueue+0x60>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e68:	4b05      	ldr	r3, [pc, #20]	; (8005e80 <prvCheckForValidListAndQueue+0x60>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	490b      	ldr	r1, [pc, #44]	; (8005e9c <prvCheckForValidListAndQueue+0x7c>)
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe fd42 	bl	80048f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e74:	f000 f96e 	bl	8006154 <vPortExitCritical>
}
 8005e78:	bf00      	nop
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000d48 	.word	0x20000d48
 8005e84:	20000d18 	.word	0x20000d18
 8005e88:	20000d2c 	.word	0x20000d2c
 8005e8c:	20000d40 	.word	0x20000d40
 8005e90:	20000d44 	.word	0x20000d44
 8005e94:	20000df4 	.word	0x20000df4
 8005e98:	20000d54 	.word	0x20000d54
 8005e9c:	08007114 	.word	0x08007114

08005ea0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3b04      	subs	r3, #4
 8005eb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3b04      	subs	r3, #4
 8005ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f023 0201 	bic.w	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3b04      	subs	r3, #4
 8005ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ed0:	4a0c      	ldr	r2, [pc, #48]	; (8005f04 <pxPortInitialiseStack+0x64>)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	3b14      	subs	r3, #20
 8005eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3b04      	subs	r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f06f 0202 	mvn.w	r2, #2
 8005eee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3b20      	subs	r3, #32
 8005ef4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	08005f09 	.word	0x08005f09

08005f08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f12:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <prvTaskExitError+0x54>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1a:	d00a      	beq.n	8005f32 <prvTaskExitError+0x2a>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	60fb      	str	r3, [r7, #12]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <prvTaskExitError+0x28>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	60bb      	str	r3, [r7, #8]
}
 8005f44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f46:	bf00      	nop
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0fc      	beq.n	8005f48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f4e:	bf00      	nop
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	2000000c 	.word	0x2000000c

08005f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <pxCurrentTCBConst2>)
 8005f62:	6819      	ldr	r1, [r3, #0]
 8005f64:	6808      	ldr	r0, [r1, #0]
 8005f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	f380 8809 	msr	PSP, r0
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8811 	msr	BASEPRI, r0
 8005f7a:	4770      	bx	lr
 8005f7c:	f3af 8000 	nop.w

08005f80 <pxCurrentTCBConst2>:
 8005f80:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop

08005f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f88:	4808      	ldr	r0, [pc, #32]	; (8005fac <prvPortStartFirstTask+0x24>)
 8005f8a:	6800      	ldr	r0, [r0, #0]
 8005f8c:	6800      	ldr	r0, [r0, #0]
 8005f8e:	f380 8808 	msr	MSP, r0
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8814 	msr	CONTROL, r0
 8005f9a:	b662      	cpsie	i
 8005f9c:	b661      	cpsie	f
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	df00      	svc	0
 8005fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005faa:	bf00      	nop
 8005fac:	e000ed08 	.word	0xe000ed08

08005fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b086      	sub	sp, #24
 8005fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005fb6:	4b46      	ldr	r3, [pc, #280]	; (80060d0 <xPortStartScheduler+0x120>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a46      	ldr	r2, [pc, #280]	; (80060d4 <xPortStartScheduler+0x124>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d10a      	bne.n	8005fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	613b      	str	r3, [r7, #16]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005fd6:	4b3e      	ldr	r3, [pc, #248]	; (80060d0 <xPortStartScheduler+0x120>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a3f      	ldr	r2, [pc, #252]	; (80060d8 <xPortStartScheduler+0x128>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d10a      	bne.n	8005ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60fb      	str	r3, [r7, #12]
}
 8005ff2:	bf00      	nop
 8005ff4:	e7fe      	b.n	8005ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ff6:	4b39      	ldr	r3, [pc, #228]	; (80060dc <xPortStartScheduler+0x12c>)
 8005ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	22ff      	movs	r2, #255	; 0xff
 8006006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006018:	b2da      	uxtb	r2, r3
 800601a:	4b31      	ldr	r3, [pc, #196]	; (80060e0 <xPortStartScheduler+0x130>)
 800601c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800601e:	4b31      	ldr	r3, [pc, #196]	; (80060e4 <xPortStartScheduler+0x134>)
 8006020:	2207      	movs	r2, #7
 8006022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006024:	e009      	b.n	800603a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006026:	4b2f      	ldr	r3, [pc, #188]	; (80060e4 <xPortStartScheduler+0x134>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3b01      	subs	r3, #1
 800602c:	4a2d      	ldr	r2, [pc, #180]	; (80060e4 <xPortStartScheduler+0x134>)
 800602e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	b2db      	uxtb	r3, r3
 8006038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006042:	2b80      	cmp	r3, #128	; 0x80
 8006044:	d0ef      	beq.n	8006026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006046:	4b27      	ldr	r3, [pc, #156]	; (80060e4 <xPortStartScheduler+0x134>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1c3 0307 	rsb	r3, r3, #7
 800604e:	2b04      	cmp	r3, #4
 8006050:	d00a      	beq.n	8006068 <xPortStartScheduler+0xb8>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	60bb      	str	r3, [r7, #8]
}
 8006064:	bf00      	nop
 8006066:	e7fe      	b.n	8006066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006068:	4b1e      	ldr	r3, [pc, #120]	; (80060e4 <xPortStartScheduler+0x134>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	021b      	lsls	r3, r3, #8
 800606e:	4a1d      	ldr	r2, [pc, #116]	; (80060e4 <xPortStartScheduler+0x134>)
 8006070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006072:	4b1c      	ldr	r3, [pc, #112]	; (80060e4 <xPortStartScheduler+0x134>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800607a:	4a1a      	ldr	r2, [pc, #104]	; (80060e4 <xPortStartScheduler+0x134>)
 800607c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	b2da      	uxtb	r2, r3
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006086:	4b18      	ldr	r3, [pc, #96]	; (80060e8 <xPortStartScheduler+0x138>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <xPortStartScheduler+0x138>)
 800608c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006092:	4b15      	ldr	r3, [pc, #84]	; (80060e8 <xPortStartScheduler+0x138>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a14      	ldr	r2, [pc, #80]	; (80060e8 <xPortStartScheduler+0x138>)
 8006098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800609c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800609e:	f000 f8dd 	bl	800625c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060a2:	4b12      	ldr	r3, [pc, #72]	; (80060ec <xPortStartScheduler+0x13c>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060a8:	f000 f8fc 	bl	80062a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060ac:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <xPortStartScheduler+0x140>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0f      	ldr	r2, [pc, #60]	; (80060f0 <xPortStartScheduler+0x140>)
 80060b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80060b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060b8:	f7ff ff66 	bl	8005f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060bc:	f7ff f84c 	bl	8005158 <vTaskSwitchContext>
	prvTaskExitError();
 80060c0:	f7ff ff22 	bl	8005f08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	e000ed00 	.word	0xe000ed00
 80060d4:	410fc271 	.word	0x410fc271
 80060d8:	410fc270 	.word	0x410fc270
 80060dc:	e000e400 	.word	0xe000e400
 80060e0:	20000e44 	.word	0x20000e44
 80060e4:	20000e48 	.word	0x20000e48
 80060e8:	e000ed20 	.word	0xe000ed20
 80060ec:	2000000c 	.word	0x2000000c
 80060f0:	e000ef34 	.word	0xe000ef34

080060f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
	__asm volatile
 80060fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060fe:	f383 8811 	msr	BASEPRI, r3
 8006102:	f3bf 8f6f 	isb	sy
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	607b      	str	r3, [r7, #4]
}
 800610c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800610e:	4b0f      	ldr	r3, [pc, #60]	; (800614c <vPortEnterCritical+0x58>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3301      	adds	r3, #1
 8006114:	4a0d      	ldr	r2, [pc, #52]	; (800614c <vPortEnterCritical+0x58>)
 8006116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <vPortEnterCritical+0x58>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d10f      	bne.n	8006140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <vPortEnterCritical+0x5c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <vPortEnterCritical+0x4c>
	__asm volatile
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	603b      	str	r3, [r7, #0]
}
 800613c:	bf00      	nop
 800613e:	e7fe      	b.n	800613e <vPortEnterCritical+0x4a>
	}
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr
 800614c:	2000000c 	.word	0x2000000c
 8006150:	e000ed04 	.word	0xe000ed04

08006154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800615a:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <vPortExitCritical+0x50>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10a      	bne.n	8006178 <vPortExitCritical+0x24>
	__asm volatile
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	607b      	str	r3, [r7, #4]
}
 8006174:	bf00      	nop
 8006176:	e7fe      	b.n	8006176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006178:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <vPortExitCritical+0x50>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3b01      	subs	r3, #1
 800617e:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <vPortExitCritical+0x50>)
 8006180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006182:	4b08      	ldr	r3, [pc, #32]	; (80061a4 <vPortExitCritical+0x50>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <vPortExitCritical+0x42>
 800618a:	2300      	movs	r3, #0
 800618c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	f383 8811 	msr	BASEPRI, r3
}
 8006194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	2000000c 	.word	0x2000000c
	...

080061b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061b0:	f3ef 8009 	mrs	r0, PSP
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	4b15      	ldr	r3, [pc, #84]	; (8006210 <pxCurrentTCBConst>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	f01e 0f10 	tst.w	lr, #16
 80061c0:	bf08      	it	eq
 80061c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	6010      	str	r0, [r2, #0]
 80061cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80061d4:	f380 8811 	msr	BASEPRI, r0
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f7fe ffba 	bl	8005158 <vTaskSwitchContext>
 80061e4:	f04f 0000 	mov.w	r0, #0
 80061e8:	f380 8811 	msr	BASEPRI, r0
 80061ec:	bc09      	pop	{r0, r3}
 80061ee:	6819      	ldr	r1, [r3, #0]
 80061f0:	6808      	ldr	r0, [r1, #0]
 80061f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f6:	f01e 0f10 	tst.w	lr, #16
 80061fa:	bf08      	it	eq
 80061fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006200:	f380 8809 	msr	PSP, r0
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	f3af 8000 	nop.w

08006210 <pxCurrentTCBConst>:
 8006210:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop

08006218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	607b      	str	r3, [r7, #4]
}
 8006230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006232:	f7fe fed7 	bl	8004fe4 <xTaskIncrementTick>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d003      	beq.n	8006244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800623c:	4b06      	ldr	r3, [pc, #24]	; (8006258 <xPortSysTickHandler+0x40>)
 800623e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	2300      	movs	r3, #0
 8006246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f383 8811 	msr	BASEPRI, r3
}
 800624e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	e000ed04 	.word	0xe000ed04

0800625c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800625c:	b480      	push	{r7}
 800625e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <vPortSetupTimerInterrupt+0x34>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006266:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <vPortSetupTimerInterrupt+0x38>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800626c:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <vPortSetupTimerInterrupt+0x3c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0a      	ldr	r2, [pc, #40]	; (800629c <vPortSetupTimerInterrupt+0x40>)
 8006272:	fba2 2303 	umull	r2, r3, r2, r3
 8006276:	099b      	lsrs	r3, r3, #6
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <vPortSetupTimerInterrupt+0x44>)
 800627a:	3b01      	subs	r3, #1
 800627c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800627e:	4b04      	ldr	r3, [pc, #16]	; (8006290 <vPortSetupTimerInterrupt+0x34>)
 8006280:	2207      	movs	r2, #7
 8006282:	601a      	str	r2, [r3, #0]
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	e000e010 	.word	0xe000e010
 8006294:	e000e018 	.word	0xe000e018
 8006298:	20000000 	.word	0x20000000
 800629c:	10624dd3 	.word	0x10624dd3
 80062a0:	e000e014 	.word	0xe000e014

080062a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80062b4 <vPortEnableVFP+0x10>
 80062a8:	6801      	ldr	r1, [r0, #0]
 80062aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80062ae:	6001      	str	r1, [r0, #0]
 80062b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062b2:	bf00      	nop
 80062b4:	e000ed88 	.word	0xe000ed88

080062b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062be:	f3ef 8305 	mrs	r3, IPSR
 80062c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b0f      	cmp	r3, #15
 80062c8:	d914      	bls.n	80062f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062ca:	4a17      	ldr	r2, [pc, #92]	; (8006328 <vPortValidateInterruptPriority+0x70>)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062d4:	4b15      	ldr	r3, [pc, #84]	; (800632c <vPortValidateInterruptPriority+0x74>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	7afa      	ldrb	r2, [r7, #11]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d20a      	bcs.n	80062f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80062de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e2:	f383 8811 	msr	BASEPRI, r3
 80062e6:	f3bf 8f6f 	isb	sy
 80062ea:	f3bf 8f4f 	dsb	sy
 80062ee:	607b      	str	r3, [r7, #4]
}
 80062f0:	bf00      	nop
 80062f2:	e7fe      	b.n	80062f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <vPortValidateInterruptPriority+0x78>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <vPortValidateInterruptPriority+0x7c>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d90a      	bls.n	800631a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	603b      	str	r3, [r7, #0]
}
 8006316:	bf00      	nop
 8006318:	e7fe      	b.n	8006318 <vPortValidateInterruptPriority+0x60>
	}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	e000e3f0 	.word	0xe000e3f0
 800632c:	20000e44 	.word	0x20000e44
 8006330:	e000ed0c 	.word	0xe000ed0c
 8006334:	20000e48 	.word	0x20000e48

08006338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	; 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006344:	f7fe fd92 	bl	8004e6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006348:	4b5b      	ldr	r3, [pc, #364]	; (80064b8 <pvPortMalloc+0x180>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006350:	f000 f920 	bl	8006594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006354:	4b59      	ldr	r3, [pc, #356]	; (80064bc <pvPortMalloc+0x184>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	f040 8093 	bne.w	8006488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01d      	beq.n	80063a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006368:	2208      	movs	r2, #8
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4413      	add	r3, r2
 800636e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	2b00      	cmp	r3, #0
 8006378:	d014      	beq.n	80063a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f023 0307 	bic.w	r3, r3, #7
 8006380:	3308      	adds	r3, #8
 8006382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <pvPortMalloc+0x6c>
	__asm volatile
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	617b      	str	r3, [r7, #20]
}
 80063a0:	bf00      	nop
 80063a2:	e7fe      	b.n	80063a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d06e      	beq.n	8006488 <pvPortMalloc+0x150>
 80063aa:	4b45      	ldr	r3, [pc, #276]	; (80064c0 <pvPortMalloc+0x188>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d869      	bhi.n	8006488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063b4:	4b43      	ldr	r3, [pc, #268]	; (80064c4 <pvPortMalloc+0x18c>)
 80063b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063b8:	4b42      	ldr	r3, [pc, #264]	; (80064c4 <pvPortMalloc+0x18c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063be:	e004      	b.n	80063ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d903      	bls.n	80063dc <pvPortMalloc+0xa4>
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1f1      	bne.n	80063c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063dc:	4b36      	ldr	r3, [pc, #216]	; (80064b8 <pvPortMalloc+0x180>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d050      	beq.n	8006488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2208      	movs	r2, #8
 80063ec:	4413      	add	r3, r2
 80063ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	1ad2      	subs	r2, r2, r3
 8006400:	2308      	movs	r3, #8
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	429a      	cmp	r2, r3
 8006406:	d91f      	bls.n	8006448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <pvPortMalloc+0xf8>
	__asm volatile
 800641a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641e:	f383 8811 	msr	BASEPRI, r3
 8006422:	f3bf 8f6f 	isb	sy
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	613b      	str	r3, [r7, #16]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006442:	69b8      	ldr	r0, [r7, #24]
 8006444:	f000 f908 	bl	8006658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006448:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <pvPortMalloc+0x188>)
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	4a1b      	ldr	r2, [pc, #108]	; (80064c0 <pvPortMalloc+0x188>)
 8006454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006456:	4b1a      	ldr	r3, [pc, #104]	; (80064c0 <pvPortMalloc+0x188>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <pvPortMalloc+0x190>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d203      	bcs.n	800646a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006462:	4b17      	ldr	r3, [pc, #92]	; (80064c0 <pvPortMalloc+0x188>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a18      	ldr	r2, [pc, #96]	; (80064c8 <pvPortMalloc+0x190>)
 8006468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	4b13      	ldr	r3, [pc, #76]	; (80064bc <pvPortMalloc+0x184>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	431a      	orrs	r2, r3
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <pvPortMalloc+0x194>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3301      	adds	r3, #1
 8006484:	4a11      	ldr	r2, [pc, #68]	; (80064cc <pvPortMalloc+0x194>)
 8006486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006488:	f7fe fcfe 	bl	8004e88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f003 0307 	and.w	r3, r3, #7
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00a      	beq.n	80064ac <pvPortMalloc+0x174>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60fb      	str	r3, [r7, #12]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <pvPortMalloc+0x172>
	return pvReturn;
 80064ac:	69fb      	ldr	r3, [r7, #28]
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3728      	adds	r7, #40	; 0x28
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20004a54 	.word	0x20004a54
 80064bc:	20004a68 	.word	0x20004a68
 80064c0:	20004a58 	.word	0x20004a58
 80064c4:	20004a4c 	.word	0x20004a4c
 80064c8:	20004a5c 	.word	0x20004a5c
 80064cc:	20004a60 	.word	0x20004a60

080064d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d04d      	beq.n	800657e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064e2:	2308      	movs	r3, #8
 80064e4:	425b      	negs	r3, r3
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4413      	add	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	4b24      	ldr	r3, [pc, #144]	; (8006588 <vPortFree+0xb8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4013      	ands	r3, r2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10a      	bne.n	8006514 <vPortFree+0x44>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006502:	f383 8811 	msr	BASEPRI, r3
 8006506:	f3bf 8f6f 	isb	sy
 800650a:	f3bf 8f4f 	dsb	sy
 800650e:	60fb      	str	r3, [r7, #12]
}
 8006510:	bf00      	nop
 8006512:	e7fe      	b.n	8006512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <vPortFree+0x62>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60bb      	str	r3, [r7, #8]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <vPortFree+0xb8>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01e      	beq.n	800657e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d11a      	bne.n	800657e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <vPortFree+0xb8>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	43db      	mvns	r3, r3
 8006552:	401a      	ands	r2, r3
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006558:	f7fe fc88 	bl	8004e6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	4b0a      	ldr	r3, [pc, #40]	; (800658c <vPortFree+0xbc>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4413      	add	r3, r2
 8006566:	4a09      	ldr	r2, [pc, #36]	; (800658c <vPortFree+0xbc>)
 8006568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800656a:	6938      	ldr	r0, [r7, #16]
 800656c:	f000 f874 	bl	8006658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006570:	4b07      	ldr	r3, [pc, #28]	; (8006590 <vPortFree+0xc0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	4a06      	ldr	r2, [pc, #24]	; (8006590 <vPortFree+0xc0>)
 8006578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800657a:	f7fe fc85 	bl	8004e88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800657e:	bf00      	nop
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20004a68 	.word	0x20004a68
 800658c:	20004a58 	.word	0x20004a58
 8006590:	20004a64 	.word	0x20004a64

08006594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800659a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800659e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065a0:	4b27      	ldr	r3, [pc, #156]	; (8006640 <prvHeapInit+0xac>)
 80065a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00c      	beq.n	80065c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3307      	adds	r3, #7
 80065b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f023 0307 	bic.w	r3, r3, #7
 80065ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <prvHeapInit+0xac>)
 80065c4:	4413      	add	r3, r2
 80065c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065cc:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <prvHeapInit+0xb0>)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <prvHeapInit+0xb0>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	4413      	add	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065e0:	2208      	movs	r2, #8
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 0307 	bic.w	r3, r3, #7
 80065ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	4a15      	ldr	r2, [pc, #84]	; (8006648 <prvHeapInit+0xb4>)
 80065f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065f6:	4b14      	ldr	r3, [pc, #80]	; (8006648 <prvHeapInit+0xb4>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2200      	movs	r2, #0
 80065fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065fe:	4b12      	ldr	r3, [pc, #72]	; (8006648 <prvHeapInit+0xb4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	1ad2      	subs	r2, r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <prvHeapInit+0xb4>)
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a0a      	ldr	r2, [pc, #40]	; (800664c <prvHeapInit+0xb8>)
 8006622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4a09      	ldr	r2, [pc, #36]	; (8006650 <prvHeapInit+0xbc>)
 800662a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800662c:	4b09      	ldr	r3, [pc, #36]	; (8006654 <prvHeapInit+0xc0>)
 800662e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006632:	601a      	str	r2, [r3, #0]
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr
 8006640:	20000e4c 	.word	0x20000e4c
 8006644:	20004a4c 	.word	0x20004a4c
 8006648:	20004a54 	.word	0x20004a54
 800664c:	20004a5c 	.word	0x20004a5c
 8006650:	20004a58 	.word	0x20004a58
 8006654:	20004a68 	.word	0x20004a68

08006658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006660:	4b28      	ldr	r3, [pc, #160]	; (8006704 <prvInsertBlockIntoFreeList+0xac>)
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e002      	b.n	800666c <prvInsertBlockIntoFreeList+0x14>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	d8f7      	bhi.n	8006666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4413      	add	r3, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	429a      	cmp	r2, r3
 8006686:	d108      	bne.n	800669a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	441a      	add	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	441a      	add	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d118      	bne.n	80066e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <prvInsertBlockIntoFreeList+0xb0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d00d      	beq.n	80066d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	441a      	add	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	e008      	b.n	80066e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066d6:	4b0c      	ldr	r3, [pc, #48]	; (8006708 <prvInsertBlockIntoFreeList+0xb0>)
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	e003      	b.n	80066e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d002      	beq.n	80066f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	20004a4c 	.word	0x20004a4c
 8006708:	20004a54 	.word	0x20004a54

0800670c <__errno>:
 800670c:	4b01      	ldr	r3, [pc, #4]	; (8006714 <__errno+0x8>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000010 	.word	0x20000010

08006718 <__libc_init_array>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4d0d      	ldr	r5, [pc, #52]	; (8006750 <__libc_init_array+0x38>)
 800671c:	4c0d      	ldr	r4, [pc, #52]	; (8006754 <__libc_init_array+0x3c>)
 800671e:	1b64      	subs	r4, r4, r5
 8006720:	10a4      	asrs	r4, r4, #2
 8006722:	2600      	movs	r6, #0
 8006724:	42a6      	cmp	r6, r4
 8006726:	d109      	bne.n	800673c <__libc_init_array+0x24>
 8006728:	4d0b      	ldr	r5, [pc, #44]	; (8006758 <__libc_init_array+0x40>)
 800672a:	4c0c      	ldr	r4, [pc, #48]	; (800675c <__libc_init_array+0x44>)
 800672c:	f000 fcb8 	bl	80070a0 <_init>
 8006730:	1b64      	subs	r4, r4, r5
 8006732:	10a4      	asrs	r4, r4, #2
 8006734:	2600      	movs	r6, #0
 8006736:	42a6      	cmp	r6, r4
 8006738:	d105      	bne.n	8006746 <__libc_init_array+0x2e>
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006740:	4798      	blx	r3
 8006742:	3601      	adds	r6, #1
 8006744:	e7ee      	b.n	8006724 <__libc_init_array+0xc>
 8006746:	f855 3b04 	ldr.w	r3, [r5], #4
 800674a:	4798      	blx	r3
 800674c:	3601      	adds	r6, #1
 800674e:	e7f2      	b.n	8006736 <__libc_init_array+0x1e>
 8006750:	08007218 	.word	0x08007218
 8006754:	08007218 	.word	0x08007218
 8006758:	08007218 	.word	0x08007218
 800675c:	0800721c 	.word	0x0800721c

08006760 <__retarget_lock_acquire_recursive>:
 8006760:	4770      	bx	lr

08006762 <__retarget_lock_release_recursive>:
 8006762:	4770      	bx	lr

08006764 <memcpy>:
 8006764:	440a      	add	r2, r1
 8006766:	4291      	cmp	r1, r2
 8006768:	f100 33ff 	add.w	r3, r0, #4294967295
 800676c:	d100      	bne.n	8006770 <memcpy+0xc>
 800676e:	4770      	bx	lr
 8006770:	b510      	push	{r4, lr}
 8006772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800677a:	4291      	cmp	r1, r2
 800677c:	d1f9      	bne.n	8006772 <memcpy+0xe>
 800677e:	bd10      	pop	{r4, pc}

08006780 <memset>:
 8006780:	4402      	add	r2, r0
 8006782:	4603      	mov	r3, r0
 8006784:	4293      	cmp	r3, r2
 8006786:	d100      	bne.n	800678a <memset+0xa>
 8006788:	4770      	bx	lr
 800678a:	f803 1b01 	strb.w	r1, [r3], #1
 800678e:	e7f9      	b.n	8006784 <memset+0x4>

08006790 <_malloc_r>:
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	1ccd      	adds	r5, r1, #3
 8006794:	f025 0503 	bic.w	r5, r5, #3
 8006798:	3508      	adds	r5, #8
 800679a:	2d0c      	cmp	r5, #12
 800679c:	bf38      	it	cc
 800679e:	250c      	movcc	r5, #12
 80067a0:	2d00      	cmp	r5, #0
 80067a2:	4606      	mov	r6, r0
 80067a4:	db01      	blt.n	80067aa <_malloc_r+0x1a>
 80067a6:	42a9      	cmp	r1, r5
 80067a8:	d903      	bls.n	80067b2 <_malloc_r+0x22>
 80067aa:	230c      	movs	r3, #12
 80067ac:	6033      	str	r3, [r6, #0]
 80067ae:	2000      	movs	r0, #0
 80067b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b2:	f000 f8e1 	bl	8006978 <__malloc_lock>
 80067b6:	4921      	ldr	r1, [pc, #132]	; (800683c <_malloc_r+0xac>)
 80067b8:	680a      	ldr	r2, [r1, #0]
 80067ba:	4614      	mov	r4, r2
 80067bc:	b99c      	cbnz	r4, 80067e6 <_malloc_r+0x56>
 80067be:	4f20      	ldr	r7, [pc, #128]	; (8006840 <_malloc_r+0xb0>)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	b923      	cbnz	r3, 80067ce <_malloc_r+0x3e>
 80067c4:	4621      	mov	r1, r4
 80067c6:	4630      	mov	r0, r6
 80067c8:	f000 f8a6 	bl	8006918 <_sbrk_r>
 80067cc:	6038      	str	r0, [r7, #0]
 80067ce:	4629      	mov	r1, r5
 80067d0:	4630      	mov	r0, r6
 80067d2:	f000 f8a1 	bl	8006918 <_sbrk_r>
 80067d6:	1c43      	adds	r3, r0, #1
 80067d8:	d123      	bne.n	8006822 <_malloc_r+0x92>
 80067da:	230c      	movs	r3, #12
 80067dc:	6033      	str	r3, [r6, #0]
 80067de:	4630      	mov	r0, r6
 80067e0:	f000 f8d0 	bl	8006984 <__malloc_unlock>
 80067e4:	e7e3      	b.n	80067ae <_malloc_r+0x1e>
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	1b5b      	subs	r3, r3, r5
 80067ea:	d417      	bmi.n	800681c <_malloc_r+0x8c>
 80067ec:	2b0b      	cmp	r3, #11
 80067ee:	d903      	bls.n	80067f8 <_malloc_r+0x68>
 80067f0:	6023      	str	r3, [r4, #0]
 80067f2:	441c      	add	r4, r3
 80067f4:	6025      	str	r5, [r4, #0]
 80067f6:	e004      	b.n	8006802 <_malloc_r+0x72>
 80067f8:	6863      	ldr	r3, [r4, #4]
 80067fa:	42a2      	cmp	r2, r4
 80067fc:	bf0c      	ite	eq
 80067fe:	600b      	streq	r3, [r1, #0]
 8006800:	6053      	strne	r3, [r2, #4]
 8006802:	4630      	mov	r0, r6
 8006804:	f000 f8be 	bl	8006984 <__malloc_unlock>
 8006808:	f104 000b 	add.w	r0, r4, #11
 800680c:	1d23      	adds	r3, r4, #4
 800680e:	f020 0007 	bic.w	r0, r0, #7
 8006812:	1ac2      	subs	r2, r0, r3
 8006814:	d0cc      	beq.n	80067b0 <_malloc_r+0x20>
 8006816:	1a1b      	subs	r3, r3, r0
 8006818:	50a3      	str	r3, [r4, r2]
 800681a:	e7c9      	b.n	80067b0 <_malloc_r+0x20>
 800681c:	4622      	mov	r2, r4
 800681e:	6864      	ldr	r4, [r4, #4]
 8006820:	e7cc      	b.n	80067bc <_malloc_r+0x2c>
 8006822:	1cc4      	adds	r4, r0, #3
 8006824:	f024 0403 	bic.w	r4, r4, #3
 8006828:	42a0      	cmp	r0, r4
 800682a:	d0e3      	beq.n	80067f4 <_malloc_r+0x64>
 800682c:	1a21      	subs	r1, r4, r0
 800682e:	4630      	mov	r0, r6
 8006830:	f000 f872 	bl	8006918 <_sbrk_r>
 8006834:	3001      	adds	r0, #1
 8006836:	d1dd      	bne.n	80067f4 <_malloc_r+0x64>
 8006838:	e7cf      	b.n	80067da <_malloc_r+0x4a>
 800683a:	bf00      	nop
 800683c:	20004a6c 	.word	0x20004a6c
 8006840:	20004a70 	.word	0x20004a70

08006844 <cleanup_glue>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	460c      	mov	r4, r1
 8006848:	6809      	ldr	r1, [r1, #0]
 800684a:	4605      	mov	r5, r0
 800684c:	b109      	cbz	r1, 8006852 <cleanup_glue+0xe>
 800684e:	f7ff fff9 	bl	8006844 <cleanup_glue>
 8006852:	4621      	mov	r1, r4
 8006854:	4628      	mov	r0, r5
 8006856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800685a:	f000 b899 	b.w	8006990 <_free_r>
	...

08006860 <_reclaim_reent>:
 8006860:	4b2c      	ldr	r3, [pc, #176]	; (8006914 <_reclaim_reent+0xb4>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4283      	cmp	r3, r0
 8006866:	b570      	push	{r4, r5, r6, lr}
 8006868:	4604      	mov	r4, r0
 800686a:	d051      	beq.n	8006910 <_reclaim_reent+0xb0>
 800686c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800686e:	b143      	cbz	r3, 8006882 <_reclaim_reent+0x22>
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d14a      	bne.n	800690c <_reclaim_reent+0xac>
 8006876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006878:	6819      	ldr	r1, [r3, #0]
 800687a:	b111      	cbz	r1, 8006882 <_reclaim_reent+0x22>
 800687c:	4620      	mov	r0, r4
 800687e:	f000 f887 	bl	8006990 <_free_r>
 8006882:	6961      	ldr	r1, [r4, #20]
 8006884:	b111      	cbz	r1, 800688c <_reclaim_reent+0x2c>
 8006886:	4620      	mov	r0, r4
 8006888:	f000 f882 	bl	8006990 <_free_r>
 800688c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800688e:	b111      	cbz	r1, 8006896 <_reclaim_reent+0x36>
 8006890:	4620      	mov	r0, r4
 8006892:	f000 f87d 	bl	8006990 <_free_r>
 8006896:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006898:	b111      	cbz	r1, 80068a0 <_reclaim_reent+0x40>
 800689a:	4620      	mov	r0, r4
 800689c:	f000 f878 	bl	8006990 <_free_r>
 80068a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80068a2:	b111      	cbz	r1, 80068aa <_reclaim_reent+0x4a>
 80068a4:	4620      	mov	r0, r4
 80068a6:	f000 f873 	bl	8006990 <_free_r>
 80068aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068ac:	b111      	cbz	r1, 80068b4 <_reclaim_reent+0x54>
 80068ae:	4620      	mov	r0, r4
 80068b0:	f000 f86e 	bl	8006990 <_free_r>
 80068b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80068b6:	b111      	cbz	r1, 80068be <_reclaim_reent+0x5e>
 80068b8:	4620      	mov	r0, r4
 80068ba:	f000 f869 	bl	8006990 <_free_r>
 80068be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80068c0:	b111      	cbz	r1, 80068c8 <_reclaim_reent+0x68>
 80068c2:	4620      	mov	r0, r4
 80068c4:	f000 f864 	bl	8006990 <_free_r>
 80068c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068ca:	b111      	cbz	r1, 80068d2 <_reclaim_reent+0x72>
 80068cc:	4620      	mov	r0, r4
 80068ce:	f000 f85f 	bl	8006990 <_free_r>
 80068d2:	69a3      	ldr	r3, [r4, #24]
 80068d4:	b1e3      	cbz	r3, 8006910 <_reclaim_reent+0xb0>
 80068d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80068d8:	4620      	mov	r0, r4
 80068da:	4798      	blx	r3
 80068dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80068de:	b1b9      	cbz	r1, 8006910 <_reclaim_reent+0xb0>
 80068e0:	4620      	mov	r0, r4
 80068e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80068e6:	f7ff bfad 	b.w	8006844 <cleanup_glue>
 80068ea:	5949      	ldr	r1, [r1, r5]
 80068ec:	b941      	cbnz	r1, 8006900 <_reclaim_reent+0xa0>
 80068ee:	3504      	adds	r5, #4
 80068f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068f2:	2d80      	cmp	r5, #128	; 0x80
 80068f4:	68d9      	ldr	r1, [r3, #12]
 80068f6:	d1f8      	bne.n	80068ea <_reclaim_reent+0x8a>
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 f849 	bl	8006990 <_free_r>
 80068fe:	e7ba      	b.n	8006876 <_reclaim_reent+0x16>
 8006900:	680e      	ldr	r6, [r1, #0]
 8006902:	4620      	mov	r0, r4
 8006904:	f000 f844 	bl	8006990 <_free_r>
 8006908:	4631      	mov	r1, r6
 800690a:	e7ef      	b.n	80068ec <_reclaim_reent+0x8c>
 800690c:	2500      	movs	r5, #0
 800690e:	e7ef      	b.n	80068f0 <_reclaim_reent+0x90>
 8006910:	bd70      	pop	{r4, r5, r6, pc}
 8006912:	bf00      	nop
 8006914:	20000010 	.word	0x20000010

08006918 <_sbrk_r>:
 8006918:	b538      	push	{r3, r4, r5, lr}
 800691a:	4d06      	ldr	r5, [pc, #24]	; (8006934 <_sbrk_r+0x1c>)
 800691c:	2300      	movs	r3, #0
 800691e:	4604      	mov	r4, r0
 8006920:	4608      	mov	r0, r1
 8006922:	602b      	str	r3, [r5, #0]
 8006924:	f7fa f99c 	bl	8000c60 <_sbrk>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_sbrk_r+0x1a>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b103      	cbz	r3, 8006932 <_sbrk_r+0x1a>
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	20004fa8 	.word	0x20004fa8

08006938 <_vsiprintf_r>:
 8006938:	b500      	push	{lr}
 800693a:	b09b      	sub	sp, #108	; 0x6c
 800693c:	9100      	str	r1, [sp, #0]
 800693e:	9104      	str	r1, [sp, #16]
 8006940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006944:	9105      	str	r1, [sp, #20]
 8006946:	9102      	str	r1, [sp, #8]
 8006948:	4905      	ldr	r1, [pc, #20]	; (8006960 <_vsiprintf_r+0x28>)
 800694a:	9103      	str	r1, [sp, #12]
 800694c:	4669      	mov	r1, sp
 800694e:	f000 f8cb 	bl	8006ae8 <_svfiprintf_r>
 8006952:	9b00      	ldr	r3, [sp, #0]
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	b01b      	add	sp, #108	; 0x6c
 800695a:	f85d fb04 	ldr.w	pc, [sp], #4
 800695e:	bf00      	nop
 8006960:	ffff0208 	.word	0xffff0208

08006964 <vsiprintf>:
 8006964:	4613      	mov	r3, r2
 8006966:	460a      	mov	r2, r1
 8006968:	4601      	mov	r1, r0
 800696a:	4802      	ldr	r0, [pc, #8]	; (8006974 <vsiprintf+0x10>)
 800696c:	6800      	ldr	r0, [r0, #0]
 800696e:	f7ff bfe3 	b.w	8006938 <_vsiprintf_r>
 8006972:	bf00      	nop
 8006974:	20000010 	.word	0x20000010

08006978 <__malloc_lock>:
 8006978:	4801      	ldr	r0, [pc, #4]	; (8006980 <__malloc_lock+0x8>)
 800697a:	f7ff bef1 	b.w	8006760 <__retarget_lock_acquire_recursive>
 800697e:	bf00      	nop
 8006980:	20004fa0 	.word	0x20004fa0

08006984 <__malloc_unlock>:
 8006984:	4801      	ldr	r0, [pc, #4]	; (800698c <__malloc_unlock+0x8>)
 8006986:	f7ff beec 	b.w	8006762 <__retarget_lock_release_recursive>
 800698a:	bf00      	nop
 800698c:	20004fa0 	.word	0x20004fa0

08006990 <_free_r>:
 8006990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006992:	2900      	cmp	r1, #0
 8006994:	d048      	beq.n	8006a28 <_free_r+0x98>
 8006996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800699a:	9001      	str	r0, [sp, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f1a1 0404 	sub.w	r4, r1, #4
 80069a2:	bfb8      	it	lt
 80069a4:	18e4      	addlt	r4, r4, r3
 80069a6:	f7ff ffe7 	bl	8006978 <__malloc_lock>
 80069aa:	4a20      	ldr	r2, [pc, #128]	; (8006a2c <_free_r+0x9c>)
 80069ac:	9801      	ldr	r0, [sp, #4]
 80069ae:	6813      	ldr	r3, [r2, #0]
 80069b0:	4615      	mov	r5, r2
 80069b2:	b933      	cbnz	r3, 80069c2 <_free_r+0x32>
 80069b4:	6063      	str	r3, [r4, #4]
 80069b6:	6014      	str	r4, [r2, #0]
 80069b8:	b003      	add	sp, #12
 80069ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069be:	f7ff bfe1 	b.w	8006984 <__malloc_unlock>
 80069c2:	42a3      	cmp	r3, r4
 80069c4:	d90b      	bls.n	80069de <_free_r+0x4e>
 80069c6:	6821      	ldr	r1, [r4, #0]
 80069c8:	1862      	adds	r2, r4, r1
 80069ca:	4293      	cmp	r3, r2
 80069cc:	bf04      	itt	eq
 80069ce:	681a      	ldreq	r2, [r3, #0]
 80069d0:	685b      	ldreq	r3, [r3, #4]
 80069d2:	6063      	str	r3, [r4, #4]
 80069d4:	bf04      	itt	eq
 80069d6:	1852      	addeq	r2, r2, r1
 80069d8:	6022      	streq	r2, [r4, #0]
 80069da:	602c      	str	r4, [r5, #0]
 80069dc:	e7ec      	b.n	80069b8 <_free_r+0x28>
 80069de:	461a      	mov	r2, r3
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	b10b      	cbz	r3, 80069e8 <_free_r+0x58>
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	d9fa      	bls.n	80069de <_free_r+0x4e>
 80069e8:	6811      	ldr	r1, [r2, #0]
 80069ea:	1855      	adds	r5, r2, r1
 80069ec:	42a5      	cmp	r5, r4
 80069ee:	d10b      	bne.n	8006a08 <_free_r+0x78>
 80069f0:	6824      	ldr	r4, [r4, #0]
 80069f2:	4421      	add	r1, r4
 80069f4:	1854      	adds	r4, r2, r1
 80069f6:	42a3      	cmp	r3, r4
 80069f8:	6011      	str	r1, [r2, #0]
 80069fa:	d1dd      	bne.n	80069b8 <_free_r+0x28>
 80069fc:	681c      	ldr	r4, [r3, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	6053      	str	r3, [r2, #4]
 8006a02:	4421      	add	r1, r4
 8006a04:	6011      	str	r1, [r2, #0]
 8006a06:	e7d7      	b.n	80069b8 <_free_r+0x28>
 8006a08:	d902      	bls.n	8006a10 <_free_r+0x80>
 8006a0a:	230c      	movs	r3, #12
 8006a0c:	6003      	str	r3, [r0, #0]
 8006a0e:	e7d3      	b.n	80069b8 <_free_r+0x28>
 8006a10:	6825      	ldr	r5, [r4, #0]
 8006a12:	1961      	adds	r1, r4, r5
 8006a14:	428b      	cmp	r3, r1
 8006a16:	bf04      	itt	eq
 8006a18:	6819      	ldreq	r1, [r3, #0]
 8006a1a:	685b      	ldreq	r3, [r3, #4]
 8006a1c:	6063      	str	r3, [r4, #4]
 8006a1e:	bf04      	itt	eq
 8006a20:	1949      	addeq	r1, r1, r5
 8006a22:	6021      	streq	r1, [r4, #0]
 8006a24:	6054      	str	r4, [r2, #4]
 8006a26:	e7c7      	b.n	80069b8 <_free_r+0x28>
 8006a28:	b003      	add	sp, #12
 8006a2a:	bd30      	pop	{r4, r5, pc}
 8006a2c:	20004a6c 	.word	0x20004a6c

08006a30 <__ssputs_r>:
 8006a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a34:	688e      	ldr	r6, [r1, #8]
 8006a36:	429e      	cmp	r6, r3
 8006a38:	4682      	mov	sl, r0
 8006a3a:	460c      	mov	r4, r1
 8006a3c:	4690      	mov	r8, r2
 8006a3e:	461f      	mov	r7, r3
 8006a40:	d838      	bhi.n	8006ab4 <__ssputs_r+0x84>
 8006a42:	898a      	ldrh	r2, [r1, #12]
 8006a44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a48:	d032      	beq.n	8006ab0 <__ssputs_r+0x80>
 8006a4a:	6825      	ldr	r5, [r4, #0]
 8006a4c:	6909      	ldr	r1, [r1, #16]
 8006a4e:	eba5 0901 	sub.w	r9, r5, r1
 8006a52:	6965      	ldr	r5, [r4, #20]
 8006a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	444b      	add	r3, r9
 8006a60:	106d      	asrs	r5, r5, #1
 8006a62:	429d      	cmp	r5, r3
 8006a64:	bf38      	it	cc
 8006a66:	461d      	movcc	r5, r3
 8006a68:	0553      	lsls	r3, r2, #21
 8006a6a:	d531      	bpl.n	8006ad0 <__ssputs_r+0xa0>
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	f7ff fe8f 	bl	8006790 <_malloc_r>
 8006a72:	4606      	mov	r6, r0
 8006a74:	b950      	cbnz	r0, 8006a8c <__ssputs_r+0x5c>
 8006a76:	230c      	movs	r3, #12
 8006a78:	f8ca 3000 	str.w	r3, [sl]
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a82:	81a3      	strh	r3, [r4, #12]
 8006a84:	f04f 30ff 	mov.w	r0, #4294967295
 8006a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8c:	6921      	ldr	r1, [r4, #16]
 8006a8e:	464a      	mov	r2, r9
 8006a90:	f7ff fe68 	bl	8006764 <memcpy>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a9e:	81a3      	strh	r3, [r4, #12]
 8006aa0:	6126      	str	r6, [r4, #16]
 8006aa2:	6165      	str	r5, [r4, #20]
 8006aa4:	444e      	add	r6, r9
 8006aa6:	eba5 0509 	sub.w	r5, r5, r9
 8006aaa:	6026      	str	r6, [r4, #0]
 8006aac:	60a5      	str	r5, [r4, #8]
 8006aae:	463e      	mov	r6, r7
 8006ab0:	42be      	cmp	r6, r7
 8006ab2:	d900      	bls.n	8006ab6 <__ssputs_r+0x86>
 8006ab4:	463e      	mov	r6, r7
 8006ab6:	4632      	mov	r2, r6
 8006ab8:	6820      	ldr	r0, [r4, #0]
 8006aba:	4641      	mov	r1, r8
 8006abc:	f000 faa8 	bl	8007010 <memmove>
 8006ac0:	68a3      	ldr	r3, [r4, #8]
 8006ac2:	6822      	ldr	r2, [r4, #0]
 8006ac4:	1b9b      	subs	r3, r3, r6
 8006ac6:	4432      	add	r2, r6
 8006ac8:	60a3      	str	r3, [r4, #8]
 8006aca:	6022      	str	r2, [r4, #0]
 8006acc:	2000      	movs	r0, #0
 8006ace:	e7db      	b.n	8006a88 <__ssputs_r+0x58>
 8006ad0:	462a      	mov	r2, r5
 8006ad2:	f000 fab7 	bl	8007044 <_realloc_r>
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d1e1      	bne.n	8006aa0 <__ssputs_r+0x70>
 8006adc:	6921      	ldr	r1, [r4, #16]
 8006ade:	4650      	mov	r0, sl
 8006ae0:	f7ff ff56 	bl	8006990 <_free_r>
 8006ae4:	e7c7      	b.n	8006a76 <__ssputs_r+0x46>
	...

08006ae8 <_svfiprintf_r>:
 8006ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aec:	4698      	mov	r8, r3
 8006aee:	898b      	ldrh	r3, [r1, #12]
 8006af0:	061b      	lsls	r3, r3, #24
 8006af2:	b09d      	sub	sp, #116	; 0x74
 8006af4:	4607      	mov	r7, r0
 8006af6:	460d      	mov	r5, r1
 8006af8:	4614      	mov	r4, r2
 8006afa:	d50e      	bpl.n	8006b1a <_svfiprintf_r+0x32>
 8006afc:	690b      	ldr	r3, [r1, #16]
 8006afe:	b963      	cbnz	r3, 8006b1a <_svfiprintf_r+0x32>
 8006b00:	2140      	movs	r1, #64	; 0x40
 8006b02:	f7ff fe45 	bl	8006790 <_malloc_r>
 8006b06:	6028      	str	r0, [r5, #0]
 8006b08:	6128      	str	r0, [r5, #16]
 8006b0a:	b920      	cbnz	r0, 8006b16 <_svfiprintf_r+0x2e>
 8006b0c:	230c      	movs	r3, #12
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	e0d1      	b.n	8006cba <_svfiprintf_r+0x1d2>
 8006b16:	2340      	movs	r3, #64	; 0x40
 8006b18:	616b      	str	r3, [r5, #20]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b1e:	2320      	movs	r3, #32
 8006b20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b24:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b28:	2330      	movs	r3, #48	; 0x30
 8006b2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cd4 <_svfiprintf_r+0x1ec>
 8006b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b32:	f04f 0901 	mov.w	r9, #1
 8006b36:	4623      	mov	r3, r4
 8006b38:	469a      	mov	sl, r3
 8006b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b3e:	b10a      	cbz	r2, 8006b44 <_svfiprintf_r+0x5c>
 8006b40:	2a25      	cmp	r2, #37	; 0x25
 8006b42:	d1f9      	bne.n	8006b38 <_svfiprintf_r+0x50>
 8006b44:	ebba 0b04 	subs.w	fp, sl, r4
 8006b48:	d00b      	beq.n	8006b62 <_svfiprintf_r+0x7a>
 8006b4a:	465b      	mov	r3, fp
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	4629      	mov	r1, r5
 8006b50:	4638      	mov	r0, r7
 8006b52:	f7ff ff6d 	bl	8006a30 <__ssputs_r>
 8006b56:	3001      	adds	r0, #1
 8006b58:	f000 80aa 	beq.w	8006cb0 <_svfiprintf_r+0x1c8>
 8006b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b5e:	445a      	add	r2, fp
 8006b60:	9209      	str	r2, [sp, #36]	; 0x24
 8006b62:	f89a 3000 	ldrb.w	r3, [sl]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 80a2 	beq.w	8006cb0 <_svfiprintf_r+0x1c8>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b76:	f10a 0a01 	add.w	sl, sl, #1
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	9307      	str	r3, [sp, #28]
 8006b7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b82:	931a      	str	r3, [sp, #104]	; 0x68
 8006b84:	4654      	mov	r4, sl
 8006b86:	2205      	movs	r2, #5
 8006b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b8c:	4851      	ldr	r0, [pc, #324]	; (8006cd4 <_svfiprintf_r+0x1ec>)
 8006b8e:	f7f9 fb37 	bl	8000200 <memchr>
 8006b92:	9a04      	ldr	r2, [sp, #16]
 8006b94:	b9d8      	cbnz	r0, 8006bce <_svfiprintf_r+0xe6>
 8006b96:	06d0      	lsls	r0, r2, #27
 8006b98:	bf44      	itt	mi
 8006b9a:	2320      	movmi	r3, #32
 8006b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ba0:	0711      	lsls	r1, r2, #28
 8006ba2:	bf44      	itt	mi
 8006ba4:	232b      	movmi	r3, #43	; 0x2b
 8006ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006baa:	f89a 3000 	ldrb.w	r3, [sl]
 8006bae:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb0:	d015      	beq.n	8006bde <_svfiprintf_r+0xf6>
 8006bb2:	9a07      	ldr	r2, [sp, #28]
 8006bb4:	4654      	mov	r4, sl
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	f04f 0c0a 	mov.w	ip, #10
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bc2:	3b30      	subs	r3, #48	; 0x30
 8006bc4:	2b09      	cmp	r3, #9
 8006bc6:	d94e      	bls.n	8006c66 <_svfiprintf_r+0x17e>
 8006bc8:	b1b0      	cbz	r0, 8006bf8 <_svfiprintf_r+0x110>
 8006bca:	9207      	str	r2, [sp, #28]
 8006bcc:	e014      	b.n	8006bf8 <_svfiprintf_r+0x110>
 8006bce:	eba0 0308 	sub.w	r3, r0, r8
 8006bd2:	fa09 f303 	lsl.w	r3, r9, r3
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	9304      	str	r3, [sp, #16]
 8006bda:	46a2      	mov	sl, r4
 8006bdc:	e7d2      	b.n	8006b84 <_svfiprintf_r+0x9c>
 8006bde:	9b03      	ldr	r3, [sp, #12]
 8006be0:	1d19      	adds	r1, r3, #4
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	9103      	str	r1, [sp, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	bfbb      	ittet	lt
 8006bea:	425b      	neglt	r3, r3
 8006bec:	f042 0202 	orrlt.w	r2, r2, #2
 8006bf0:	9307      	strge	r3, [sp, #28]
 8006bf2:	9307      	strlt	r3, [sp, #28]
 8006bf4:	bfb8      	it	lt
 8006bf6:	9204      	strlt	r2, [sp, #16]
 8006bf8:	7823      	ldrb	r3, [r4, #0]
 8006bfa:	2b2e      	cmp	r3, #46	; 0x2e
 8006bfc:	d10c      	bne.n	8006c18 <_svfiprintf_r+0x130>
 8006bfe:	7863      	ldrb	r3, [r4, #1]
 8006c00:	2b2a      	cmp	r3, #42	; 0x2a
 8006c02:	d135      	bne.n	8006c70 <_svfiprintf_r+0x188>
 8006c04:	9b03      	ldr	r3, [sp, #12]
 8006c06:	1d1a      	adds	r2, r3, #4
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	9203      	str	r2, [sp, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bfb8      	it	lt
 8006c10:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c14:	3402      	adds	r4, #2
 8006c16:	9305      	str	r3, [sp, #20]
 8006c18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ce4 <_svfiprintf_r+0x1fc>
 8006c1c:	7821      	ldrb	r1, [r4, #0]
 8006c1e:	2203      	movs	r2, #3
 8006c20:	4650      	mov	r0, sl
 8006c22:	f7f9 faed 	bl	8000200 <memchr>
 8006c26:	b140      	cbz	r0, 8006c3a <_svfiprintf_r+0x152>
 8006c28:	2340      	movs	r3, #64	; 0x40
 8006c2a:	eba0 000a 	sub.w	r0, r0, sl
 8006c2e:	fa03 f000 	lsl.w	r0, r3, r0
 8006c32:	9b04      	ldr	r3, [sp, #16]
 8006c34:	4303      	orrs	r3, r0
 8006c36:	3401      	adds	r4, #1
 8006c38:	9304      	str	r3, [sp, #16]
 8006c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c3e:	4826      	ldr	r0, [pc, #152]	; (8006cd8 <_svfiprintf_r+0x1f0>)
 8006c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c44:	2206      	movs	r2, #6
 8006c46:	f7f9 fadb 	bl	8000200 <memchr>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d038      	beq.n	8006cc0 <_svfiprintf_r+0x1d8>
 8006c4e:	4b23      	ldr	r3, [pc, #140]	; (8006cdc <_svfiprintf_r+0x1f4>)
 8006c50:	bb1b      	cbnz	r3, 8006c9a <_svfiprintf_r+0x1b2>
 8006c52:	9b03      	ldr	r3, [sp, #12]
 8006c54:	3307      	adds	r3, #7
 8006c56:	f023 0307 	bic.w	r3, r3, #7
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	9303      	str	r3, [sp, #12]
 8006c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c60:	4433      	add	r3, r6
 8006c62:	9309      	str	r3, [sp, #36]	; 0x24
 8006c64:	e767      	b.n	8006b36 <_svfiprintf_r+0x4e>
 8006c66:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c6a:	460c      	mov	r4, r1
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	e7a5      	b.n	8006bbc <_svfiprintf_r+0xd4>
 8006c70:	2300      	movs	r3, #0
 8006c72:	3401      	adds	r4, #1
 8006c74:	9305      	str	r3, [sp, #20]
 8006c76:	4619      	mov	r1, r3
 8006c78:	f04f 0c0a 	mov.w	ip, #10
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c82:	3a30      	subs	r2, #48	; 0x30
 8006c84:	2a09      	cmp	r2, #9
 8006c86:	d903      	bls.n	8006c90 <_svfiprintf_r+0x1a8>
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d0c5      	beq.n	8006c18 <_svfiprintf_r+0x130>
 8006c8c:	9105      	str	r1, [sp, #20]
 8006c8e:	e7c3      	b.n	8006c18 <_svfiprintf_r+0x130>
 8006c90:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c94:	4604      	mov	r4, r0
 8006c96:	2301      	movs	r3, #1
 8006c98:	e7f0      	b.n	8006c7c <_svfiprintf_r+0x194>
 8006c9a:	ab03      	add	r3, sp, #12
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	462a      	mov	r2, r5
 8006ca0:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <_svfiprintf_r+0x1f8>)
 8006ca2:	a904      	add	r1, sp, #16
 8006ca4:	4638      	mov	r0, r7
 8006ca6:	f3af 8000 	nop.w
 8006caa:	1c42      	adds	r2, r0, #1
 8006cac:	4606      	mov	r6, r0
 8006cae:	d1d6      	bne.n	8006c5e <_svfiprintf_r+0x176>
 8006cb0:	89ab      	ldrh	r3, [r5, #12]
 8006cb2:	065b      	lsls	r3, r3, #25
 8006cb4:	f53f af2c 	bmi.w	8006b10 <_svfiprintf_r+0x28>
 8006cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cba:	b01d      	add	sp, #116	; 0x74
 8006cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc0:	ab03      	add	r3, sp, #12
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	462a      	mov	r2, r5
 8006cc6:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <_svfiprintf_r+0x1f8>)
 8006cc8:	a904      	add	r1, sp, #16
 8006cca:	4638      	mov	r0, r7
 8006ccc:	f000 f87a 	bl	8006dc4 <_printf_i>
 8006cd0:	e7eb      	b.n	8006caa <_svfiprintf_r+0x1c2>
 8006cd2:	bf00      	nop
 8006cd4:	080071dc 	.word	0x080071dc
 8006cd8:	080071e6 	.word	0x080071e6
 8006cdc:	00000000 	.word	0x00000000
 8006ce0:	08006a31 	.word	0x08006a31
 8006ce4:	080071e2 	.word	0x080071e2

08006ce8 <_printf_common>:
 8006ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cec:	4616      	mov	r6, r2
 8006cee:	4699      	mov	r9, r3
 8006cf0:	688a      	ldr	r2, [r1, #8]
 8006cf2:	690b      	ldr	r3, [r1, #16]
 8006cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	bfb8      	it	lt
 8006cfc:	4613      	movlt	r3, r2
 8006cfe:	6033      	str	r3, [r6, #0]
 8006d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d04:	4607      	mov	r7, r0
 8006d06:	460c      	mov	r4, r1
 8006d08:	b10a      	cbz	r2, 8006d0e <_printf_common+0x26>
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	6033      	str	r3, [r6, #0]
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	0699      	lsls	r1, r3, #26
 8006d12:	bf42      	ittt	mi
 8006d14:	6833      	ldrmi	r3, [r6, #0]
 8006d16:	3302      	addmi	r3, #2
 8006d18:	6033      	strmi	r3, [r6, #0]
 8006d1a:	6825      	ldr	r5, [r4, #0]
 8006d1c:	f015 0506 	ands.w	r5, r5, #6
 8006d20:	d106      	bne.n	8006d30 <_printf_common+0x48>
 8006d22:	f104 0a19 	add.w	sl, r4, #25
 8006d26:	68e3      	ldr	r3, [r4, #12]
 8006d28:	6832      	ldr	r2, [r6, #0]
 8006d2a:	1a9b      	subs	r3, r3, r2
 8006d2c:	42ab      	cmp	r3, r5
 8006d2e:	dc26      	bgt.n	8006d7e <_printf_common+0x96>
 8006d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d34:	1e13      	subs	r3, r2, #0
 8006d36:	6822      	ldr	r2, [r4, #0]
 8006d38:	bf18      	it	ne
 8006d3a:	2301      	movne	r3, #1
 8006d3c:	0692      	lsls	r2, r2, #26
 8006d3e:	d42b      	bmi.n	8006d98 <_printf_common+0xb0>
 8006d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d44:	4649      	mov	r1, r9
 8006d46:	4638      	mov	r0, r7
 8006d48:	47c0      	blx	r8
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	d01e      	beq.n	8006d8c <_printf_common+0xa4>
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	68e5      	ldr	r5, [r4, #12]
 8006d52:	6832      	ldr	r2, [r6, #0]
 8006d54:	f003 0306 	and.w	r3, r3, #6
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	bf08      	it	eq
 8006d5c:	1aad      	subeq	r5, r5, r2
 8006d5e:	68a3      	ldr	r3, [r4, #8]
 8006d60:	6922      	ldr	r2, [r4, #16]
 8006d62:	bf0c      	ite	eq
 8006d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d68:	2500      	movne	r5, #0
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	bfc4      	itt	gt
 8006d6e:	1a9b      	subgt	r3, r3, r2
 8006d70:	18ed      	addgt	r5, r5, r3
 8006d72:	2600      	movs	r6, #0
 8006d74:	341a      	adds	r4, #26
 8006d76:	42b5      	cmp	r5, r6
 8006d78:	d11a      	bne.n	8006db0 <_printf_common+0xc8>
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	e008      	b.n	8006d90 <_printf_common+0xa8>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	4652      	mov	r2, sl
 8006d82:	4649      	mov	r1, r9
 8006d84:	4638      	mov	r0, r7
 8006d86:	47c0      	blx	r8
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d103      	bne.n	8006d94 <_printf_common+0xac>
 8006d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d94:	3501      	adds	r5, #1
 8006d96:	e7c6      	b.n	8006d26 <_printf_common+0x3e>
 8006d98:	18e1      	adds	r1, r4, r3
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	2030      	movs	r0, #48	; 0x30
 8006d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006da2:	4422      	add	r2, r4
 8006da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dac:	3302      	adds	r3, #2
 8006dae:	e7c7      	b.n	8006d40 <_printf_common+0x58>
 8006db0:	2301      	movs	r3, #1
 8006db2:	4622      	mov	r2, r4
 8006db4:	4649      	mov	r1, r9
 8006db6:	4638      	mov	r0, r7
 8006db8:	47c0      	blx	r8
 8006dba:	3001      	adds	r0, #1
 8006dbc:	d0e6      	beq.n	8006d8c <_printf_common+0xa4>
 8006dbe:	3601      	adds	r6, #1
 8006dc0:	e7d9      	b.n	8006d76 <_printf_common+0x8e>
	...

08006dc4 <_printf_i>:
 8006dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc8:	460c      	mov	r4, r1
 8006dca:	4691      	mov	r9, r2
 8006dcc:	7e27      	ldrb	r7, [r4, #24]
 8006dce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006dd0:	2f78      	cmp	r7, #120	; 0x78
 8006dd2:	4680      	mov	r8, r0
 8006dd4:	469a      	mov	sl, r3
 8006dd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006dda:	d807      	bhi.n	8006dec <_printf_i+0x28>
 8006ddc:	2f62      	cmp	r7, #98	; 0x62
 8006dde:	d80a      	bhi.n	8006df6 <_printf_i+0x32>
 8006de0:	2f00      	cmp	r7, #0
 8006de2:	f000 80d8 	beq.w	8006f96 <_printf_i+0x1d2>
 8006de6:	2f58      	cmp	r7, #88	; 0x58
 8006de8:	f000 80a3 	beq.w	8006f32 <_printf_i+0x16e>
 8006dec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006df4:	e03a      	b.n	8006e6c <_printf_i+0xa8>
 8006df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dfa:	2b15      	cmp	r3, #21
 8006dfc:	d8f6      	bhi.n	8006dec <_printf_i+0x28>
 8006dfe:	a001      	add	r0, pc, #4	; (adr r0, 8006e04 <_printf_i+0x40>)
 8006e00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e04:	08006e5d 	.word	0x08006e5d
 8006e08:	08006e71 	.word	0x08006e71
 8006e0c:	08006ded 	.word	0x08006ded
 8006e10:	08006ded 	.word	0x08006ded
 8006e14:	08006ded 	.word	0x08006ded
 8006e18:	08006ded 	.word	0x08006ded
 8006e1c:	08006e71 	.word	0x08006e71
 8006e20:	08006ded 	.word	0x08006ded
 8006e24:	08006ded 	.word	0x08006ded
 8006e28:	08006ded 	.word	0x08006ded
 8006e2c:	08006ded 	.word	0x08006ded
 8006e30:	08006f7d 	.word	0x08006f7d
 8006e34:	08006ea1 	.word	0x08006ea1
 8006e38:	08006f5f 	.word	0x08006f5f
 8006e3c:	08006ded 	.word	0x08006ded
 8006e40:	08006ded 	.word	0x08006ded
 8006e44:	08006f9f 	.word	0x08006f9f
 8006e48:	08006ded 	.word	0x08006ded
 8006e4c:	08006ea1 	.word	0x08006ea1
 8006e50:	08006ded 	.word	0x08006ded
 8006e54:	08006ded 	.word	0x08006ded
 8006e58:	08006f67 	.word	0x08006f67
 8006e5c:	680b      	ldr	r3, [r1, #0]
 8006e5e:	1d1a      	adds	r2, r3, #4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	600a      	str	r2, [r1, #0]
 8006e64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e0a3      	b.n	8006fb8 <_printf_i+0x1f4>
 8006e70:	6825      	ldr	r5, [r4, #0]
 8006e72:	6808      	ldr	r0, [r1, #0]
 8006e74:	062e      	lsls	r6, r5, #24
 8006e76:	f100 0304 	add.w	r3, r0, #4
 8006e7a:	d50a      	bpl.n	8006e92 <_printf_i+0xce>
 8006e7c:	6805      	ldr	r5, [r0, #0]
 8006e7e:	600b      	str	r3, [r1, #0]
 8006e80:	2d00      	cmp	r5, #0
 8006e82:	da03      	bge.n	8006e8c <_printf_i+0xc8>
 8006e84:	232d      	movs	r3, #45	; 0x2d
 8006e86:	426d      	negs	r5, r5
 8006e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e8c:	485e      	ldr	r0, [pc, #376]	; (8007008 <_printf_i+0x244>)
 8006e8e:	230a      	movs	r3, #10
 8006e90:	e019      	b.n	8006ec6 <_printf_i+0x102>
 8006e92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e96:	6805      	ldr	r5, [r0, #0]
 8006e98:	600b      	str	r3, [r1, #0]
 8006e9a:	bf18      	it	ne
 8006e9c:	b22d      	sxthne	r5, r5
 8006e9e:	e7ef      	b.n	8006e80 <_printf_i+0xbc>
 8006ea0:	680b      	ldr	r3, [r1, #0]
 8006ea2:	6825      	ldr	r5, [r4, #0]
 8006ea4:	1d18      	adds	r0, r3, #4
 8006ea6:	6008      	str	r0, [r1, #0]
 8006ea8:	0628      	lsls	r0, r5, #24
 8006eaa:	d501      	bpl.n	8006eb0 <_printf_i+0xec>
 8006eac:	681d      	ldr	r5, [r3, #0]
 8006eae:	e002      	b.n	8006eb6 <_printf_i+0xf2>
 8006eb0:	0669      	lsls	r1, r5, #25
 8006eb2:	d5fb      	bpl.n	8006eac <_printf_i+0xe8>
 8006eb4:	881d      	ldrh	r5, [r3, #0]
 8006eb6:	4854      	ldr	r0, [pc, #336]	; (8007008 <_printf_i+0x244>)
 8006eb8:	2f6f      	cmp	r7, #111	; 0x6f
 8006eba:	bf0c      	ite	eq
 8006ebc:	2308      	moveq	r3, #8
 8006ebe:	230a      	movne	r3, #10
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ec6:	6866      	ldr	r6, [r4, #4]
 8006ec8:	60a6      	str	r6, [r4, #8]
 8006eca:	2e00      	cmp	r6, #0
 8006ecc:	bfa2      	ittt	ge
 8006ece:	6821      	ldrge	r1, [r4, #0]
 8006ed0:	f021 0104 	bicge.w	r1, r1, #4
 8006ed4:	6021      	strge	r1, [r4, #0]
 8006ed6:	b90d      	cbnz	r5, 8006edc <_printf_i+0x118>
 8006ed8:	2e00      	cmp	r6, #0
 8006eda:	d04d      	beq.n	8006f78 <_printf_i+0x1b4>
 8006edc:	4616      	mov	r6, r2
 8006ede:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ee2:	fb03 5711 	mls	r7, r3, r1, r5
 8006ee6:	5dc7      	ldrb	r7, [r0, r7]
 8006ee8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006eec:	462f      	mov	r7, r5
 8006eee:	42bb      	cmp	r3, r7
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	d9f4      	bls.n	8006ede <_printf_i+0x11a>
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d10b      	bne.n	8006f10 <_printf_i+0x14c>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	07df      	lsls	r7, r3, #31
 8006efc:	d508      	bpl.n	8006f10 <_printf_i+0x14c>
 8006efe:	6923      	ldr	r3, [r4, #16]
 8006f00:	6861      	ldr	r1, [r4, #4]
 8006f02:	4299      	cmp	r1, r3
 8006f04:	bfde      	ittt	le
 8006f06:	2330      	movle	r3, #48	; 0x30
 8006f08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f10:	1b92      	subs	r2, r2, r6
 8006f12:	6122      	str	r2, [r4, #16]
 8006f14:	f8cd a000 	str.w	sl, [sp]
 8006f18:	464b      	mov	r3, r9
 8006f1a:	aa03      	add	r2, sp, #12
 8006f1c:	4621      	mov	r1, r4
 8006f1e:	4640      	mov	r0, r8
 8006f20:	f7ff fee2 	bl	8006ce8 <_printf_common>
 8006f24:	3001      	adds	r0, #1
 8006f26:	d14c      	bne.n	8006fc2 <_printf_i+0x1fe>
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	b004      	add	sp, #16
 8006f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f32:	4835      	ldr	r0, [pc, #212]	; (8007008 <_printf_i+0x244>)
 8006f34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	680e      	ldr	r6, [r1, #0]
 8006f3c:	061f      	lsls	r7, r3, #24
 8006f3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f42:	600e      	str	r6, [r1, #0]
 8006f44:	d514      	bpl.n	8006f70 <_printf_i+0x1ac>
 8006f46:	07d9      	lsls	r1, r3, #31
 8006f48:	bf44      	itt	mi
 8006f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f4e:	6023      	strmi	r3, [r4, #0]
 8006f50:	b91d      	cbnz	r5, 8006f5a <_printf_i+0x196>
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	f023 0320 	bic.w	r3, r3, #32
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	2310      	movs	r3, #16
 8006f5c:	e7b0      	b.n	8006ec0 <_printf_i+0xfc>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	f043 0320 	orr.w	r3, r3, #32
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	2378      	movs	r3, #120	; 0x78
 8006f68:	4828      	ldr	r0, [pc, #160]	; (800700c <_printf_i+0x248>)
 8006f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f6e:	e7e3      	b.n	8006f38 <_printf_i+0x174>
 8006f70:	065e      	lsls	r6, r3, #25
 8006f72:	bf48      	it	mi
 8006f74:	b2ad      	uxthmi	r5, r5
 8006f76:	e7e6      	b.n	8006f46 <_printf_i+0x182>
 8006f78:	4616      	mov	r6, r2
 8006f7a:	e7bb      	b.n	8006ef4 <_printf_i+0x130>
 8006f7c:	680b      	ldr	r3, [r1, #0]
 8006f7e:	6826      	ldr	r6, [r4, #0]
 8006f80:	6960      	ldr	r0, [r4, #20]
 8006f82:	1d1d      	adds	r5, r3, #4
 8006f84:	600d      	str	r5, [r1, #0]
 8006f86:	0635      	lsls	r5, r6, #24
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	d501      	bpl.n	8006f90 <_printf_i+0x1cc>
 8006f8c:	6018      	str	r0, [r3, #0]
 8006f8e:	e002      	b.n	8006f96 <_printf_i+0x1d2>
 8006f90:	0671      	lsls	r1, r6, #25
 8006f92:	d5fb      	bpl.n	8006f8c <_printf_i+0x1c8>
 8006f94:	8018      	strh	r0, [r3, #0]
 8006f96:	2300      	movs	r3, #0
 8006f98:	6123      	str	r3, [r4, #16]
 8006f9a:	4616      	mov	r6, r2
 8006f9c:	e7ba      	b.n	8006f14 <_printf_i+0x150>
 8006f9e:	680b      	ldr	r3, [r1, #0]
 8006fa0:	1d1a      	adds	r2, r3, #4
 8006fa2:	600a      	str	r2, [r1, #0]
 8006fa4:	681e      	ldr	r6, [r3, #0]
 8006fa6:	6862      	ldr	r2, [r4, #4]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	4630      	mov	r0, r6
 8006fac:	f7f9 f928 	bl	8000200 <memchr>
 8006fb0:	b108      	cbz	r0, 8006fb6 <_printf_i+0x1f2>
 8006fb2:	1b80      	subs	r0, r0, r6
 8006fb4:	6060      	str	r0, [r4, #4]
 8006fb6:	6863      	ldr	r3, [r4, #4]
 8006fb8:	6123      	str	r3, [r4, #16]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc0:	e7a8      	b.n	8006f14 <_printf_i+0x150>
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	4632      	mov	r2, r6
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	4640      	mov	r0, r8
 8006fca:	47d0      	blx	sl
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d0ab      	beq.n	8006f28 <_printf_i+0x164>
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	079b      	lsls	r3, r3, #30
 8006fd4:	d413      	bmi.n	8006ffe <_printf_i+0x23a>
 8006fd6:	68e0      	ldr	r0, [r4, #12]
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	4298      	cmp	r0, r3
 8006fdc:	bfb8      	it	lt
 8006fde:	4618      	movlt	r0, r3
 8006fe0:	e7a4      	b.n	8006f2c <_printf_i+0x168>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	4640      	mov	r0, r8
 8006fea:	47d0      	blx	sl
 8006fec:	3001      	adds	r0, #1
 8006fee:	d09b      	beq.n	8006f28 <_printf_i+0x164>
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	68e3      	ldr	r3, [r4, #12]
 8006ff4:	9903      	ldr	r1, [sp, #12]
 8006ff6:	1a5b      	subs	r3, r3, r1
 8006ff8:	42ab      	cmp	r3, r5
 8006ffa:	dcf2      	bgt.n	8006fe2 <_printf_i+0x21e>
 8006ffc:	e7eb      	b.n	8006fd6 <_printf_i+0x212>
 8006ffe:	2500      	movs	r5, #0
 8007000:	f104 0619 	add.w	r6, r4, #25
 8007004:	e7f5      	b.n	8006ff2 <_printf_i+0x22e>
 8007006:	bf00      	nop
 8007008:	080071ed 	.word	0x080071ed
 800700c:	080071fe 	.word	0x080071fe

08007010 <memmove>:
 8007010:	4288      	cmp	r0, r1
 8007012:	b510      	push	{r4, lr}
 8007014:	eb01 0402 	add.w	r4, r1, r2
 8007018:	d902      	bls.n	8007020 <memmove+0x10>
 800701a:	4284      	cmp	r4, r0
 800701c:	4623      	mov	r3, r4
 800701e:	d807      	bhi.n	8007030 <memmove+0x20>
 8007020:	1e43      	subs	r3, r0, #1
 8007022:	42a1      	cmp	r1, r4
 8007024:	d008      	beq.n	8007038 <memmove+0x28>
 8007026:	f811 2b01 	ldrb.w	r2, [r1], #1
 800702a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800702e:	e7f8      	b.n	8007022 <memmove+0x12>
 8007030:	4402      	add	r2, r0
 8007032:	4601      	mov	r1, r0
 8007034:	428a      	cmp	r2, r1
 8007036:	d100      	bne.n	800703a <memmove+0x2a>
 8007038:	bd10      	pop	{r4, pc}
 800703a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800703e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007042:	e7f7      	b.n	8007034 <memmove+0x24>

08007044 <_realloc_r>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	4607      	mov	r7, r0
 8007048:	4614      	mov	r4, r2
 800704a:	460e      	mov	r6, r1
 800704c:	b921      	cbnz	r1, 8007058 <_realloc_r+0x14>
 800704e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007052:	4611      	mov	r1, r2
 8007054:	f7ff bb9c 	b.w	8006790 <_malloc_r>
 8007058:	b922      	cbnz	r2, 8007064 <_realloc_r+0x20>
 800705a:	f7ff fc99 	bl	8006990 <_free_r>
 800705e:	4625      	mov	r5, r4
 8007060:	4628      	mov	r0, r5
 8007062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007064:	f000 f814 	bl	8007090 <_malloc_usable_size_r>
 8007068:	42a0      	cmp	r0, r4
 800706a:	d20f      	bcs.n	800708c <_realloc_r+0x48>
 800706c:	4621      	mov	r1, r4
 800706e:	4638      	mov	r0, r7
 8007070:	f7ff fb8e 	bl	8006790 <_malloc_r>
 8007074:	4605      	mov	r5, r0
 8007076:	2800      	cmp	r0, #0
 8007078:	d0f2      	beq.n	8007060 <_realloc_r+0x1c>
 800707a:	4631      	mov	r1, r6
 800707c:	4622      	mov	r2, r4
 800707e:	f7ff fb71 	bl	8006764 <memcpy>
 8007082:	4631      	mov	r1, r6
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff fc83 	bl	8006990 <_free_r>
 800708a:	e7e9      	b.n	8007060 <_realloc_r+0x1c>
 800708c:	4635      	mov	r5, r6
 800708e:	e7e7      	b.n	8007060 <_realloc_r+0x1c>

08007090 <_malloc_usable_size_r>:
 8007090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007094:	1f18      	subs	r0, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	bfbc      	itt	lt
 800709a:	580b      	ldrlt	r3, [r1, r0]
 800709c:	18c0      	addlt	r0, r0, r3
 800709e:	4770      	bx	lr

080070a0 <_init>:
 80070a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a2:	bf00      	nop
 80070a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a6:	bc08      	pop	{r3}
 80070a8:	469e      	mov	lr, r3
 80070aa:	4770      	bx	lr

080070ac <_fini>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr
